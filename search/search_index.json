{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Overview","text":"mkdocstrings-python <p>A Python handler for mkdocstrings.</p> <p> </p> <p></p> <p>The Python handler uses Griffe to collect documentation from Python source code. The word \"griffe\" can sometimes be used instead of \"signature\" in French. Griffe is able to visit the Abstract Syntax Tree (AST) of the source code to extract useful information. It is also able to execute the code (by importing it) and introspect objects in memory when source code is not available. Finally, it can parse docstrings following different styles.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install this handler as a mkdocstrings extra:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings[python]&gt;=0.18\",\n]\n</code></pre> <p>You can also explicitly depend on the handler:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings-python\",\n]\n</code></pre>"},{"location":"#preview","title":"Preview","text":""},{"location":"#features","title":"Features","text":"<ul> <li> <p>Data collection from source code: collection of the object-tree and the docstrings is done thanks to   Griffe.</p> </li> <li> <p>Support for type annotations: Griffe collects your type annotations and mkdocstrings uses them   to display parameter types or return types. It is even able to automatically add cross-references   to other objects from your API, from the standard library or third-party libraries!   See how to load inventories to enable it.</p> </li> <li> <p>Recursive documentation of Python objects: just use the module dotted-path as an identifier, and you get the full   module docs. You don't need to inject documentation for each class, function, etc.</p> </li> <li> <p>Support for documented attributes: attributes (variables) followed by a docstring (triple-quoted string) will   be recognized by Griffe in modules, classes and even in <code>__init__</code> methods.</p> </li> <li> <p>Multiple docstring-styles support: common support for Google-style, Numpydoc-style,   and Sphinx-style docstrings. See Griffe's documentation on docstrings support.</p> </li> <li> <p>Admonition support in Google docstrings: blocks like <code>Note:</code> or <code>Warning:</code> will be transformed   to their admonition equivalent.   We do not support nested admonitions in docstrings!</p> </li> <li> <p>Every object has a TOC entry: we render a heading for each object, meaning MkDocs picks them into the Table   of Contents, which is nicely displayed by the Material theme. Thanks to mkdocstrings cross-reference ability,   you can reference other objects within your docstrings, with the classic Markdown syntax:   <code>[this object][package.module.object]</code> or directly with <code>[package.module.object][]</code></p> </li> <li> <p>Source code display: mkdocstrings can add a collapsible div containing the highlighted source code   of the Python object.</p> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#1169-2025-04-03","title":"1.16.9 - 2025-04-03","text":"<p>Compare with 1.16.8</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Use <code>toc_label</code> option in a few missing places (337b46b by Timoth\u00e9e Mazzucotelli). Issue-267</li> </ul>"},{"location":"changelog/#1168-2025-03-24","title":"1.16.8 - 2025-03-24","text":"<p>Compare with 1.16.7</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Prevent infinite recursion by detecting parent-member cycles (f3917e9 by Timoth\u00e9e Mazzucotelli). Issue-griffe-368</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Prepare feature for ordering by <code>__all__</code> value (bfb5b30 by Timoth\u00e9e Mazzucotelli). Issue-219</li> <li>Sort objects without line numbers last instead of first (681afb1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1167-2025-03-20","title":"1.16.7 - 2025-03-20","text":"<p>Compare with 1.16.6</p>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Prepare <code>public</code> filtering method feature (fde2019 by Timoth\u00e9e Mazzucotelli). Issue-78</li> </ul>"},{"location":"changelog/#1166-2025-03-18","title":"1.16.6 - 2025-03-18","text":"<p>Compare with 1.16.5</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<p>Importing from submodules is now deprecated: the public API is fully exposed under the top-level <code>mkdocstrings_handler.python</code> module.</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Add back default compiled filters (regression) (2d83900 by Timoth\u00e9e Mazzucotelli). Issue-264</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Start logging warnings instead of info messages about deprecated use of templates (7606f33 by Timoth\u00e9e Mazzucotelli).</li> <li>Move modules into internal folder, expose API in top-level module (93a68d0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1165-2025-03-10","title":"1.16.5 - 2025-03-10","text":"<p>Compare with 1.16.4</p>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Prepare backlinks support (56bf627 by Timoth\u00e9e Mazzucotelli). Issue-153, PR-252</li> </ul>"},{"location":"changelog/#1164-2025-03-10","title":"1.16.4 - 2025-03-10","text":"<p>Compare with 1.16.3</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix de-duplication of summary sections (dc46ac9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1163-2025-03-08","title":"1.16.3 - 2025-03-08","text":"<p>Compare with 1.16.2</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Depend on mkdocstrings 0.28.3 (9fa4f16 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>De-duplicate summary sections (a657d07 by Timoth\u00e9e Mazzucotelli). Issue-134</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Import from top-level <code>mkdocstrings</code> module (da2ba13 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1162-2025-02-24","title":"1.16.2 - 2025-02-24","text":"<p>Compare with 1.16.1</p>"},{"location":"changelog/#build_1","title":"Build","text":"<ul> <li>Depend on mkdocs-autorefs &gt;= 1.4 and mkdocstrings &gt;= 0.28.2 (ea1ab49 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1161-2025-02-18","title":"1.16.1 - 2025-02-18","text":"<p>Compare with 1.16.0</p>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Give precedence to user-provided paths when they are already listed in <code>sys.path</code> (0f497d1 by Timoth\u00e9e Mazzucotelli). Issue-248</li> </ul>"},{"location":"changelog/#1160-2025-02-17","title":"1.16.0 - 2025-02-17","text":"<p>Compare with 1.15.1</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add option to show/hide overloads (4a5ee10 by Pete Stenger). PR-250</li> </ul>"},{"location":"changelog/#1151-2025-02-17","title":"1.15.1 - 2025-02-17","text":"<p>Compare with 1.15.0</p>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Unwrap <code>Annotated</code> regardless of <code>signature_crossrefs</code> (d809f1a by Timoth\u00e9e Mazzucotelli). Issue-249</li> </ul>"},{"location":"changelog/#1150-2025-02-11","title":"1.15.0 - 2025-02-11","text":"<p>Compare with 1.14.6</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Support cross-referencing constructor parameters in instance attribute values (f07bf58 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1146-2025-02-07","title":"1.14.6 - 2025-02-07","text":"<p>Compare with 1.14.5</p>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Catch alias resolution errors when getting aliases for an identifier (0aaa260 by Timoth\u00e9e Mazzucotelli). Issue-358</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Improve translations for Simplified Chinese and Japanese (753a0df by Zhikang Yan). PR-244</li> </ul>"},{"location":"changelog/#1145-2025-02-05","title":"1.14.5 - 2025-02-05","text":"<p>Compare with 1.14.4</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Remove type from property docstring summary in summary sections (15f2cd4 by Uchechukwu Orji). PR-242</li> </ul>"},{"location":"changelog/#1144-2025-02-04","title":"1.14.4 - 2025-02-04","text":"<p>Compare with 1.14.3</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Deactivate Pydantic validation on Python 3.9 is <code>eval-type-backport</code> is not available (for modern typing syntax support) (0de0e5e by Timoth\u00e9e Mazzucotelli). Issue-241</li> </ul>"},{"location":"changelog/#1143-2025-02-04","title":"1.14.3 - 2025-02-04","text":"<p>Compare with 1.14.2</p>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Let dataclass implement <code>__init__</code> method, set extra fields in <code>get_options</code> (477b9e4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1142-2025-02-03","title":"1.14.2 - 2025-02-03","text":"<p>Compare with 1.14.1</p>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Deactivate Pydantic logic if v1 is installed instead of v2 (c5ecd70 by Timoth\u00e9e Mazzucotelli). Issue-240</li> </ul>"},{"location":"changelog/#1141-2025-02-03","title":"1.14.1 - 2025-02-03","text":"<p>Compare with 1.14.0</p>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Fix type errors with options during collection and docstring parsing (15ca6d8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1140-2025-02-03","title":"1.14.0 - 2025-02-03","text":"<p>Compare with 1.13.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add <code>heading</code> and <code>toc_label</code> options (7cabacf by Yann Van Crombrugge). Issue-mkdocstrings-725, PR-236</li> <li>Add <code>force_inspection</code> option to force dynamic analysis (83823be by Uchechukwu Orji). Issue-94, PR-231</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Use dataclasses for configuration/options and automate schema generation (5ebeda6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1130-2024-12-26","title":"1.13.0 - 2024-12-26","text":"<p>Compare with 1.12.2</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Allow using Ruff to format signatures and attribute values (d67215c by dm). PR-216</li> </ul>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Respect <code>show_signature_annotations</code> option for attribute signatures in headings (e93d166 by Timoth\u00e9e Mazzucotelli). Issue-griffe-pydantic#9</li> <li>Handle <code>__init__</code> overloads when merging into class (af6fab3 by Timoth\u00e9e Mazzucotelli). Issue-212</li> <li>Actually check if a module is public when rendering auto-generated summary table for modules (3bf55b2 by Timoth\u00e9e Mazzucotelli). Issue-203</li> <li>Never render line numbers for signatures and attribute values (a669f1c by Timoth\u00e9e Mazzucotelli). Issue-192</li> <li>Respect highlight's <code>linenums</code> config for <code>pycon</code> examples in docstrings (53eb82a by Timoth\u00e9e Mazzucotelli). Related-to-#192</li> <li>Fix normalization of extension paths on the annoying operating system and Python 3.13 (101a6dc by Timoth\u00e9e Mazzucotelli).</li> <li>Don't merge parent <code>__init__</code> docstring into class docstring if such inherited method wasn't selected through the <code>inherited_members</code> configuration option (6c5b5c3 by Timoth\u00e9e Mazzucotelli). Issue-189</li> </ul>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>Render <code>*</code> and <code>**</code> outside of cross-references in signatures (c4506f0 by Timoth\u00e9e Mazzucotelli). Needed-for-PR-216</li> </ul>"},{"location":"changelog/#1122-2024-10-19","title":"1.12.2 - 2024-10-19","text":"<p>Compare with 1.12.1</p>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Always render cross-references outside of signatures (73f11dc by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings#700</li> </ul>"},{"location":"changelog/#1121-2024-10-14","title":"1.12.1 - 2024-10-14","text":"<p>Compare with 1.12.0</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Don't escape parameter default values (9dee4d4 by Timoth\u00e9e Mazzucotelli). Issue-191</li> </ul>"},{"location":"changelog/#1120-2024-10-12","title":"1.12.0 - 2024-10-12","text":"<p>Compare with 1.11.1</p>"},{"location":"changelog/#build_2","title":"Build","text":"<ul> <li>Drop support for Python 3.8 (6615c91 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Auto-summary of members (7f9757d by Timoth\u00e9e Mazzucotelli).</li> <li>Render function overloads (0f2c25c by Timoth\u00e9e Mazzucotelli).</li> <li>Parameter headings, more automatic cross-references (0176b83 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Declare default CSS symbol colors under :host as well (3b9dba2 by James McDonnell). PR-186</li> </ul>"},{"location":"changelog/#1111-2024-09-03","title":"1.11.1 - 2024-09-03","text":"<p>Compare with 1.11.0</p>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Prepare <code>relative_crossrefs</code> and <code>scoped_crossrefs</code> insiders features (dd8b014 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1110-2024-09-03","title":"1.11.0 - 2024-09-03","text":"<p>Compare with 1.10.9</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Hook into autorefs to provide context around cross-ref errors (bb4be5b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1109-2024-08-30","title":"1.10.9 - 2024-08-30","text":"<p>Compare with 1.10.8</p>"},{"location":"changelog/#build_3","title":"Build","text":"<ul> <li>Explicitly depend on mkdocs-autorefs to be able to specify lower bound (2299ab5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>Use new autorefs syntax (68cb72f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1108-2024-08-14","title":"1.10.8 - 2024-08-14","text":"<p>Compare with 1.10.7</p>"},{"location":"changelog/#build_4","title":"Build","text":"<ul> <li>Depend on Griffe 0.49 (a87dcad by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1107-2024-07-25","title":"1.10.7 - 2024-07-25","text":"<p>Compare with 1.10.6</p>"},{"location":"changelog/#packaging","title":"Packaging","text":"<ul> <li>Include tests and all relevant files for downstream packaging in source distribution</li> </ul>"},{"location":"changelog/#1106-2024-07-25","title":"1.10.6 - 2024-07-25","text":"<p>Compare with 1.10.5</p>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Fix condition to display members (check all members, not just non-inherited ones) (3d838a9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_11","title":"Code Refactoring","text":"<ul> <li>Update code for Griffe 0.48 (removing deprecation warnings) (eff10cc by Timoth\u00e9e Mazzucotelli). Issue-173</li> </ul>"},{"location":"changelog/#1105-2024-06-19","title":"1.10.5 - 2024-06-19","text":"<p>Compare with 1.10.4</p>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Mix both previous checks for displaying objects: not imported or public (587963b by Timoth\u00e9e Mazzucotelli). Issue-294</li> </ul>"},{"location":"changelog/#1104-2024-06-18","title":"1.10.4 - 2024-06-18","text":"<p>Compare with 1.10.3</p>"},{"location":"changelog/#code-refactoring_12","title":"Code Refactoring","text":"<ul> <li>Only filter out imported objects instead of non-public ones after applying filters (e2f4b35 by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings/griffe-294</li> <li>Update code for Griffe 0.46 to avoid deprecation warnings (321b407 by Timoth\u00e9e Mazzucotelli).</li> <li>Change <code>load_external_modules</code> default value to <code>None</code> to support new default mode in Griffe (ae5896c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1103-2024-05-22","title":"1.10.3 - 2024-05-22","text":"<p>Compare with 1.10.2</p>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Don't crash when rendering the source of an object whose lineno is none (64df00b by Timoth\u00e9e Mazzucotelli). Issue-163</li> </ul>"},{"location":"changelog/#1102-2024-05-16","title":"1.10.2 - 2024-05-16","text":"<p>Compare with 1.10.1</p>"},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Actually make use of custom .html.jinja templates (5668abb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#1101-2024-05-14","title":"1.10.1 - 2024-05-14","text":"<p>Compare with 1.10.0</p>"},{"location":"changelog/#build_5","title":"Build","text":"<ul> <li>Depend on mkdocstrings 0.25 which adds support for parameter <code>once</code> when logging messages (2bc156b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_13","title":"Code Refactoring","text":"<ul> <li>Set handler's name (a71ab12 by Timoth\u00e9e Mazzucotelli).</li> <li>Update <code>*.html</code> top-level templates to extend the <code>*.html.jinja</code> base templates (a8c540e by Timoth\u00e9e Mazzucotelli). Issue-151</li> <li>Update <code>*.html</code> base templates to extend their <code>*.html.jinja</code> counterpart, while overriding the <code>logs</code> block to issue a logging message (info) stating that extending <code>*.html</code> templates is deprecated (e6f1b9c by Timoth\u00e9e Mazzucotelli). Issue-151</li> <li>Add <code>*.html.jinja</code> top-level (overridable) templates, extending their base counterpart (7c14924 by Timoth\u00e9e Mazzucotelli). Issue-151</li> <li>Add <code>*.html.jinja</code> base templates, which are copies of <code>*.html</code> templates, with an additional <code>logs</code> block, and using the updated <code>get_template</code> filter (eced9a5 by Timoth\u00e9e Mazzucotelli). Issue-151</li> <li>Update <code>get_template</code> filter to support both <code>*.html</code> and <code>*.html.jinja</code> templates, logging a message (info) when <code>*.html</code> templates are overridden by users (3546fd7 by Timoth\u00e9e Mazzucotelli). Issue-151</li> <li>Log a warning when base templates are overridden (26e3d66 by Timoth\u00e9e Mazzucotelli). Issue-151</li> </ul>"},{"location":"changelog/#1100-2024-04-19","title":"1.10.0 - 2024-04-19","text":"<p>Compare with 1.9.2</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add CSS classes <code>doc-section-title</code> and <code>doc-section-item</code> in docstring sections (d6e1d68 by Timoth\u00e9e Mazzucotelli). Issue-17</li> </ul>"},{"location":"changelog/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>Render enumeration instance name instead of just \"value\", allowing proper cross-reference (11d81d8 by Timoth\u00e9e Mazzucotelli). Issue-124</li> </ul>"},{"location":"changelog/#192-2024-04-02","title":"1.9.2 - 2024-04-02","text":"<p>Compare with 1.9.1</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Remove cap on Python-Markdown 3.6 now that ToC labels are fixed by mkdocstrings (0c1e2c1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#191-2024-04-02","title":"1.9.1 - 2024-04-02","text":"<p>Compare with 1.9.0</p>"},{"location":"changelog/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>Don't try loading packages from relative paths (bd73497 by Timoth\u00e9e Mazzucotelli). Issue-145</li> </ul>"},{"location":"changelog/#code-refactoring_14","title":"Code Refactoring","text":"<ul> <li>Allow first name in a separate signature to be highlighted as a function name (f798a1e by Timoth\u00e9e Mazzucotelli).</li> <li>Maintain original Pygments color for cross-refs in signatures (7c8b885 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#190-2024-03-13","title":"1.9.0 - 2024-03-13","text":"<p>Compare with 1.8.0</p>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Add upper bound on Python-Markdown 3.6 to temporarily prevent breaking changes (cd93ee3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add <code>show_labels</code> option to show/hide labels (eaf9b82 by Viicos). Issue #120, PR #130</li> <li>Add option to search for stubs packages (0c6aa32 by Romain). PR #128, PR griffe#221: : https://github.com/mkdocstrings/griffe/pull/221</li> </ul>"},{"location":"changelog/#code-refactoring_15","title":"Code Refactoring","text":"<ul> <li>Mark all Jinja blocks as scoped (548bdad by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#180-2024-01-08","title":"1.8.0 - 2024-01-08","text":"<p>Compare with 1.7.5</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li> <p>Release Insiders features of the $500/month funding goal (bd30106 by Timoth\u00e9e Mazzucotelli).     The features and projects related to mkdocstrings-python are:</p> <ul> <li>Cross-references for type annotations in signatures</li> <li>Symbol types in headings and table of contents</li> <li><code>griffe-inherited-docstrings</code>, a Griffe extension for inheriting docstrings</li> <li><code>griffe2md</code>, a tool to output API docs to Markdown using Griffe</li> </ul> <p>See the complete list of features and projects here: https://pawamoy.github.io/insiders/#500-plasmavac-user-guide.</p> </li> </ul>"},{"location":"changelog/#175-2023-11-21","title":"1.7.5 - 2023-11-21","text":"<p>Compare with 1.7.4</p>"},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>Add missing translations (fallback theme) for ReadTheDocs (2fb6513 by Timoth\u00e9e Mazzucotelli). Issue #115</li> </ul>"},{"location":"changelog/#174-2023-11-12","title":"1.7.4 - 2023-11-12","text":"<p>Compare with 1.7.3</p>"},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>Make extension paths relative to config file (5035e92 by Waylan Limberg). PR #112, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#code-refactoring_16","title":"Code Refactoring","text":"<ul> <li>Prepare for Griffe 0.37 (b5bb8a9 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#173-2023-10-09","title":"1.7.3 - 2023-10-09","text":"<p>Compare with 1.7.2</p>"},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Don't deepcopy the local config (1300d2c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#172-2023-10-05","title":"1.7.2 - 2023-10-05","text":"<p>Compare with 1.7.1</p>"},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>Prevent alias resolution error when source-ordering members (67df10c by Timoth\u00e9e Mazzucotelli). Issue griffe#213</li> </ul>"},{"location":"changelog/#code-refactoring_17","title":"Code Refactoring","text":"<ul> <li>Use package relative filepath if filepath is not relative (aa5a3f7 by Timoth\u00e9e Mazzucotelli). Discussion mkdocstrings#622</li> </ul>"},{"location":"changelog/#171-2023-09-28","title":"1.7.1 - 2023-09-28","text":"<p>Compare with 1.7.0</p>"},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>Stop propagation of annotation to next parameter in signature template (3a760ac by Timoth\u00e9e Mazzucotelli). Issue #110</li> </ul>"},{"location":"changelog/#code-refactoring_18","title":"Code Refactoring","text":"<ul> <li>Look into inherited members for <code>__init__</code> methods when merging docstrings (b97d51f by Timoth\u00e9e Mazzucotelli). Issue #106</li> </ul>"},{"location":"changelog/#170-2023-09-14","title":"1.7.0 - 2023-09-14","text":"<p>Compare with 1.6.3</p>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add option to unwrap <code>Annotated</code> types (53db04b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#163-2023-09-11","title":"1.6.3 - 2023-09-11","text":"<p>Compare with 1.6.2</p>"},{"location":"changelog/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>Make <code>load_external_modules</code> a global-only option (266f41f by Timoth\u00e9e Mazzucotelli). Issue #87</li> <li>Never fail when trying to format code with Black (df24bbc by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_19","title":"Code Refactoring","text":"<ul> <li>Wrap docstring section elements (list style) in code tags to prevent spell checker errors (1ae8dd8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#162-2023-09-05","title":"1.6.2 - 2023-09-05","text":"<p>Compare with 1.6.1</p>"},{"location":"changelog/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>Don't render cross-ref spans when they're not enabled (eed51ee by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#161-2023-09-04","title":"1.6.1 - 2023-09-04","text":"<p>Compare with 1.6.0</p>"},{"location":"changelog/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>Fix spacing for rendered named items in Yields, Receives and Returns sections (list style) (e12688e by Timoth\u00e9e Mazzucotelli).</li> <li>Fix rendering Receives sections as lists (9ff7e68 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#160-2023-08-27","title":"1.6.0 - 2023-08-27","text":"<p>Compare with 1.5.2</p>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Add <code>doc-signature</code> CSS class to separate signature code blocks (b6c648f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_20","title":"Code Refactoring","text":"<ul> <li>Add a <code>format_attribute</code> filter, preparing for cross-refs in attribute signatures (8f0ade2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#152-2023-08-25","title":"1.5.2 - 2023-08-25","text":"<p>Compare with 1.5.1</p>"},{"location":"changelog/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>Regression in children template: fix condition for when members are specified (beeebff by Timoth\u00e9e Mazzucotelli). Issue #100</li> <li>Prevent whitespace removal before highlight filter (c6f36c0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_21","title":"Code Refactoring","text":"<ul> <li>Never show full object path in ToC entry (9aa758b by Timoth\u00e9e Mazzucotelli).</li> <li>Sync templates with insiders, remove useless lines (38b317f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#151-2023-08-24","title":"1.5.1 - 2023-08-24","text":"<p>Compare with 1.5.0</p>"},{"location":"changelog/#code-refactoring_22","title":"Code Refactoring","text":"<ul> <li>Never show full path in separate signature since it would appear in the heading already (9e02049 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve guessing whether an object is public (35eb811 by Timoth\u00e9e Mazzucotelli).</li> <li>Always sort modules alphabetically as source order wouldn't make sense (70c81ce by Timoth\u00e9e Mazzucotelli).</li> <li>Return anchors as a tuple, not a set, to preserve order (736a2b5 by Timoth\u00e9e Mazzucotelli). Related-to #mkdocstrings/crystal#6</li> </ul>"},{"location":"changelog/#150-2023-08-20","title":"1.5.0 - 2023-08-20","text":"<p>Compare with 1.4.0</p>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Add support for new Griffe docstring sections: modules, classes, and functions (methods) (d5337af by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#140-2023-08-18","title":"1.4.0 - 2023-08-18","text":"<p>Compare with 1.3.0</p>"},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Support new Griffe expressions (in v0.33) (9b8e1b1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_23","title":"Code Refactoring","text":"<ul> <li>Deprecate <code>crossref</code> and <code>multi_crossref</code> filters (4fe3d20 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#130-2023-08-06","title":"1.3.0 - 2023-08-06","text":"<p>Compare with 1.2.1</p>"},{"location":"changelog/#dependencies_2","title":"Dependencies","text":"<ul> <li>Set upper bound on Griffe (0.33) (ad8c2a3 by Timoth\u00e9e Mazzucotelli). See https://github.com/mkdocstrings/griffe/discussions/195.</li> </ul>"},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Show parameter default values within the \"list\" section style too (55f08f3 by Antoine Dechaume). PR #92, Co-authored-by: Timoth\u00e9e Mazzucotelli pawamoy@pm.me</li> </ul>"},{"location":"changelog/#121-2023-07-20","title":"1.2.1 - 2023-07-20","text":"<p>Compare with 1.2.0</p>"},{"location":"changelog/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>Fix members ordering when members are specified with a boolean (c69f9c3 by Timoth\u00e9e Mazzucotelli). Issue #89</li> </ul>"},{"location":"changelog/#120-2023-07-14","title":"1.2.0 - 2023-07-14","text":"<p>Compare with 1.1.2</p>"},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Add Jinja blocks to module, class, function and attribute templates (299fe48 by Timoth\u00e9e Mazzucotelli).</li> <li>Setup infrastructure for I18N, add translations for simplified chinese and japanese (b053b29 by Nyuan Zhang). PR #77</li> <li>Support inheritance (ae42356 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings#157, Discussion mkdocstrings#536</li> </ul>"},{"location":"changelog/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>Don't show <code>None</code> as return annotation of class signatures (3d8724e by Timoth\u00e9e Mazzucotelli). Issue #85</li> <li>Show labels in deterministic order (02619a8 by Oleh Prypin).</li> </ul>"},{"location":"changelog/#112-2023-06-04","title":"1.1.2 - 2023-06-04","text":"<p>Compare with 1.1.1</p>"},{"location":"changelog/#code-refactoring_24","title":"Code Refactoring","text":"<ul> <li>Keep headings style consistent (CSS) (92032e5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#111-2023-06-04","title":"1.1.1 - 2023-06-04","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>Fix mkdocs and readthedocs themes support (14f18b2 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_25","title":"Code Refactoring","text":"<ul> <li>Improve display of paragraphs in docstring sections (439f5e6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#110-2023-05-25","title":"1.1.0 - 2023-05-25","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Support custom templates through objects' extra data (8ff2b06 by Timoth\u00e9e Mazzucotelli). PR #70</li> </ul>"},{"location":"changelog/#100-2023-05-11","title":"1.0.0 - 2023-05-11","text":"<p>Compare with 0.10.1</p>"},{"location":"changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li> <p>The signature of the <code>format_signature</code> filter has changed.     If you override templates in your project to customize the output,     make sure to update the following templates so that they use     the new filter signature:</p> <ul> <li><code>class.html</code></li> <li><code>expression.html</code></li> <li><code>function.html</code></li> <li><code>signature.html</code></li> </ul> <p>You can see how to use the filter in this commit's changes: f686f4e4.</p> </li> </ul> <p>We take this as an opportunity to go out of beta and bump the version to 1.0.0. This will allow users to rely on semantic versioning.</p>"},{"location":"changelog/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>Bring compatibility with insiders signature crossrefs feature (f686f4e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0101-2023-05-07","title":"0.10.1 - 2023-05-07","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#bug-fixes_35","title":"Bug Fixes","text":"<ul> <li>Format signatures with full-path names (685512d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0100-2023-05-07","title":"0.10.0 - 2023-05-07","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#features_16","title":"Features","text":"<ul> <li>Add option to disallow inspection (40f2f26 by Nyuan Zhang). Issue #68, PR #69</li> </ul>"},{"location":"changelog/#bug-fixes_36","title":"Bug Fixes","text":"<ul> <li>Make admonitions open by default (79cd153 by Timoth\u00e9e Mazzucotelli). Issue #22</li> </ul>"},{"location":"changelog/#code-refactoring_26","title":"Code Refactoring","text":"<ul> <li>Match documented behavior for filtering (all members, list, none) (c7f70c3 by Timoth\u00e9e Mazzucotelli).</li> <li>Switch to an info level log for when black's not installed (f593bb0 by Faster Speeding).</li> <li>Return anchors as a set (e2b820c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#090-2023-04-03","title":"0.9.0 - 2023-04-03","text":"<p>Compare with 0.8.3</p>"},{"location":"changelog/#features_17","title":"Features","text":"<ul> <li>Allow resolving alias to external modules (02052e2 by Gilad). PR #61, Follow-up of PR #60</li> <li>Allow pre-loading modules (36002cb by Gilad). Issue mkdocstrings/mkdocstrings#503, PR #60</li> <li>Add show options for docstrings (a6c55fb by Jeremy Goh). Issue mkdocstrings/mkdocstrings#466, PR #56</li> <li>Allow custom list of domains for inventories (f5ea6fd by Sorin Sbarnea). Issue mkdocstrings/mkdocstrings#510, PR #49</li> </ul>"},{"location":"changelog/#bug-fixes_37","title":"Bug Fixes","text":"<ul> <li>Prevent alias resolution error when searching for anchors (a190e2c by Timoth\u00e9e Mazzucotelli). Issue #64</li> </ul>"},{"location":"changelog/#code-refactoring_27","title":"Code Refactoring","text":"<ul> <li>Support Griffe 0.26 (075735c by Timoth\u00e9e Mazzucotelli).</li> <li>Log (debug) unresolved aliases (9164742 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#083-2023-01-04","title":"0.8.3 - 2023-01-04","text":"<p>Compare with 0.8.2</p>"},{"location":"changelog/#code-refactoring_28","title":"Code Refactoring","text":"<ul> <li>Change \"unresolved aliases\" log level to DEBUG (dccb818 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#082-2022-11-19","title":"0.8.2 - 2022-11-19","text":"<p>Compare with 0.8.1</p>"},{"location":"changelog/#bug-fixes_38","title":"Bug Fixes","text":"<ul> <li>Fix base directory used to expand globs (34cfa4b by Florian Hofer). PR #45</li> </ul>"},{"location":"changelog/#081-2022-11-19","title":"0.8.1 - 2022-11-19","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#bug-fixes_39","title":"Bug Fixes","text":"<ul> <li>Expand globs relative to configuration file path (0dc45ae by David Vegh). Issue #42, PR #43</li> </ul>"},{"location":"changelog/#080-2022-11-13","title":"0.8.0 - 2022-11-13","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#features_18","title":"Features","text":"<ul> <li>Add support for globs in paths configuration (29edd02 by Andrew Guenther). Issue #33, PR #34</li> </ul>"},{"location":"changelog/#code-refactoring_29","title":"Code Refactoring","text":"<ul> <li>Support Griffe 0.24 (3b9f701 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#071-2022-06-12","title":"0.7.1 - 2022-06-12","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#bug-fixes_40","title":"Bug Fixes","text":"<ul> <li>Fix rendering of <code>/</code> in signatures (3e927e4 by Timoth\u00e9e Mazzucotelli). Issue #25</li> </ul>"},{"location":"changelog/#070-2022-05-28","title":"0.7.0 - 2022-05-28","text":"<p>Compare with 0.6.6</p>"},{"location":"changelog/#packaging-dependencies","title":"Packaging / Dependencies","text":"<ul> <li>Depend on mkdocstrings 0.19 (b6a9a47 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_19","title":"Features","text":"<ul> <li>Add config option for annotations paths verbosity (b6c9893 by Timoth\u00e9e Mazzucotelli).</li> <li>Use sections titles in SpaCy-styled docstrings (fe16b54 by Timoth\u00e9e Mazzucotelli).</li> <li>Wrap objects names in spans to allow custom styling (0822ff9 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#240</li> <li>Add Jinja blocks around docstring section styles (aaa79ee by Timoth\u00e9e Mazzucotelli).</li> <li>Add members and filters options (24a6136 by Timoth\u00e9e Mazzucotelli).</li> <li>Add paths option (dd41182 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/mkdocstrings#311, PR #20</li> </ul>"},{"location":"changelog/#bug-fixes_41","title":"Bug Fixes","text":"<ul> <li>Fix CSS class on labels (312a709 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix categories rendering (6407cf4 by Timoth\u00e9e Mazzucotelli). Issue #14</li> </ul>"},{"location":"changelog/#code-refactoring_30","title":"Code Refactoring","text":"<ul> <li>Disable <code>show_submodules</code> by default (480d0c3 by Timoth\u00e9e Mazzucotelli).</li> <li>Merge default configuration options in handler (347ce76 by Timoth\u00e9e Mazzucotelli).</li> <li>Reduce number of template debug logs (8fed314 by Timoth\u00e9e Mazzucotelli).</li> <li>Respect <code>show_root_full_path</code> for ToC entries (hidden headings) (8f4c853 by Timoth\u00e9e Mazzucotelli).</li> <li>Bring consistency on headings style (59104c4 by Timoth\u00e9e Mazzucotelli).</li> <li>Stop using deprecated base classes (d5ea1c5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#066-2022-03-06","title":"0.6.6 - 2022-03-06","text":"<p>Compare with 0.6.5</p>"},{"location":"changelog/#code-refactoring_31","title":"Code Refactoring","text":"<ul> <li>Always hide <code>self</code> and <code>cls</code> parameters (7f579d1 by Timoth\u00e9e Mazzucotelli). Issue #7</li> <li>Use <code>pycon</code> for examples code blocks (6545900 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#065-2022-02-24","title":"0.6.5 - 2022-02-24","text":"<p>Compare with 0.6.4</p>"},{"location":"changelog/#bug-fixes_42","title":"Bug Fixes","text":"<ul> <li>Don't escape signatures return annotations (ac54bfc by Timoth\u00e9e Mazzucotelli). Issue #6</li> </ul>"},{"location":"changelog/#064-2022-02-22","title":"0.6.4 - 2022-02-22","text":"<p>Compare with 0.6.3</p>"},{"location":"changelog/#bug-fixes_43","title":"Bug Fixes","text":"<ul> <li>Fix rendering of signature return annotation (b92ba3b by Timoth\u00e9e Mazzucotelli). Issue #4</li> </ul>"},{"location":"changelog/#063-2022-02-20","title":"0.6.3 - 2022-02-20","text":"<p>Compare with 0.6.2</p>"},{"location":"changelog/#bug-fixes_44","title":"Bug Fixes","text":"<ul> <li>Fix examples rendering (a06a7e3 by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/griffe#46</li> </ul>"},{"location":"changelog/#062-2022-02-17","title":"0.6.2 - 2022-02-17","text":"<p>Compare with 0.6.1</p>"},{"location":"changelog/#bug-fixes_45","title":"Bug Fixes","text":"<ul> <li>Catch alias resolution errors (b734dd0 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#061-2022-02-17","title":"0.6.1 - 2022-02-17","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#bug-fixes_46","title":"Bug Fixes","text":"<ul> <li>Don't pop from fallback config (bde32af by Timoth\u00e9e Mazzucotelli).</li> <li>Fix rendering init method source when merged into class (4a20aea by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2022-02-13","title":"0.6.0 - 2022-02-13","text":"<p>Compare with 0.5.4</p>"},{"location":"changelog/#features_20","title":"Features","text":"<ul> <li>Add option to merge <code>__init__</code> methods' docstrings into their classes' docstrings (1b4d1c0 by Timoth\u00e9e Mazzucotelli).</li> <li>Support separate attribute signature (e962b88 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_47","title":"Bug Fixes","text":"<ul> <li>Restore full cross-refs paths on hover (ac11970 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix rendering of labels (52919c5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_32","title":"Code Refactoring","text":"<ul> <li>Don't add trailing parentheses in functions heading when separate signature (885696e by Timoth\u00e9e Mazzucotelli).</li> <li>Use more explicit template debug messages (f2122d7 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#054-2022-02-13","title":"0.5.4 - 2022-02-13","text":"<p>Compare with 0.5.3</p>"},{"location":"changelog/#bug-fixes_48","title":"Bug Fixes","text":"<ul> <li>Don't load additional modules during fallback (69b8e25 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#053-2022-02-08","title":"0.5.3 - 2022-02-08","text":"<p>Compare with 0.5.2</p>"},{"location":"changelog/#bug-fixes_49","title":"Bug Fixes","text":"<ul> <li>Allow passing <code>null</code> as docstring style (f526816 by Timoth\u00e9e Mazzucotelli). Issue #2</li> </ul>"},{"location":"changelog/#052-2022-02-05","title":"0.5.2 - 2022-02-05","text":"<p>Compare with 0.5.1</p>"},{"location":"changelog/#dependencies_3","title":"Dependencies","text":"<ul> <li>Require at least mkdocstrings 0.18 (7abdda4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#051-2022-02-03","title":"0.5.1 - 2022-02-03","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#dependencies_4","title":"Dependencies","text":"<ul> <li>Depend on Griffe &gt;= 0.11.1 (1303557 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_33","title":"Code Refactoring","text":"<ul> <li>Move handler into its own module (b787e78 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2022-02-03","title":"0.5.0 - 2022-02-03","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#features_21","title":"Features","text":"<ul> <li>Allow changing docstring style of an object (39240c1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_50","title":"Bug Fixes","text":"<ul> <li>Warn if Black is not installed when formatting signature (b848277 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix missing default for <code>docstring_section_style</code> option (774988e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_34","title":"Code Refactoring","text":"<ul> <li>Change to new way of stripping paragraphs (33d4594 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#041-2022-02-01","title":"0.4.1 - 2022-02-01","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#bug-fixes_51","title":"Bug Fixes","text":"<ul> <li>Fix docstring admonitions rendering (a24ae2e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2022-02-01","title":"0.4.0 - 2022-02-01","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#code-refactoring_35","title":"Code Refactoring","text":"<ul> <li>Use the new <code>mkdocstrings_handlers</code> namespace (23c9023 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2022-01-14","title":"0.3.0 - 2022-01-14","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_22","title":"Features","text":"<ul> <li>Support griffe 0.10 (28061de by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#dependencies_5","title":"Dependencies","text":"<ul> <li>Require griffe 0.10 (cfbd7bb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_36","title":"Code Refactoring","text":"<ul> <li>Use new logger patching utility (4cdb292 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2021-12-28","title":"0.2.0 - 2021-12-28","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#dependencies_6","title":"Dependencies","text":"<ul> <li>Depend on griffe &gt;= 0.7.1 (34f7ebd by Timoth\u00e9e Mazzucotelli).</li> <li>Upgrade griffe, no upper bound (8f0aa42 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_23","title":"Features","text":"<ul> <li>Add <code>show_signature</code> rendering option (0f07c2e by Will Da Silva).</li> </ul>"},{"location":"changelog/#bug-fixes_52","title":"Bug Fixes","text":"<ul> <li>Fix templates for named docstring elements (47868a1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2021-12-19","title":"0.1.0 - 2021-12-19","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_24","title":"Features","text":"<ul> <li>Implement handler and add templates (dbb580a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_53","title":"Bug Fixes","text":"<ul> <li>Fix separate signature feature (da6e81c by Timoth\u00e9e Mazzucotelli).</li> <li>Fix signature template (parameters annotations) (b34ead0 by Timoth\u00e9e Mazzucotelli).</li> <li>Only show source when present (c270d68 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_37","title":"Code Refactoring","text":"<ul> <li>Return all known anchors (9bbfe14 by Timoth\u00e9e Mazzucotelli).</li> <li>Update for griffe 0.4.0 (831aabb by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd python\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocstrings-python. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License click Composable command line interface toolkit <code>&gt;=8.0.0, &gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.6.0.1.3.1</code> ISC Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.6</code> BSD License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3, &gt;=3.3</code> <code>3.7</code> BSD License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1, &gt;=2.0</code> <code>3.0.2</code> BSD License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.1</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.28.3</code> <code>0.29.0</code> ISC packaging Core utilities for Python packages <code>&gt;=22.0, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0, &gt;=2</code> <code>4.3.6</code> MIT pymdown-extensions Extension pack for Python Markdown. <code>&gt;=9, &gt;=6.3</code> <code>10.14.3</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1, &gt;=4.0</code> <code>4.12.2</code> Python Software Foundation License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License annotated-types Reusable constraint types to use with typing.Annotated <code>&gt;=0.6.0</code> <code>0.7.0</code> MIT License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT asttokens Annotate AST trees with source code positions <code>&gt;=2.0.5</code> <code>3.0.0</code> Apache 2.0 babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12.3</code> <code>4.13.3</code> MIT License black The uncompromising code formatter. <code>&gt;=25.1</code> <code>25.1.0</code> MIT build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.26.6</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=8.0.0, &gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.7.0</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT executing Get the currently executing AST node of a frame, and other information <code>&gt;=2.2.0</code> <code>2.2.0</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.1</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT inline-snapshot golden master/snapshot/approval testing library which puts the values right into your source code <code>&gt;=0.18</code> <code>0.20.7</code> MIT License jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1, &gt;=2.10</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3, &gt;=3.3</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.1.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1, &gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3, &gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6, &gt;=1.1</code> <code>1.6.1</code> BSD-2-Clause mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.5</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.1</code> <code>0.1.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.8+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-redirects A MkDocs plugin for dynamic page redirects to prevent broken links <code>&gt;=1.2</code> <code>1.2.2</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.9</code> MIT more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=22.0, &gt;=20.5</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0, &gt;=2</code> <code>4.3.6</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydantic Data validation using Python type hints <code>&gt;=2.10</code> <code>2.10.6</code> MIT pydantic_core Core functionality for Pydantic validation and serialization <code>==2.27.2</code> <code>2.27.2</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=9, &gt;=6.3</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.1</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.11.0</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.6</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20241204</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20241230</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1, &gt;=4.0</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.3.4</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2021, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"insiders/","title":"Insiders","text":"<p>mkdocstrings-python follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders. Read on to learn what sponsorships achieve, how to become a sponsor to get access to Insiders, and what's in it for you!</p>"},{"location":"insiders/#what-is-insiders","title":"What is Insiders?","text":"<p>mkdocstrings-python Insiders is a private fork of mkdocstrings-python, hosted as a private GitHub repository. Almost<sup>1</sup> all new features are developed as part of this fork, which means that they are immediately available to all eligible sponsors, as they are granted access to this private repository.</p> <p>Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into mkdocstrings-python and released for general availability, making them available to all users. Bugfixes are always released in tandem.</p> <p>Sponsorships start as low as $10 a month.<sup>2</sup></p>"},{"location":"insiders/#what-sponsorships-achieve","title":"What sponsorships achieve","text":"<p>Sponsorships make this project sustainable, as they buy the maintainers of this project time \u2013 a very scarce resource \u2013 which is spent on the development of new features, bug fixing, stability improvement, issue triage and general support. The biggest bottleneck in Open Source is time.<sup>3</sup></p> <p>If you're unsure if you should sponsor this project, check out the list of completed funding goals to learn whether you're already using features that were developed with the help of sponsorships. You're most likely using at least a handful of them, thanks to our awesome sponsors!</p>"},{"location":"insiders/#whats-in-it-for-me","title":"What's in it for me?","text":"<p>The moment you become a sponsor, you'll get immediate access to 7 additional features that you can start using right away, and which are currently exclusively available to sponsors:</p> <ul> <li> Ordering method: <code>__all__</code> </li> <li> Filtering method: <code>public</code> </li> <li> Backlinks </li> <li> Relative cross-references</li> <li> Scoped cross-references</li> <li> Class inheritance diagrams with Mermaid</li> <li> Annotations modernization</li> </ul> <p>These are just the features related to this project. See the complete feature list on the author's main Insiders page.</p> <p>Additionally, your sponsorship will give more weight to your upvotes on issues, helping us prioritize work items in our backlog. For more information on how we prioritize work, see this page: Backlog management.</p>"},{"location":"insiders/#how-to-become-a-sponsor","title":"How to become a sponsor","text":"<p>Thanks for your interest in sponsoring! In order to become an eligible sponsor with your GitHub account, visit pawamoy's sponsor profile, and complete a sponsorship of $10 a month or more. You can use your individual or organization GitHub account for sponsoring.</p> <p>Sponsorships lower than $10 a month are also very much appreciated, and useful. They won't grant you access to Insiders, but they will be counted towards reaching sponsorship goals. Every sponsorship helps us implementing new features and releasing them to the public.</p> <p>Important: By default, when you're sponsoring @pawamoy through a GitHub organization, all the publicly visible members of the organization will be invited to join our private repositories. If you wish to only grant access to a subset of users, please send a short email to insiders@pawamoy.fr with the name of your organization and the GitHub accounts of the users that should be granted access.</p> <p>Tip: to ensure that access is not tied to a particular individual GitHub account, you can create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being granted access to our private repositories, the bot account can create private forks of our private repositories into your own organization, which all members of your organization will have access to.</p> <p>You can cancel your sponsorship anytime.<sup>4</sup></p> <p> \u00a0 Join our  awesome sponsors</p> <p>   If you sponsor publicly, you're automatically added here with a link to your profile and avatar to show your support for mkdocstrings-python. Alternatively, if you wish to keep your sponsorship private, you'll be a silent +1. You can select visibility during checkout and change it afterwards. </p>"},{"location":"insiders/#funding","title":"Funding","text":""},{"location":"insiders/#goals","title":"Goals","text":"<p>The following section lists all funding goals. Each goal contains a list of features prefixed with a checkmark symbol, denoting whether a feature is  already available or  planned, but not yet implemented. When the funding goal is hit, the features are released for general availability.</p> <p></p>"},{"location":"insiders/#1500-hyperlamp-navigation-tips","title":"$ 1,500 \u2014 HyperLamp Navigation Tips","text":"<ul> <li> Class inheritance diagrams with Mermaid</li> <li> Annotations modernization</li> </ul>"},{"location":"insiders/#2000-fusiondrive-ejection-configuration","title":"$ 2,000 \u2014 FusionDrive Ejection Configuration","text":"<ul> <li> Relative cross-references</li> <li> Scoped cross-references</li> <li> Backlinks</li> <li> Filtering method: <code>public</code></li> <li> Ordering method: <code>__all__</code></li> </ul>"},{"location":"insiders/#goals-completed","title":"Goals completed","text":"<p>This section lists all funding goals that were previously completed, which means that those features were part of Insiders, but are now generally available and can be used by all users.</p> <p></p>"},{"location":"insiders/#500-plasmavac-user-guide","title":"$ 500 \u2014 PlasmaVac User Guide","text":"<ul> <li> Cross-references for type annotations in signatures</li> <li> Symbol types in headings and table of contents</li> <li> griffe-inherited-docstrings \u2014 [Project] Griffe extension for inheriting docstrings</li> </ul>"},{"location":"insiders/#1000-gravifridge-fluid-renewal","title":"$ 1,000 \u2014 GraviFridge Fluid Renewal","text":"<ul> <li> Auto-summary of object members</li> <li> Automatic rendering of function signature overloads</li> <li> Parameter headings</li> <li> Automatic cross-references to parameters</li> <li> Automatic cross-references for default parameter values in signatures</li> <li> griffe-pydantic \u2014 [Project] Griffe extension for Pydantic</li> <li> griffe-warnings-deprecated \u2014 [Project] Griffe extension for <code>@warnings.deprecated</code> (PEP 702)</li> </ul>"},{"location":"insiders/#frequently-asked-questions","title":"Frequently asked questions","text":""},{"location":"insiders/#compatibility","title":"Compatibility","text":"<p>We're building an open source project and want to allow outside collaborators to use mkdocstrings-python locally without having access to Insiders. Is this still possible?</p> <p>Yes. Insiders is compatible with mkdocstrings-python. Almost all new features and configuration options are either backward-compatible or implemented behind feature flags. Most Insiders features enhance the overall experience, though while these features add value for the users of your project, they shouldn't be necessary for previewing when making changes to content.</p>"},{"location":"insiders/#payment","title":"Payment","text":"<p>We don't want to pay for sponsorship every month. Are there any other options?</p> <p>Yes. You can sponsor on a yearly basis by switching your GitHub account to a yearly billing cycle. If for some reason you cannot do that, you could also create a dedicated GitHub account with a yearly billing cycle, which you only use for sponsoring (some sponsors already do that).</p> <p>If you have any problems or further questions, please reach out to insiders@pawamoy.fr.</p>"},{"location":"insiders/#terms","title":"Terms","text":"<p>Are we allowed to use Insiders under the same terms and conditions as mkdocstrings-python?</p> <p>Yes. Whether you're an individual or a company, you may use mkdocstrings-python Insiders precisely under the same terms as mkdocstrings-python, which are given by the ISC license. However, we kindly ask you to respect our fair use policy:</p> <ul> <li>Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, privately fork or mirror it, but please don't make the source code public, as it would counteract the sponsorware strategy.</li> <li>If you cancel your subscription, your access to the private repository is revoked, and you will miss out on all future updates of Insiders. However, you may use the latest version that's available to you as long as you like. Just remember that GitHub deletes private forks.</li> </ul> <ol> <li> <p>In general, every new feature is first exclusively released to sponsors, but sometimes upstream dependencies enhance existing features that must be supported by mkdocstrings-python.\u00a0\u21a9</p> </li> <li> <p>Note that $10 a month is the minimum amount to become eligible for Insiders. While GitHub Sponsors also allows to sponsor lower amounts or one-time amounts, those can't be granted access to Insiders due to technical reasons. Such contributions are still very much welcome as they help ensuring the project's sustainability.\u00a0\u21a9</p> </li> <li> <p>Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use mkdocstrings-python, you can be sure that bugs are fixed quickly and new features are added regularly.\u00a0\u21a9</p> </li> <li> <p>If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable.\u00a0\u21a9</p> </li> </ol>"},{"location":"insiders/changelog/","title":"Changelog","text":""},{"location":"insiders/changelog/#mkdocstrings-python-insiders","title":"mkdocstrings-python Insiders","text":""},{"location":"insiders/changelog/#1.12.0","title":"1.12.0 March 24, 2025","text":"<ul> <li>Ordering method: <code>__all__</code></li> </ul>"},{"location":"insiders/changelog/#1.11.0","title":"1.11.0 March 20, 2025","text":"<ul> <li>Filtering method: <code>public</code></li> </ul>"},{"location":"insiders/changelog/#1.10.0","title":"1.10.0 March 10, 2025","text":"<ul> <li>Backlinks</li> </ul>"},{"location":"insiders/changelog/#1.9.1","title":"1.9.1 December 26, 2024","text":"<ul> <li>Re-add class template for RTD theme</li> <li>Make inheritance diagrams rendering more robust</li> </ul>"},{"location":"insiders/changelog/#1.9.0","title":"1.9.0 September 03, 2024","text":"<ul> <li>Relative cross-references</li> <li>Scoped cross-references</li> </ul>"},{"location":"insiders/changelog/#1.8.3","title":"1.8.3 June 19, 2024","text":"<ul> <li>Update code for Griffe 0.46+ to avoid deprecation warnings</li> </ul>"},{"location":"insiders/changelog/#1.8.2","title":"1.8.2 May 09, 2024","text":"<ul> <li>Don't render cross-refs for default values when signatures aren't separated</li> </ul>"},{"location":"insiders/changelog/#1.8.1","title":"1.8.1 April 19, 2024","text":"<ul> <li>Render enumeration instance name instead of just \"value\", allowing proper cross-reference</li> </ul>"},{"location":"insiders/changelog/#1.8.0","title":"1.8.0 March 24, 2024","text":"<ul> <li>Annotations modernization</li> </ul>"},{"location":"insiders/changelog/#1.7.0","title":"1.7.0 March 24, 2024","text":"<ul> <li>Class inheritance diagrams with Mermaid</li> </ul>"},{"location":"insiders/changelog/#1.6.0","title":"1.6.0 January 30, 2024","text":"<ul> <li>Render cross-references to parameters documentation in signatures and attribute values.</li> <li>Add <code>parameter_headings</code> option to render headings for parameters (enabling permalinks and ToC/inventory entries).</li> <li>Render cross-references for default parameter values in signatures.</li> </ul>"},{"location":"insiders/changelog/#1.5.1","title":"1.5.1 September 12, 2023","text":"<ul> <li>Prevent empty auto-summarized Methods section.</li> </ul>"},{"location":"insiders/changelog/#1.5.0","title":"1.5.0 September 05, 2023","text":"<ul> <li>Render function signature overloads.</li> </ul>"},{"location":"insiders/changelog/#1.4.0","title":"1.4.0 August 27, 2023","text":"<ul> <li>Render cross-references in attribute signatures.</li> </ul>"},{"location":"insiders/changelog/#1.3.0","title":"1.3.0 August 24, 2023","text":"<ul> <li>Add \"method\" symbol type.</li> </ul>"},{"location":"insiders/changelog/#1.2.0","title":"1.2.0 August 20, 2023","text":"<ul> <li>Add member auto-summaries.</li> </ul>"},{"location":"insiders/changelog/#1.1.4","title":"1.1.4 July 17, 2023","text":"<ul> <li>Fix heading level increment for class members.</li> </ul>"},{"location":"insiders/changelog/#1.1.3","title":"1.1.3 July 17, 2023","text":"<ul> <li>Fix heading level (avoid with clause preventing to decrease it).</li> </ul>"},{"location":"insiders/changelog/#1.1.2","title":"1.1.2 July 15, 2023","text":"<ul> <li>Use non-breaking spaces after symbol types.</li> </ul>"},{"location":"insiders/changelog/#1.1.1","title":"1.1.1 June 27, 2023","text":"<ul> <li>Correctly escape expressions in signatures and other rendered types.</li> </ul>"},{"location":"insiders/changelog/#1.1.0","title":"1.1.0 June 4, 2023","text":"<ul> <li>Add Symbol types in headings and table of contents.</li> </ul>"},{"location":"insiders/changelog/#1.0.0","title":"1.0.0 May 10, 2023","text":"<ul> <li>Add cross-references for type annotations in signatures.     Make sure to update your local templates as the signature of the     <code>format_signature</code> filter     has changed. The templates that must be updated:     <code>class.html</code>, <code>expression.html</code>, <code>function.html</code> and <code>signature.html</code>.</li> </ul>"},{"location":"insiders/installation/","title":"Getting started with Insiders","text":"<p>mkdocstrings-python Insiders is a compatible drop-in replacement for mkdocstrings-python, and can be installed similarly using <code>pip</code> or <code>git</code>. Note that in order to access the Insiders repository, you need to become an eligible sponsor of @pawamoy on GitHub.</p>"},{"location":"insiders/installation/#installation","title":"Installation","text":""},{"location":"insiders/installation/#with-the-insiders-tool","title":"with the <code>insiders</code> tool","text":"<p><code>insiders</code> is a tool that helps you keep up-to-date versions of Insiders projects in the PyPI index of your choice (self-hosted, Google registry, Artifactory, etc.).</p> <p>We kindly ask that you do not upload the distributions to public registries, as it is against our Terms of use.</p>"},{"location":"insiders/installation/#with-pip-sshhttps","title":"with pip (ssh/https)","text":"<p>mkdocstrings-python Insiders can be installed with <code>pip</code> using SSH:</p> <pre><code>pip install git+ssh://git@github.com/pawamoy-insiders/mkdocstrings-python.git\n</code></pre> <p>Or using HTTPS:</p> <pre><code>pip install git+https://${GH_TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git\n</code></pre> How to get a GitHub personal access token? <p> The <code>GH_TOKEN</code> environment variable is a GitHub token. It can be obtained by creating a personal access token for your GitHub account. It will give you access to the Insiders repository, programmatically, from the command line or GitHub Actions workflows:</p> <ol> <li>Go to https://github.com/settings/tokens</li> <li>Click on Generate a new token</li> <li>Enter a name and select the <code>repo</code> scope</li> <li>Generate the token and store it in a safe place</li> </ol> <p>Note that the personal access token must be kept secret at all times, as it allows the owner to access your private repositories.</p>"},{"location":"insiders/installation/#with-git","title":"with Git","text":"<p>Of course, you can use mkdocstrings-python Insiders directly using Git:</p> <pre><code>git clone git@github.com:pawamoy-insiders/mkdocstrings-python\n</code></pre> <p>When cloning with Git, the package must be installed:</p> <pre><code>pip install -e mkdocstrings-python\n</code></pre>"},{"location":"insiders/installation/#upgrading","title":"Upgrading","text":"<p>When upgrading Insiders, you should always check the version of mkdocstrings-python which makes up the first part of the version qualifier. For example, a version like <code>8.x.x.4.x.x</code> means that Insiders <code>4.x.x</code> is currently based on <code>8.x.x</code>.</p> <p>If the major version increased, it's a good idea to consult the changelog and go through the steps to ensure your configuration is up to date and all necessary changes have been made.</p>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#mkdocstrings_handlers.python","title":"python","text":"<p>Python handler for mkdocstrings.</p> <p>Modules:</p> <ul> <li> <code>config</code>           \u2013            <p>Deprecated. Import from <code>mkdocstrings_handlers.python</code> directly.</p> </li> <li> <code>handler</code>           \u2013            <p>Deprecated. Import from <code>mkdocstrings_handlers.python</code> directly.</p> </li> <li> <code>rendering</code>           \u2013            <p>Deprecated. Import from <code>mkdocstrings_handlers.python</code> directly.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>AutoStyleOptions</code>           \u2013            <p>Auto style docstring options.</p> </li> <li> <code>AutorefsHook</code>           \u2013            <p>Autorefs hook.</p> </li> <li> <code>GoogleStyleOptions</code>           \u2013            <p>Google style docstring options.</p> </li> <li> <code>Inventory</code>           \u2013            <p>An inventory.</p> </li> <li> <code>NumpyStyleOptions</code>           \u2013            <p>Numpy style docstring options.</p> </li> <li> <code>PerStyleOptions</code>           \u2013            <p>Per style options.</p> </li> <li> <code>PythonConfig</code>           \u2013            <p>Python handler configuration.</p> </li> <li> <code>PythonHandler</code>           \u2013            <p>The Python handler class.</p> </li> <li> <code>PythonInputConfig</code>           \u2013            <p>Python handler configuration.</p> </li> <li> <code>PythonInputOptions</code>           \u2013            <p>Accepted input options.</p> </li> <li> <code>PythonOptions</code>           \u2013            <p>Final options passed as template context.</p> </li> <li> <code>SphinxStyleOptions</code>           \u2013            <p>Sphinx style docstring options.</p> </li> <li> <code>SummaryOption</code>           \u2013            <p>Summary option.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>do_as_attributes_section</code>             \u2013              <p>Build an attributes section from a list of attributes.</p> </li> <li> <code>do_as_classes_section</code>             \u2013              <p>Build a classes section from a list of classes.</p> </li> <li> <code>do_as_functions_section</code>             \u2013              <p>Build a functions section from a list of functions.</p> </li> <li> <code>do_as_modules_section</code>             \u2013              <p>Build a modules section from a list of modules.</p> </li> <li> <code>do_backlink_tree</code>             \u2013              <p>Build a tree of backlinks.</p> </li> <li> <code>do_crossref</code>             \u2013              <p>Deprecated. Filter to create cross-references.</p> </li> <li> <code>do_filter_objects</code>             \u2013              <p>Filter a dictionary of objects based on their docstrings.</p> </li> <li> <code>do_format_attribute</code>             \u2013              <p>Format an attribute.</p> </li> <li> <code>do_format_code</code>             \u2013              <p>Format code.</p> </li> <li> <code>do_format_signature</code>             \u2013              <p>Format a signature.</p> </li> <li> <code>do_get_template</code>             \u2013              <p>Get the template name used to render an object.</p> </li> <li> <code>do_multi_crossref</code>             \u2013              <p>Deprecated. Filter to create cross-references.</p> </li> <li> <code>do_order_members</code>             \u2013              <p>Order members given an ordering method.</p> </li> <li> <code>do_split_path</code>             \u2013              <p>Split object paths for building cross-references.</p> </li> <li> <code>get_handler</code>             \u2013              <p>Return an instance of <code>PythonHandler</code>.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>Order</code>           \u2013            <p>Ordering methods.</p> </li> <li> <code>Tree</code>           \u2013            <p>A tree type. Each node holds a tuple of items.</p> </li> <li> <code>do_stash_crossref</code>           \u2013            <p>Filter to stash cross-references (and restore them after formatting and highlighting).</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.Order","title":"Order  <code>module-attribute</code>","text":"<pre><code>Order = Literal['__all__', 'alphabetical', 'source']\n</code></pre> <p>Ordering methods.</p> <ul> <li><code>__all__</code>: order members according to <code>__all__</code> module attributes, if declared;</li> <li><code>alphabetical</code>: order members alphabetically;</li> <li><code>source</code>: order members as they appear in the source file.</li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.Tree","title":"Tree  <code>module-attribute</code>","text":"<pre><code>Tree = dict[tuple[_T, ...], 'Tree']\n</code></pre> <p>A tree type. Each node holds a tuple of items.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_stash_crossref","title":"do_stash_crossref  <code>module-attribute</code>","text":"<pre><code>do_stash_crossref = _StashCrossRefFilter()\n</code></pre> <p>Filter to stash cross-references (and restore them after formatting and highlighting).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutoStyleOptions","title":"AutoStyleOptions  <code>dataclass</code>","text":"<pre><code>AutoStyleOptions(\n    method: Literal[\"heuristics\", \"max_sections\"] = \"heuristics\",\n    style_order: list[str] = lambda: [\"sphinx\", \"google\", \"numpy\"](),\n    default: str | None = None,\n    per_style_options: PerStyleOptions = PerStyleOptions(),\n)\n</code></pre> <p>Auto style docstring options.</p> <p>Methods:</p> <ul> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>default</code>               (<code>str | None</code>)           \u2013            <p>The default docstring style to use if no other style is detected.</p> </li> <li> <code>method</code>               (<code>Literal['heuristics', 'max_sections']</code>)           \u2013            <p>The method to use to determine the docstring style.</p> </li> <li> <code>per_style_options</code>               (<code>PerStyleOptions</code>)           \u2013            <p>Per-style options.</p> </li> <li> <code>style_order</code>               (<code>list[str]</code>)           \u2013            <p>The order of the docstring styles to try.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutoStyleOptions.default","title":"default  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default: str | None = None\n</code></pre> <p>The default docstring style to use if no other style is detected.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutoStyleOptions.method","title":"method  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>method: Literal['heuristics', 'max_sections'] = 'heuristics'\n</code></pre> <p>The method to use to determine the docstring style.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutoStyleOptions.per_style_options","title":"per_style_options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>per_style_options: PerStyleOptions = field(default_factory=PerStyleOptions)\n</code></pre> <p>Per-style options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutoStyleOptions.style_order","title":"style_order  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style_order: list[str] = field(default_factory=lambda: ['sphinx', 'google', 'numpy'])\n</code></pre> <p>The order of the docstring styles to try.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutoStyleOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook","title":"AutorefsHook","text":"<pre><code>AutorefsHook(current_object: Object | Alias, config: dict[str, Any])\n</code></pre> <pre><code>\n              flowchart TD\n              mkdocstrings_handlers.python.AutorefsHook[AutorefsHook]\n\n              \n\n              click mkdocstrings_handlers.python.AutorefsHook href \"\" \"mkdocstrings_handlers.python.AutorefsHook\"\n            </code></pre> <p>Autorefs hook.</p> <p>With this hook, we're able to add context to autorefs (cross-references), such as originating file path and line number, to improve error reporting.</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>expand_identifier</code>             \u2013              <p>Expand an identifier.</p> </li> <li> <code>get_context</code>             \u2013              <p>Get the context for the current object.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>config</code>           \u2013            <p>The configuration options.</p> </li> <li> <code>current_object</code>           \u2013            <p>The current object being rendered.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook(current_object)","title":"<code>current_object</code>","text":"(<code>Object | Alias</code>)           \u2013            <p>The object being rendered.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook(config)","title":"<code>config</code>","text":"(<code>dict[str, Any]</code>)           \u2013            <p>The configuration dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre> <p>The configuration options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook.current_object","title":"current_object  <code>instance-attribute</code>","text":"<pre><code>current_object = current_object\n</code></pre> <p>The current object being rendered.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook.expand_identifier","title":"expand_identifier","text":"<pre><code>expand_identifier(identifier: str) -&gt; str\n</code></pre> <p>Expand an identifier.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The expanded identifier.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook.expand_identifier(identifier)","title":"<code>identifier</code>","text":"(<code>str</code>)           \u2013            <p>The identifier to expand.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.AutorefsHook.get_context","title":"get_context","text":"<pre><code>get_context() -&gt; Context\n</code></pre> <p>Get the context for the current object.</p> <p>Returns:</p> <ul> <li> <code>Context</code>           \u2013            <p>The context.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions","title":"GoogleStyleOptions  <code>dataclass</code>","text":"<pre><code>GoogleStyleOptions(\n    ignore_init_summary: bool = False,\n    returns_multiple_items: bool = True,\n    returns_named_value: bool = True,\n    returns_type_in_property_summary: bool = False,\n    receives_multiple_items: bool = True,\n    receives_named_value: bool = True,\n    trim_doctest_flags: bool = True,\n    warn_unknown_params: bool = True,\n)\n</code></pre> <p>Google style docstring options.</p> <p>Attributes:</p> <ul> <li> <code>ignore_init_summary</code>               (<code>bool</code>)           \u2013            <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p> </li> <li> <code>receives_multiple_items</code>               (<code>bool</code>)           \u2013            <p>Whether to parse multiple items in <code>Receives</code> sections.</p> </li> <li> <code>receives_named_value</code>               (<code>bool</code>)           \u2013            <p>Whether to parse <code>Receives</code> section items as name and description, rather than type and description.</p> </li> <li> <code>returns_multiple_items</code>               (<code>bool</code>)           \u2013            <p>Whether to parse multiple items in <code>Yields</code> and <code>Returns</code> sections.</p> </li> <li> <code>returns_named_value</code>               (<code>bool</code>)           \u2013            <p>Whether to parse <code>Yields</code> and <code>Returns</code> section items as name and description, rather than type and description.</p> </li> <li> <code>returns_type_in_property_summary</code>               (<code>bool</code>)           \u2013            <p>Whether to parse the return type of properties at the beginning of their summary: <code>str: Summary of the property</code>.</p> </li> <li> <code>trim_doctest_flags</code>               (<code>bool</code>)           \u2013            <p>Whether to remove doctest flags from Python example blocks.</p> </li> <li> <code>warn_unknown_params</code>               (<code>bool</code>)           \u2013            <p>Warn about documented parameters not appearing in the signature.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.ignore_init_summary","title":"ignore_init_summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ignore_init_summary: bool = False\n</code></pre> <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.receives_multiple_items","title":"receives_multiple_items  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>receives_multiple_items: bool = True\n</code></pre> <p>Whether to parse multiple items in <code>Receives</code> sections.</p> <p>When true, each item's continuation lines must be indented. When false (single item), no further indentation is required.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.receives_named_value","title":"receives_named_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>receives_named_value: bool = True\n</code></pre> <p>Whether to parse <code>Receives</code> section items as name and description, rather than type and description.</p> <p>When true, type must be wrapped in parentheses: <code>(int): Description.</code>. Names are optional: <code>name (int): Description.</code>. When false, parentheses are optional but the items cannot be named: <code>int: Description</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.returns_multiple_items","title":"returns_multiple_items  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>returns_multiple_items: bool = True\n</code></pre> <p>Whether to parse multiple items in <code>Yields</code> and <code>Returns</code> sections.</p> <p>When true, each item's continuation lines must be indented. When false (single item), no further indentation is required.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.returns_named_value","title":"returns_named_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>returns_named_value: bool = True\n</code></pre> <p>Whether to parse <code>Yields</code> and <code>Returns</code> section items as name and description, rather than type and description.</p> <p>When true, type must be wrapped in parentheses: <code>(int): Description.</code>. Names are optional: <code>name (int): Description.</code>. When false, parentheses are optional but the items cannot be named: <code>int: Description</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.returns_type_in_property_summary","title":"returns_type_in_property_summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>returns_type_in_property_summary: bool = False\n</code></pre> <p>Whether to parse the return type of properties at the beginning of their summary: <code>str: Summary of the property</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.trim_doctest_flags","title":"trim_doctest_flags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trim_doctest_flags: bool = True\n</code></pre> <p>Whether to remove doctest flags from Python example blocks.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.GoogleStyleOptions.warn_unknown_params","title":"warn_unknown_params  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>warn_unknown_params: bool = True\n</code></pre> <p>Warn about documented parameters not appearing in the signature.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.Inventory","title":"Inventory  <code>dataclass</code>","text":"<pre><code>Inventory(url: str, base: str | None = None, domains: list[str] = lambda: ['py']())\n</code></pre> <p>An inventory.</p> <p>Attributes:</p> <ul> <li> <code>base</code>               (<code>str | None</code>)           \u2013            <p>The base URL of the inventory.</p> </li> <li> <code>domains</code>               (<code>list[str]</code>)           \u2013            <p>The domains to load from the inventory.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>The URL of the inventory.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.Inventory.base","title":"base  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base: str | None = None\n</code></pre> <p>The base URL of the inventory.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.Inventory.domains","title":"domains  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>domains: list[str] = field(default_factory=lambda: ['py'])\n</code></pre> <p>The domains to load from the inventory.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.Inventory.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre> <p>The URL of the inventory.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.NumpyStyleOptions","title":"NumpyStyleOptions  <code>dataclass</code>","text":"<pre><code>NumpyStyleOptions(\n    ignore_init_summary: bool = False,\n    trim_doctest_flags: bool = True,\n    warn_unknown_params: bool = True,\n)\n</code></pre> <p>Numpy style docstring options.</p> <p>Attributes:</p> <ul> <li> <code>ignore_init_summary</code>               (<code>bool</code>)           \u2013            <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p> </li> <li> <code>trim_doctest_flags</code>               (<code>bool</code>)           \u2013            <p>Whether to remove doctest flags from Python example blocks.</p> </li> <li> <code>warn_unknown_params</code>               (<code>bool</code>)           \u2013            <p>Warn about documented parameters not appearing in the signature.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.NumpyStyleOptions.ignore_init_summary","title":"ignore_init_summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ignore_init_summary: bool = False\n</code></pre> <p>Whether to ignore the summary in <code>__init__</code> methods' docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.NumpyStyleOptions.trim_doctest_flags","title":"trim_doctest_flags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trim_doctest_flags: bool = True\n</code></pre> <p>Whether to remove doctest flags from Python example blocks.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.NumpyStyleOptions.warn_unknown_params","title":"warn_unknown_params  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>warn_unknown_params: bool = True\n</code></pre> <p>Warn about documented parameters not appearing in the signature.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PerStyleOptions","title":"PerStyleOptions  <code>dataclass</code>","text":"<pre><code>PerStyleOptions(\n    google: GoogleStyleOptions = GoogleStyleOptions(),\n    numpy: NumpyStyleOptions = NumpyStyleOptions(),\n    sphinx: SphinxStyleOptions = SphinxStyleOptions(),\n)\n</code></pre> <p>Per style options.</p> <p>Methods:</p> <ul> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>google</code>               (<code>GoogleStyleOptions</code>)           \u2013            <p>Google-style options.</p> </li> <li> <code>numpy</code>               (<code>NumpyStyleOptions</code>)           \u2013            <p>Numpydoc-style options.</p> </li> <li> <code>sphinx</code>               (<code>SphinxStyleOptions</code>)           \u2013            <p>Sphinx-style options.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PerStyleOptions.google","title":"google  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>google: GoogleStyleOptions = field(default_factory=GoogleStyleOptions)\n</code></pre> <p>Google-style options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PerStyleOptions.numpy","title":"numpy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>numpy: NumpyStyleOptions = field(default_factory=NumpyStyleOptions)\n</code></pre> <p>Numpydoc-style options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PerStyleOptions.sphinx","title":"sphinx  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sphinx: SphinxStyleOptions = field(default_factory=SphinxStyleOptions)\n</code></pre> <p>Sphinx-style options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PerStyleOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig","title":"PythonConfig  <code>dataclass</code>","text":"<pre><code>PythonConfig(\n    inventories: list[Inventory] = list(),\n    paths: list[str] = lambda: [\".\"](),\n    load_external_modules: bool | None = None,\n    options: dict[str, Any] = dict(),\n    locale: str | None = None,\n)\n</code></pre> <pre><code>\n              flowchart TD\n              mkdocstrings_handlers.python.PythonConfig[PythonConfig]\n              mkdocstrings_handlers.python._internal.config.PythonInputConfig[PythonInputConfig]\n\n                              mkdocstrings_handlers.python._internal.config.PythonInputConfig --&gt; mkdocstrings_handlers.python.PythonConfig\n                \n\n\n              click mkdocstrings_handlers.python.PythonConfig href \"\" \"mkdocstrings_handlers.python.PythonConfig\"\n              click mkdocstrings_handlers.python._internal.config.PythonInputConfig href \"\" \"mkdocstrings_handlers.python._internal.config.PythonInputConfig\"\n            </code></pre> <p>Python handler configuration.</p> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonHandler </li> </ul> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>inventories</code>               (<code>list[Inventory]</code>)           \u2013            <p>The object inventories to load.</p> </li> <li> <code>load_external_modules</code>               (<code>bool | None</code>)           \u2013            <p>Whether to always load external modules/packages.</p> </li> <li> <code>locale</code>               (<code>str | None</code>)           \u2013            <p>The locale to use when translating template strings.</p> </li> <li> <code>options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>Configuration options for collecting and rendering objects.</p> </li> <li> <code>paths</code>               (<code>list[str]</code>)           \u2013            <p>The paths in which to search for Python packages.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig.inventories","title":"inventories  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inventories: list[Inventory] = field(default_factory=list)\n</code></pre> <p>The object inventories to load.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig.load_external_modules","title":"load_external_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>load_external_modules: bool | None = None\n</code></pre> <p>Whether to always load external modules/packages.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig.locale","title":"locale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>locale: str | None = None\n</code></pre> <p>The locale to use when translating template strings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: dict[str, Any] = field(default_factory=dict)\n</code></pre> <p>Configuration options for collecting and rendering objects.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig.paths","title":"paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paths: list[str] = field(default_factory=lambda: ['.'])\n</code></pre> <p>The paths in which to search for Python packages.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonConfig.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler","title":"PythonHandler","text":"<pre><code>PythonHandler(config: PythonConfig, base_dir: Path, **kwargs: Any)\n</code></pre> <pre><code>\n              flowchart TD\n              mkdocstrings_handlers.python.PythonHandler[PythonHandler]\n              mkdocstrings._internal.handlers.base.BaseHandler[BaseHandler]\n\n                              mkdocstrings._internal.handlers.base.BaseHandler --&gt; mkdocstrings_handlers.python.PythonHandler\n                \n\n\n              click mkdocstrings_handlers.python.PythonHandler href \"\" \"mkdocstrings_handlers.python.PythonHandler\"\n              click mkdocstrings._internal.handlers.base.BaseHandler href \"\" \"mkdocstrings._internal.handlers.base.BaseHandler\"\n            </code></pre> <p>The Python handler class.</p> <p>Parameters:</p> Returned by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0get_handler </li> </ul> <p>Methods:</p> <ul> <li> <code>collect</code>             \u2013              <p>Collect the documentation for the given identifier.</p> </li> <li> <code>do_convert_markdown</code>             \u2013              <p>Render Markdown text; for use inside templates.</p> </li> <li> <code>do_heading</code>             \u2013              <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> </li> <li> <code>get_aliases</code>             \u2013              <p>Get the aliases for the given identifier.</p> </li> <li> <code>get_extended_templates_dirs</code>             \u2013              <p>Load template extensions for the given handler, return their templates directories.</p> </li> <li> <code>get_headings</code>             \u2013              <p>Return and clear the headings gathered so far.</p> </li> <li> <code>get_inventory_urls</code>             \u2013              <p>Return the URLs of the inventory files to download.</p> </li> <li> <code>get_options</code>             \u2013              <p>Get combined default, global and local options.</p> </li> <li> <code>get_templates_dir</code>             \u2013              <p>Return the path to the handler's templates directory.</p> </li> <li> <code>load_inventory</code>             \u2013              <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> </li> <li> <code>normalize_extension_paths</code>             \u2013              <p>Resolve extension paths relative to config file.</p> </li> <li> <code>render</code>             \u2013              <p>Render the collected data.</p> </li> <li> <code>render_backlinks</code>             \u2013              <p>Render the backlinks.</p> </li> <li> <code>teardown</code>             \u2013              <p>Teardown the handler.</p> </li> <li> <code>update_env</code>             \u2013              <p>Update the Jinja environment with custom filters and tests.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>base_dir</code>           \u2013            <p>The base directory of the project.</p> </li> <li> <code>config</code>           \u2013            <p>The handler configuration.</p> </li> <li> <code>custom_templates</code>           \u2013            <p>The path to custom templates.</p> </li> <li> <code>domain</code>               (<code>str</code>)           \u2013            <p>The cross-documentation domain/language for this handler.</p> </li> <li> <code>enable_inventory</code>               (<code>bool</code>)           \u2013            <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p> </li> <li> <code>env</code>           \u2013            <p>The Jinja environment.</p> </li> <li> <code>extra_css</code>               (<code>str</code>)           \u2013            <p>Extra CSS.</p> </li> <li> <code>fallback_config</code>               (<code>dict</code>)           \u2013            <p>Fallback configuration when searching anchors for identifiers.</p> </li> <li> <code>fallback_theme</code>               (<code>str</code>)           \u2013            <p>The fallback theme.</p> </li> <li> <code>global_options</code>           \u2013            <p>The global configuration options (in <code>mkdocs.yml</code>).</p> </li> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>The Markdown instance.</p> </li> <li> <code>mdx</code>           \u2013            <p>The Markdown extensions to use.</p> </li> <li> <code>mdx_config</code>           \u2013            <p>The configuration for the Markdown extensions.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The handler's name.</p> </li> <li> <code>outer_layer</code>               (<code>bool</code>)           \u2013            <p>Whether we're in the outer Markdown conversion layer.</p> </li> <li> <code>theme</code>           \u2013            <p>The selected theme.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler(config)","title":"<code>config</code>","text":"(<code>PythonConfig</code>)           \u2013            <p>The handler configuration.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler(base_dir)","title":"<code>base_dir</code>","text":"(<code>Path</code>)           \u2013            <p>The base directory of the project.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Arguments passed to the parent constructor.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.base_dir","title":"base_dir  <code>instance-attribute</code>","text":"<pre><code>base_dir = base_dir\n</code></pre> <p>The base directory of the project.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre> <p>The handler configuration.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.custom_templates","title":"custom_templates  <code>instance-attribute</code>","text":"<pre><code>custom_templates = custom_templates\n</code></pre> <p>The path to custom templates.</p> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonHandler <code></code>\u00a0custom_templates </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.domain","title":"domain  <code>class-attribute</code>","text":"<pre><code>domain: str = 'py'\n</code></pre> <p>The cross-documentation domain/language for this handler.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.enable_inventory","title":"enable_inventory  <code>class-attribute</code>","text":"<pre><code>enable_inventory: bool = True\n</code></pre> <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = Environment(autoescape=True, loader=FileSystemLoader(paths), auto_reload=False)\n</code></pre> <p>The Jinja environment.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.extra_css","title":"extra_css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra_css: str = ''\n</code></pre> <p>Extra CSS.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.fallback_config","title":"fallback_config  <code>class-attribute</code>","text":"<pre><code>fallback_config: dict = {}\n</code></pre> <p>Fallback configuration when searching anchors for identifiers.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.fallback_theme","title":"fallback_theme  <code>class-attribute</code>","text":"<pre><code>fallback_theme: str = 'material'\n</code></pre> <p>The fallback theme.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.global_options","title":"global_options  <code>instance-attribute</code>","text":"<pre><code>global_options = global_options\n</code></pre> <p>The global configuration options (in <code>mkdocs.yml</code>).</p> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonHandler <code></code>\u00a0global_options </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.md","title":"md  <code>property</code>","text":"<pre><code>md: Markdown\n</code></pre> <p>The Markdown instance.</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>When the Markdown instance is not set yet.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.mdx","title":"mdx  <code>instance-attribute</code>","text":"<pre><code>mdx = mdx\n</code></pre> <p>The Markdown extensions to use.</p> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonHandler <code></code>\u00a0mdx </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.mdx_config","title":"mdx_config  <code>instance-attribute</code>","text":"<pre><code>mdx_config = mdx_config\n</code></pre> <p>The configuration for the Markdown extensions.</p> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonHandler <code></code>\u00a0mdx_config </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name: str = 'python'\n</code></pre> <p>The handler's name.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.outer_layer","title":"outer_layer  <code>property</code>","text":"<pre><code>outer_layer: bool\n</code></pre> <p>Whether we're in the outer Markdown conversion layer.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.theme","title":"theme  <code>instance-attribute</code>","text":"<pre><code>theme = theme\n</code></pre> <p>The selected theme.</p> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonHandler <code></code>\u00a0theme </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.collect","title":"collect","text":"<pre><code>collect(identifier: str, options: PythonOptions) -&gt; CollectorItem\n</code></pre> <p>Collect the documentation for the given identifier.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>CollectorItem</code>           \u2013            <p>The collected item.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.collect(identifier)","title":"<code>identifier</code>","text":"(<code>str</code>)           \u2013            <p>The identifier of the object to collect.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.collect(options)","title":"<code>options</code>","text":"(<code>PythonOptions</code>)           \u2013            <p>The options to use for the collection.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_convert_markdown","title":"do_convert_markdown","text":"<pre><code>do_convert_markdown(\n    text: str,\n    heading_level: int,\n    html_id: str = \"\",\n    *,\n    strip_paragraph: bool = False,\n    autoref_hook: AutorefsHookInterface | None = None\n) -&gt; Markup\n</code></pre> <p>Render Markdown text; for use inside templates.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_convert_markdown(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The text to convert.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_convert_markdown(heading_level)","title":"<code>heading_level</code>","text":"(<code>int</code>)           \u2013            <p>The base heading level to start all Markdown headings from.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_convert_markdown(html_id)","title":"<code>html_id</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The HTML id of the element that's considered the parent of this element.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_convert_markdown(strip_paragraph)","title":"<code>strip_paragraph</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to exclude the <code>&lt;p&gt;</code> tag from around the whole output.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_heading","title":"do_heading","text":"<pre><code>do_heading(\n    content: Markup,\n    heading_level: int,\n    *,\n    role: str | None = None,\n    hidden: bool = False,\n    toc_label: str | None = None,\n    **attributes: str\n) -&gt; Markup\n</code></pre> <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_heading(content)","title":"<code>content</code>","text":"(<code>Markup</code>)           \u2013            <p>The HTML within the heading.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_heading(heading_level)","title":"<code>heading_level</code>","text":"(<code>int</code>)           \u2013            <p>The level of heading (e.g. 3 -&gt; <code>h3</code>).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_heading(role)","title":"<code>role</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional role for the object bound to this heading.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_heading(hidden)","title":"<code>hidden</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, only register it for the table of contents, don't render anything.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_heading(toc_label)","title":"<code>toc_label</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The title to use in the table of contents ('data-toc-label' attribute).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.do_heading(**attributes)","title":"<code>**attributes</code>","text":"(<code>str</code>, default:                   <code>{}</code> )           \u2013            <p>Any extra HTML attributes of the heading.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_aliases","title":"get_aliases","text":"<pre><code>get_aliases(identifier: str) -&gt; tuple[str, ...]\n</code></pre> <p>Get the aliases for the given identifier.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>The aliases.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_aliases(identifier)","title":"<code>identifier</code>","text":"(<code>str</code>)           \u2013            <p>The identifier to get the aliases for.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_extended_templates_dirs","title":"get_extended_templates_dirs","text":"<pre><code>get_extended_templates_dirs(handler: str) -&gt; list[Path]\n</code></pre> <p>Load template extensions for the given handler, return their templates directories.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Path]</code>           \u2013            <p>The extensions templates directories.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_extended_templates_dirs(handler)","title":"<code>handler</code>","text":"(<code>str</code>)           \u2013            <p>The name of the handler to get the extended templates directory of.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_headings","title":"get_headings","text":"<pre><code>get_headings() -&gt; Sequence[Element]\n</code></pre> <p>Return and clear the headings gathered so far.</p> <p>Returns:</p> <ul> <li> <code>Sequence[Element]</code>           \u2013            <p>A list of HTML elements.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_inventory_urls","title":"get_inventory_urls","text":"<pre><code>get_inventory_urls() -&gt; list[tuple[str, dict[str, Any]]]\n</code></pre> <p>Return the URLs of the inventory files to download.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_options","title":"get_options","text":"<pre><code>get_options(local_options: Mapping[str, Any]) -&gt; HandlerOptions\n</code></pre> <p>Get combined default, global and local options.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>HandlerOptions</code>           \u2013            <p>The combined options.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_options(local_options)","title":"<code>local_options</code>","text":"(<code>Mapping[str, Any]</code>)           \u2013            <p>The local options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_templates_dir","title":"get_templates_dir","text":"<pre><code>get_templates_dir(handler: str | None = None) -&gt; Path\n</code></pre> <p>Return the path to the handler's templates directory.</p> <p>Override to customize how the templates directory is found.</p> <p>Parameters:</p> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When no such handler is installed.</p> </li> <li> <code>FileNotFoundError</code>             \u2013            <p>When the templates directory cannot be found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The templates directory path.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.get_templates_dir(handler)","title":"<code>handler</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The name of the handler to get the templates directory of.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.load_inventory","title":"load_inventory  <code>staticmethod</code>","text":"<pre><code>load_inventory(\n    in_file: BinaryIO,\n    url: str,\n    base_url: str | None = None,\n    domains: list[str] | None = None,\n    **kwargs: Any\n) -&gt; Iterator[tuple[str, str]]\n</code></pre> <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> <p>This implements mkdocstrings' <code>load_inventory</code> \"protocol\" (see <code>mkdocstrings.plugin</code>).</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>tuple[str, str]</code>           \u2013            <p>Tuples of (item identifier, item URL).</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.load_inventory(in_file)","title":"<code>in_file</code>","text":"(<code>BinaryIO</code>)           \u2013            <p>The binary file-like object to read the inventory from.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.load_inventory(url)","title":"<code>url</code>","text":"(<code>str</code>)           \u2013            <p>The URL that this file is being streamed from (used to guess <code>base_url</code>).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.load_inventory(base_url)","title":"<code>base_url</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The URL that this inventory's sub-paths are relative to.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.load_inventory(domains)","title":"<code>domains</code>","text":"(<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of domain strings to filter the inventory by, when not passed, \"py\" will be used.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.load_inventory(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Ignore additional arguments passed from the config.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.normalize_extension_paths","title":"normalize_extension_paths","text":"<pre><code>normalize_extension_paths(extensions: Sequence) -&gt; Sequence\n</code></pre> <p>Resolve extension paths relative to config file.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Sequence</code>           \u2013            <p>The normalized extensions.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.normalize_extension_paths(extensions)","title":"<code>extensions</code>","text":"(<code>Sequence</code>)           \u2013            <p>The extensions (configuration) to normalize.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.render","title":"render","text":"<pre><code>render(data: CollectorItem, options: PythonOptions) -&gt; str\n</code></pre> <p>Render the collected data.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The rendered data (HTML).</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.render(data)","title":"<code>data</code>","text":"(<code>CollectorItem</code>)           \u2013            <p>The collected data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.render(options)","title":"<code>options</code>","text":"(<code>PythonOptions</code>)           \u2013            <p>The options to use for rendering.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.render_backlinks","title":"render_backlinks","text":"<pre><code>render_backlinks(backlinks: Mapping[str, Iterable[Backlink]]) -&gt; str\n</code></pre> <p>Render the backlinks.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The rendered backlinks (HTML).</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.render_backlinks(backlinks)","title":"<code>backlinks</code>","text":"(<code>Mapping[str, Iterable[Backlink]]</code>)           \u2013            <p>The backlinks to render.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.teardown","title":"teardown","text":"<pre><code>teardown() -&gt; None\n</code></pre> <p>Teardown the handler.</p> <p>This method should be implemented to, for example, terminate a subprocess that was started when creating the handler instance.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.update_env","title":"update_env","text":"<pre><code>update_env(config: Any) -&gt; None\n</code></pre> <p>Update the Jinja environment with custom filters and tests.</p> <p>Parameters:</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonHandler.update_env(config)","title":"<code>config</code>","text":"(<code>Any</code>)           \u2013            <p>The SSG configuration.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig","title":"PythonInputConfig  <code>dataclass</code>","text":"<pre><code>PythonInputConfig(\n    inventories: list[str | Inventory] = list(),\n    paths: list[str] = lambda: [\".\"](),\n    load_external_modules: bool | None = None,\n    options: PythonInputOptions = PythonInputOptions(),\n    locale: str | None = None,\n)\n</code></pre> <p>Python handler configuration.</p> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>inventories</code>               (<code>list[str | Inventory]</code>)           \u2013            <p>The inventories to load.</p> </li> <li> <code>load_external_modules</code>               (<code>bool | None</code>)           \u2013            <p>Whether to always load external modules/packages.</p> </li> <li> <code>locale</code>               (<code>str | None</code>)           \u2013            <p>The locale to use when translating template strings.</p> </li> <li> <code>options</code>               (<code>PythonInputOptions</code>)           \u2013            <p>Configuration options for collecting and rendering objects.</p> </li> <li> <code>paths</code>               (<code>list[str]</code>)           \u2013            <p>The paths in which to search for Python packages.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig.inventories","title":"inventories  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inventories: list[str | Inventory] = field(default_factory=list)\n</code></pre> <p>The inventories to load.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig.load_external_modules","title":"load_external_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>load_external_modules: bool | None = None\n</code></pre> <p>Whether to always load external modules/packages.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig.locale","title":"locale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>locale: str | None = None\n</code></pre> <p>The locale to use when translating template strings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: PythonInputOptions = field(default_factory=PythonInputOptions)\n</code></pre> <p>Configuration options for collecting and rendering objects.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig.paths","title":"paths  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>paths: list[str] = field(default_factory=lambda: ['.'])\n</code></pre> <p>The paths in which to search for Python packages.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputConfig.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions","title":"PythonInputOptions  <code>dataclass</code>","text":"<pre><code>PythonInputOptions(\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    annotations_path: Literal[\"brief\", \"source\", \"full\"] = \"brief\",\n    backlinks: Literal[\"flat\", \"tree\", False] = False,\n    docstring_options: (\n        GoogleStyleOptions\n        | NumpyStyleOptions\n        | SphinxStyleOptions\n        | AutoStyleOptions\n        | None\n    ) = None,\n    docstring_section_style: Literal[\"table\", \"list\", \"spacy\"] = \"table\",\n    docstring_style: Literal[\"auto\", \"google\", \"numpy\", \"sphinx\"] | None = \"google\",\n    extensions: list[str | dict[str, Any]] = list(),\n    filters: list[str] | Literal[\"public\"] = lambda: copy()(),\n    find_stubs_package: bool = False,\n    group_by_category: bool = True,\n    heading: str = \"\",\n    heading_level: int = 2,\n    inherited_members: bool | list[str] = False,\n    line_length: int = 60,\n    members: list[str] | bool | None = None,\n    members_order: Order | list[Order] = \"alphabetical\",\n    merge_init_into_class: bool = False,\n    modernize_annotations: bool = False,\n    parameter_headings: bool = False,\n    preload_modules: list[str] = list(),\n    relative_crossrefs: bool = False,\n    scoped_crossrefs: bool = False,\n    show_overloads: bool = True,\n    separate_signature: bool = False,\n    show_bases: bool = True,\n    show_category_heading: bool = False,\n    show_docstring_attributes: bool = True,\n    show_docstring_classes: bool = True,\n    show_docstring_description: bool = True,\n    show_docstring_examples: bool = True,\n    show_docstring_functions: bool = True,\n    show_docstring_modules: bool = True,\n    show_docstring_other_parameters: bool = True,\n    show_docstring_parameters: bool = True,\n    show_docstring_raises: bool = True,\n    show_docstring_receives: bool = True,\n    show_docstring_returns: bool = True,\n    show_docstring_warns: bool = True,\n    show_docstring_yields: bool = True,\n    show_if_no_docstring: bool = False,\n    show_inheritance_diagram: bool = False,\n    show_labels: bool = True,\n    show_object_full_path: bool = False,\n    show_root_full_path: bool = True,\n    show_root_heading: bool = False,\n    show_root_members_full_path: bool = False,\n    show_root_toc_entry: bool = True,\n    show_signature_annotations: bool = False,\n    show_signature: bool = True,\n    show_source: bool = True,\n    show_submodules: bool = False,\n    show_symbol_type_heading: bool = False,\n    show_symbol_type_toc: bool = False,\n    signature_crossrefs: bool = False,\n    summary: bool | SummaryOption = SummaryOption(),\n    toc_label: str = \"\",\n    unwrap_annotated: bool = False,\n    extra: dict[str, Any] = dict(),\n)\n</code></pre> <p>Accepted input options.</p> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>allow_inspection</code>               (<code>bool</code>)           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> <li> <code>annotations_path</code>               (<code>Literal['brief', 'source', 'full']</code>)           \u2013            <p>The verbosity for annotations path: <code>brief</code> (recommended), <code>source</code> (as written in the source), or <code>full</code>.</p> </li> <li> <code>backlinks</code>               (<code>Literal['flat', 'tree', False]</code>)           \u2013            <p>Whether to render backlinks, and how.</p> </li> <li> <code>docstring_options</code>               (<code>GoogleStyleOptions | NumpyStyleOptions | SphinxStyleOptions | AutoStyleOptions | None</code>)           \u2013            <p>The options for the docstring parser.</p> </li> <li> <code>docstring_section_style</code>               (<code>Literal['table', 'list', 'spacy']</code>)           \u2013            <p>The style used to render docstring sections.</p> </li> <li> <code>docstring_style</code>               (<code>Literal['auto', 'google', 'numpy', 'sphinx'] | None</code>)           \u2013            <p>The docstring style to use: <code>auto</code>, <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>.</p> </li> <li> <code>extensions</code>               (<code>list[str | dict[str, Any]]</code>)           \u2013            <p>A list of Griffe extensions to load.</p> </li> <li> <code>extra</code>               (<code>dict[str, Any]</code>)           \u2013            <p>Extra options.</p> </li> <li> <code>filters</code>               (<code>list[str] | Literal['public']</code>)           \u2013            <p>A list of filters, or <code>\"public\"</code>.</p> </li> <li> <code>find_stubs_package</code>               (<code>bool</code>)           \u2013            <p>Whether to load stubs package (package-stubs) when extracting docstrings.</p> </li> <li> <code>force_inspection</code>               (<code>bool</code>)           \u2013            <p>Whether to force using dynamic analysis when loading data.</p> </li> <li> <code>group_by_category</code>               (<code>bool</code>)           \u2013            <p>Group the object's children by categories: attributes, classes, functions, and modules.</p> </li> <li> <code>heading</code>               (<code>str</code>)           \u2013            <p>A custom string to override the autogenerated heading of the root object.</p> </li> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The initial heading level to use.</p> </li> <li> <code>inherited_members</code>               (<code>bool | list[str]</code>)           \u2013            <p>A boolean, or an explicit list of inherited members to render.</p> </li> <li> <code>line_length</code>               (<code>int</code>)           \u2013            <p>Maximum line length when formatting code/signatures.</p> </li> <li> <code>members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of members to render.</p> </li> <li> <code>members_order</code>               (<code>Order | list[Order]</code>)           \u2013            <p>The members ordering to use.</p> </li> <li> <code>merge_init_into_class</code>               (<code>bool</code>)           \u2013            <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p> </li> <li> <code>modernize_annotations</code>               (<code>bool</code>)           \u2013            <p>Whether to modernize annotations, for example <code>Optional[str]</code> into <code>str | None</code>.</p> </li> <li> <code>parameter_headings</code>               (<code>bool</code>)           \u2013            <p>Whether to render headings for parameters (therefore showing parameters in the ToC).</p> </li> <li> <code>preload_modules</code>               (<code>list[str]</code>)           \u2013            <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>).</p> </li> <li> <code>relative_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to enable the relative crossref syntax.</p> </li> <li> <code>scoped_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to enable the scoped crossref ability.</p> </li> <li> <code>separate_signature</code>               (<code>bool</code>)           \u2013            <p>Whether to put the whole signature in a code block below the heading.</p> </li> <li> <code>show_bases</code>               (<code>bool</code>)           \u2013            <p>Show the base classes of a class.</p> </li> <li> <code>show_category_heading</code>               (<code>bool</code>)           \u2013            <p>When grouped by categories, show a heading for each category.</p> </li> <li> <code>show_docstring_attributes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Attributes' section in the object's docstring.</p> </li> <li> <code>show_docstring_classes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Classes' section in the object's docstring.</p> </li> <li> <code>show_docstring_description</code>               (<code>bool</code>)           \u2013            <p>Whether to display the textual block (including admonitions) in the object's docstring.</p> </li> <li> <code>show_docstring_examples</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Examples' section in the object's docstring.</p> </li> <li> <code>show_docstring_functions</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Functions' or 'Methods' sections in the object's docstring.</p> </li> <li> <code>show_docstring_modules</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Modules' section in the object's docstring.</p> </li> <li> <code>show_docstring_other_parameters</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Other Parameters' section in the object's docstring.</p> </li> <li> <code>show_docstring_parameters</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Parameters' section in the object's docstring.</p> </li> <li> <code>show_docstring_raises</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Raises' section in the object's docstring.</p> </li> <li> <code>show_docstring_receives</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Receives' section in the object's docstring.</p> </li> <li> <code>show_docstring_returns</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Returns' section in the object's docstring.</p> </li> <li> <code>show_docstring_warns</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Warns' section in the object's docstring.</p> </li> <li> <code>show_docstring_yields</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Yields' section in the object's docstring.</p> </li> <li> <code>show_if_no_docstring</code>               (<code>bool</code>)           \u2013            <p>Show the object heading even if it has no docstring or children with docstrings.</p> </li> <li> <code>show_inheritance_diagram</code>               (<code>bool</code>)           \u2013            <p>Show the inheritance diagram of a class using Mermaid.</p> </li> <li> <code>show_labels</code>               (<code>bool</code>)           \u2013            <p>Whether to show labels of the members.</p> </li> <li> <code>show_object_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path of every object.</p> </li> <li> <code>show_overloads</code>               (<code>bool</code>)           \u2013            <p>Show the overloads of a function or method.</p> </li> <li> <code>show_root_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path for the root object heading.</p> </li> <li> <code>show_root_heading</code>               (<code>bool</code>)           \u2013            <p>Show the heading of the object at the root of the documentation tree.</p> </li> <li> <code>show_root_members_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path of the root members.</p> </li> <li> <code>show_root_toc_entry</code>               (<code>bool</code>)           \u2013            <p>If the root heading is not shown, at least add a ToC entry for it.</p> </li> <li> <code>show_signature</code>               (<code>bool</code>)           \u2013            <p>Show methods and functions signatures.</p> </li> <li> <code>show_signature_annotations</code>               (<code>bool</code>)           \u2013            <p>Show the type annotations in methods and functions signatures.</p> </li> <li> <code>show_source</code>               (<code>bool</code>)           \u2013            <p>Show the source code of this object.</p> </li> <li> <code>show_submodules</code>               (<code>bool</code>)           \u2013            <p>When rendering a module, show its submodules recursively.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p> </li> <li> <code>signature_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to render cross-references for type annotations in signatures.</p> </li> <li> <code>summary</code>               (<code>bool | SummaryOption</code>)           \u2013            <p>Whether to render summaries of modules, classes, functions (methods) and attributes.</p> </li> <li> <code>toc_label</code>               (<code>str</code>)           \u2013            <p>A custom string to override the autogenerated toc label of the root object.</p> </li> <li> <code>unwrap_annotated</code>               (<code>bool</code>)           \u2013            <p>Whether to unwrap <code>Annotated</code> types to show only the type without the annotations.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.allow_inspection","title":"allow_inspection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allow_inspection: bool = True\n</code></pre> <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.annotations_path","title":"annotations_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>annotations_path: Literal['brief', 'source', 'full'] = 'brief'\n</code></pre> <p>The verbosity for annotations path: <code>brief</code> (recommended), <code>source</code> (as written in the source), or <code>full</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.backlinks","title":"backlinks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlinks: Literal['flat', 'tree', False] = False\n</code></pre> <p>Whether to render backlinks, and how.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.docstring_options","title":"docstring_options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>docstring_options: (\n    GoogleStyleOptions\n    | NumpyStyleOptions\n    | SphinxStyleOptions\n    | AutoStyleOptions\n    | None\n) = None\n</code></pre> <p>The options for the docstring parser.</p> <p>See docstring parsers and their options in Griffe docs.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.docstring_section_style","title":"docstring_section_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>docstring_section_style: Literal['table', 'list', 'spacy'] = 'table'\n</code></pre> <p>The style used to render docstring sections.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.docstring_style","title":"docstring_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>docstring_style: Literal['auto', 'google', 'numpy', 'sphinx'] | None = 'google'\n</code></pre> <p>The docstring style to use: <code>auto</code>, <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.extensions","title":"extensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extensions: list[str | dict[str, Any]] = field(default_factory=list)\n</code></pre> <p>A list of Griffe extensions to load.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, Any] = field(default_factory=dict)\n</code></pre> <p>Extra options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.filters","title":"filters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filters: list[str] | Literal['public'] = field(default_factory=lambda: copy())\n</code></pre> <p>A list of filters, or <code>\"public\"</code>.</p> <p>List of filters</p> <p>A filter starting with <code>!</code> will exclude matching objects instead of including them. The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively to lower members in the hierarchy).</p> <p>Filtering methods</p> <p> Sponsors only \u2014  Insiders 1.11.0</p> <p>The <code>public</code> method will include only public objects: those added to <code>__all__</code> or not starting with an underscore (except for special methods/attributes).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.find_stubs_package","title":"find_stubs_package  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>find_stubs_package: bool = False\n</code></pre> <p>Whether to load stubs package (package-stubs) when extracting docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.force_inspection","title":"force_inspection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>force_inspection: bool = False\n</code></pre> <p>Whether to force using dynamic analysis when loading data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.group_by_category","title":"group_by_category  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_by_category: bool = True\n</code></pre> <p>Group the object's children by categories: attributes, classes, functions, and modules.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.heading","title":"heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading: str = ''\n</code></pre> <p>A custom string to override the autogenerated heading of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.heading_level","title":"heading_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading_level: int = 2\n</code></pre> <p>The initial heading level to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.inherited_members","title":"inherited_members  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited_members: bool | list[str] = False\n</code></pre> <p>A boolean, or an explicit list of inherited members to render.</p> <p>If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list, do not select any inherited member.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.line_length","title":"line_length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>line_length: int = 60\n</code></pre> <p>Maximum line length when formatting code/signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.members","title":"members  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>members: list[str] | bool | None = None\n</code></pre> <p>A boolean, or an explicit list of members to render.</p> <p>If true, select all members without further filtering. If false or empty list, do not render members. If none, select all members and apply further filtering with filters and docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.members_order","title":"members_order  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>members_order: Order | list[Order] = 'alphabetical'\n</code></pre> <p>The members ordering to use.</p> <ul> <li><code>__all__</code>: order members according to <code>__all__</code> module attributes, if declared;</li> <li><code>alphabetical</code>: order members alphabetically;</li> <li><code>source</code>: order members as they appear in the source file.</li> </ul> <p>Since <code>__all__</code> is a module-only attribute, it can't be used to sort class members, therefore the <code>members_order</code> option accepts a list of ordering methods, indicating ordering preferences.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.merge_init_into_class","title":"merge_init_into_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>merge_init_into_class: bool = False\n</code></pre> <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.modernize_annotations","title":"modernize_annotations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>modernize_annotations: bool = False\n</code></pre> <p>Whether to modernize annotations, for example <code>Optional[str]</code> into <code>str | None</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.parameter_headings","title":"parameter_headings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameter_headings: bool = False\n</code></pre> <p>Whether to render headings for parameters (therefore showing parameters in the ToC).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.preload_modules","title":"preload_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preload_modules: list[str] = field(default_factory=list)\n</code></pre> <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>).</p> <p>It is useful when you want to render documentation for a particular member of an object, and this member is imported from another package than its parent.</p> <p>For an imported member to be rendered, you need to add it to the <code>__all__</code> attribute of the importing module.</p> <p>The modules must be listed as an array of strings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.relative_crossrefs","title":"relative_crossrefs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>relative_crossrefs: bool = False\n</code></pre> <p>Whether to enable the relative crossref syntax.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.scoped_crossrefs","title":"scoped_crossrefs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scoped_crossrefs: bool = False\n</code></pre> <p>Whether to enable the scoped crossref ability.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.separate_signature","title":"separate_signature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>separate_signature: bool = False\n</code></pre> <p>Whether to put the whole signature in a code block below the heading.</p> <p>If Black or Ruff are installed, the signature is also formatted using them.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_bases","title":"show_bases  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_bases: bool = True\n</code></pre> <p>Show the base classes of a class.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_category_heading","title":"show_category_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_category_heading: bool = False\n</code></pre> <p>When grouped by categories, show a heading for each category.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_attributes","title":"show_docstring_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_attributes: bool = True\n</code></pre> <p>Whether to display the 'Attributes' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_classes","title":"show_docstring_classes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_classes: bool = True\n</code></pre> <p>Whether to display the 'Classes' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_description","title":"show_docstring_description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_description: bool = True\n</code></pre> <p>Whether to display the textual block (including admonitions) in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_examples","title":"show_docstring_examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_examples: bool = True\n</code></pre> <p>Whether to display the 'Examples' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_functions","title":"show_docstring_functions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_functions: bool = True\n</code></pre> <p>Whether to display the 'Functions' or 'Methods' sections in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_modules","title":"show_docstring_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_modules: bool = True\n</code></pre> <p>Whether to display the 'Modules' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_other_parameters","title":"show_docstring_other_parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_other_parameters: bool = True\n</code></pre> <p>Whether to display the 'Other Parameters' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_parameters","title":"show_docstring_parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_parameters: bool = True\n</code></pre> <p>Whether to display the 'Parameters' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_raises","title":"show_docstring_raises  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_raises: bool = True\n</code></pre> <p>Whether to display the 'Raises' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_receives","title":"show_docstring_receives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_receives: bool = True\n</code></pre> <p>Whether to display the 'Receives' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_returns","title":"show_docstring_returns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_returns: bool = True\n</code></pre> <p>Whether to display the 'Returns' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_warns","title":"show_docstring_warns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_warns: bool = True\n</code></pre> <p>Whether to display the 'Warns' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_docstring_yields","title":"show_docstring_yields  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_yields: bool = True\n</code></pre> <p>Whether to display the 'Yields' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_if_no_docstring","title":"show_if_no_docstring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_if_no_docstring: bool = False\n</code></pre> <p>Show the object heading even if it has no docstring or children with docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_inheritance_diagram","title":"show_inheritance_diagram  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_inheritance_diagram: bool = False\n</code></pre> <p>Show the inheritance diagram of a class using Mermaid.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_labels","title":"show_labels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_labels: bool = True\n</code></pre> <p>Whether to show labels of the members.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_object_full_path","title":"show_object_full_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_object_full_path: bool = False\n</code></pre> <p>Show the full Python path of every object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_overloads","title":"show_overloads  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_overloads: bool = True\n</code></pre> <p>Show the overloads of a function or method.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_root_full_path","title":"show_root_full_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_full_path: bool = True\n</code></pre> <p>Show the full Python path for the root object heading.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_root_heading","title":"show_root_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_heading: bool = False\n</code></pre> <p>Show the heading of the object at the root of the documentation tree.</p> <p>The root object is the object referenced by the identifier after <code>:::</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_root_members_full_path","title":"show_root_members_full_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_members_full_path: bool = False\n</code></pre> <p>Show the full Python path of the root members.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_root_toc_entry","title":"show_root_toc_entry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_toc_entry: bool = True\n</code></pre> <p>If the root heading is not shown, at least add a ToC entry for it.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_signature","title":"show_signature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_signature: bool = True\n</code></pre> <p>Show methods and functions signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_signature_annotations","title":"show_signature_annotations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_signature_annotations: bool = False\n</code></pre> <p>Show the type annotations in methods and functions signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_source","title":"show_source  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_source: bool = True\n</code></pre> <p>Show the source code of this object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_submodules","title":"show_submodules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_submodules: bool = False\n</code></pre> <p>When rendering a module, show its submodules recursively.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_symbol_type_heading","title":"show_symbol_type_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_heading: bool = False\n</code></pre> <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.show_symbol_type_toc","title":"show_symbol_type_toc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_toc: bool = False\n</code></pre> <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.signature_crossrefs","title":"signature_crossrefs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>signature_crossrefs: bool = False\n</code></pre> <p>Whether to render cross-references for type annotations in signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary: bool | SummaryOption = field(default_factory=SummaryOption)\n</code></pre> <p>Whether to render summaries of modules, classes, functions (methods) and attributes.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.toc_label","title":"toc_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toc_label: str = ''\n</code></pre> <p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.unwrap_annotated","title":"unwrap_annotated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unwrap_annotated: bool = False\n</code></pre> <p>Whether to unwrap <code>Annotated</code> types to show only the type without the annotations.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonInputOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions","title":"PythonOptions  <code>dataclass</code>","text":"<pre><code>PythonOptions(\n    allow_inspection: bool = True,\n    force_inspection: bool = False,\n    annotations_path: Literal[\"brief\", \"source\", \"full\"] = \"brief\",\n    backlinks: Literal[\"flat\", \"tree\", False] = False,\n    docstring_options: (\n        GoogleStyleOptions\n        | NumpyStyleOptions\n        | SphinxStyleOptions\n        | AutoStyleOptions\n        | None\n    ) = None,\n    docstring_section_style: Literal[\"table\", \"list\", \"spacy\"] = \"table\",\n    docstring_style: Literal[\"auto\", \"google\", \"numpy\", \"sphinx\"] | None = \"google\",\n    extensions: list[str | dict[str, Any]] = list(),\n    filters: list[tuple[Pattern, bool]] | Literal[\"public\"] = lambda: [\n        (compile(removeprefix(\"!\")), startswith(\"!\")) for filtr in _DEFAULT_FILTERS\n    ](),\n    find_stubs_package: bool = False,\n    group_by_category: bool = True,\n    heading: str = \"\",\n    heading_level: int = 2,\n    inherited_members: bool | list[str] = False,\n    line_length: int = 60,\n    members: list[str] | bool | None = None,\n    members_order: Order | list[Order] = \"alphabetical\",\n    merge_init_into_class: bool = False,\n    modernize_annotations: bool = False,\n    parameter_headings: bool = False,\n    preload_modules: list[str] = list(),\n    relative_crossrefs: bool = False,\n    scoped_crossrefs: bool = False,\n    show_overloads: bool = True,\n    separate_signature: bool = False,\n    show_bases: bool = True,\n    show_category_heading: bool = False,\n    show_docstring_attributes: bool = True,\n    show_docstring_classes: bool = True,\n    show_docstring_description: bool = True,\n    show_docstring_examples: bool = True,\n    show_docstring_functions: bool = True,\n    show_docstring_modules: bool = True,\n    show_docstring_other_parameters: bool = True,\n    show_docstring_parameters: bool = True,\n    show_docstring_raises: bool = True,\n    show_docstring_receives: bool = True,\n    show_docstring_returns: bool = True,\n    show_docstring_warns: bool = True,\n    show_docstring_yields: bool = True,\n    show_if_no_docstring: bool = False,\n    show_inheritance_diagram: bool = False,\n    show_labels: bool = True,\n    show_object_full_path: bool = False,\n    show_root_full_path: bool = True,\n    show_root_heading: bool = False,\n    show_root_members_full_path: bool = False,\n    show_root_toc_entry: bool = True,\n    show_signature_annotations: bool = False,\n    show_signature: bool = True,\n    show_source: bool = True,\n    show_submodules: bool = False,\n    show_symbol_type_heading: bool = False,\n    show_symbol_type_toc: bool = False,\n    signature_crossrefs: bool = False,\n    summary: SummaryOption = SummaryOption(),\n    toc_label: str = \"\",\n    unwrap_annotated: bool = False,\n    extra: dict[str, Any] = dict(),\n)\n</code></pre> <pre><code>\n              flowchart TD\n              mkdocstrings_handlers.python.PythonOptions[PythonOptions]\n              mkdocstrings_handlers.python._internal.config.PythonInputOptions[PythonInputOptions]\n\n                              mkdocstrings_handlers.python._internal.config.PythonInputOptions --&gt; mkdocstrings_handlers.python.PythonOptions\n                \n\n\n              click mkdocstrings_handlers.python.PythonOptions href \"\" \"mkdocstrings_handlers.python.PythonOptions\"\n              click mkdocstrings_handlers.python._internal.config.PythonInputOptions href \"\" \"mkdocstrings_handlers.python._internal.config.PythonInputOptions\"\n            </code></pre> <p>Final options passed as template context.</p> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonHandler <ul> <li> <code></code>\u00a0collect </li> <li> <code></code>\u00a0render </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>allow_inspection</code>               (<code>bool</code>)           \u2013            <p>Whether to allow inspecting modules when visiting them is not possible.</p> </li> <li> <code>annotations_path</code>               (<code>Literal['brief', 'source', 'full']</code>)           \u2013            <p>The verbosity for annotations path: <code>brief</code> (recommended), <code>source</code> (as written in the source), or <code>full</code>.</p> </li> <li> <code>backlinks</code>               (<code>Literal['flat', 'tree', False]</code>)           \u2013            <p>Whether to render backlinks, and how.</p> </li> <li> <code>docstring_options</code>               (<code>GoogleStyleOptions | NumpyStyleOptions | SphinxStyleOptions | AutoStyleOptions | None</code>)           \u2013            <p>The options for the docstring parser.</p> </li> <li> <code>docstring_section_style</code>               (<code>Literal['table', 'list', 'spacy']</code>)           \u2013            <p>The style used to render docstring sections.</p> </li> <li> <code>docstring_style</code>               (<code>Literal['auto', 'google', 'numpy', 'sphinx'] | None</code>)           \u2013            <p>The docstring style to use: <code>auto</code>, <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>.</p> </li> <li> <code>extensions</code>               (<code>list[str | dict[str, Any]]</code>)           \u2013            <p>A list of Griffe extensions to load.</p> </li> <li> <code>extra</code>               (<code>dict[str, Any]</code>)           \u2013            <p>Extra options.</p> </li> <li> <code>filters</code>               (<code>list[tuple[Pattern, bool]] | Literal['public']</code>)           \u2013            <p>A list of filters, or <code>\"public\"</code>.</p> </li> <li> <code>find_stubs_package</code>               (<code>bool</code>)           \u2013            <p>Whether to load stubs package (package-stubs) when extracting docstrings.</p> </li> <li> <code>force_inspection</code>               (<code>bool</code>)           \u2013            <p>Whether to force using dynamic analysis when loading data.</p> </li> <li> <code>group_by_category</code>               (<code>bool</code>)           \u2013            <p>Group the object's children by categories: attributes, classes, functions, and modules.</p> </li> <li> <code>heading</code>               (<code>str</code>)           \u2013            <p>A custom string to override the autogenerated heading of the root object.</p> </li> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The initial heading level to use.</p> </li> <li> <code>inherited_members</code>               (<code>bool | list[str]</code>)           \u2013            <p>A boolean, or an explicit list of inherited members to render.</p> </li> <li> <code>line_length</code>               (<code>int</code>)           \u2013            <p>Maximum line length when formatting code/signatures.</p> </li> <li> <code>members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of members to render.</p> </li> <li> <code>members_order</code>               (<code>Order | list[Order]</code>)           \u2013            <p>The members ordering to use.</p> </li> <li> <code>merge_init_into_class</code>               (<code>bool</code>)           \u2013            <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p> </li> <li> <code>modernize_annotations</code>               (<code>bool</code>)           \u2013            <p>Whether to modernize annotations, for example <code>Optional[str]</code> into <code>str | None</code>.</p> </li> <li> <code>parameter_headings</code>               (<code>bool</code>)           \u2013            <p>Whether to render headings for parameters (therefore showing parameters in the ToC).</p> </li> <li> <code>preload_modules</code>               (<code>list[str]</code>)           \u2013            <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>).</p> </li> <li> <code>relative_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to enable the relative crossref syntax.</p> </li> <li> <code>scoped_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to enable the scoped crossref ability.</p> </li> <li> <code>separate_signature</code>               (<code>bool</code>)           \u2013            <p>Whether to put the whole signature in a code block below the heading.</p> </li> <li> <code>show_bases</code>               (<code>bool</code>)           \u2013            <p>Show the base classes of a class.</p> </li> <li> <code>show_category_heading</code>               (<code>bool</code>)           \u2013            <p>When grouped by categories, show a heading for each category.</p> </li> <li> <code>show_docstring_attributes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Attributes' section in the object's docstring.</p> </li> <li> <code>show_docstring_classes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Classes' section in the object's docstring.</p> </li> <li> <code>show_docstring_description</code>               (<code>bool</code>)           \u2013            <p>Whether to display the textual block (including admonitions) in the object's docstring.</p> </li> <li> <code>show_docstring_examples</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Examples' section in the object's docstring.</p> </li> <li> <code>show_docstring_functions</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Functions' or 'Methods' sections in the object's docstring.</p> </li> <li> <code>show_docstring_modules</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Modules' section in the object's docstring.</p> </li> <li> <code>show_docstring_other_parameters</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Other Parameters' section in the object's docstring.</p> </li> <li> <code>show_docstring_parameters</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Parameters' section in the object's docstring.</p> </li> <li> <code>show_docstring_raises</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Raises' section in the object's docstring.</p> </li> <li> <code>show_docstring_receives</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Receives' section in the object's docstring.</p> </li> <li> <code>show_docstring_returns</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Returns' section in the object's docstring.</p> </li> <li> <code>show_docstring_warns</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Warns' section in the object's docstring.</p> </li> <li> <code>show_docstring_yields</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Yields' section in the object's docstring.</p> </li> <li> <code>show_if_no_docstring</code>               (<code>bool</code>)           \u2013            <p>Show the object heading even if it has no docstring or children with docstrings.</p> </li> <li> <code>show_inheritance_diagram</code>               (<code>bool</code>)           \u2013            <p>Show the inheritance diagram of a class using Mermaid.</p> </li> <li> <code>show_labels</code>               (<code>bool</code>)           \u2013            <p>Whether to show labels of the members.</p> </li> <li> <code>show_object_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path of every object.</p> </li> <li> <code>show_overloads</code>               (<code>bool</code>)           \u2013            <p>Show the overloads of a function or method.</p> </li> <li> <code>show_root_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path for the root object heading.</p> </li> <li> <code>show_root_heading</code>               (<code>bool</code>)           \u2013            <p>Show the heading of the object at the root of the documentation tree.</p> </li> <li> <code>show_root_members_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path of the root members.</p> </li> <li> <code>show_root_toc_entry</code>               (<code>bool</code>)           \u2013            <p>If the root heading is not shown, at least add a ToC entry for it.</p> </li> <li> <code>show_signature</code>               (<code>bool</code>)           \u2013            <p>Show methods and functions signatures.</p> </li> <li> <code>show_signature_annotations</code>               (<code>bool</code>)           \u2013            <p>Show the type annotations in methods and functions signatures.</p> </li> <li> <code>show_source</code>               (<code>bool</code>)           \u2013            <p>Show the source code of this object.</p> </li> <li> <code>show_submodules</code>               (<code>bool</code>)           \u2013            <p>When rendering a module, show its submodules recursively.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>bool</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p> </li> <li> <code>signature_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to render cross-references for type annotations in signatures.</p> </li> <li> <code>summary</code>               (<code>SummaryOption</code>)           \u2013            <p>Whether to render summaries of modules, classes, functions (methods) and attributes.</p> </li> <li> <code>toc_label</code>               (<code>str</code>)           \u2013            <p>A custom string to override the autogenerated toc label of the root object.</p> </li> <li> <code>unwrap_annotated</code>               (<code>bool</code>)           \u2013            <p>Whether to unwrap <code>Annotated</code> types to show only the type without the annotations.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.allow_inspection","title":"allow_inspection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>allow_inspection: bool = True\n</code></pre> <p>Whether to allow inspecting modules when visiting them is not possible.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.annotations_path","title":"annotations_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>annotations_path: Literal['brief', 'source', 'full'] = 'brief'\n</code></pre> <p>The verbosity for annotations path: <code>brief</code> (recommended), <code>source</code> (as written in the source), or <code>full</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.backlinks","title":"backlinks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>backlinks: Literal['flat', 'tree', False] = False\n</code></pre> <p>Whether to render backlinks, and how.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.docstring_options","title":"docstring_options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>docstring_options: (\n    GoogleStyleOptions\n    | NumpyStyleOptions\n    | SphinxStyleOptions\n    | AutoStyleOptions\n    | None\n) = None\n</code></pre> <p>The options for the docstring parser.</p> <p>See docstring parsers and their options in Griffe docs.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.docstring_section_style","title":"docstring_section_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>docstring_section_style: Literal['table', 'list', 'spacy'] = 'table'\n</code></pre> <p>The style used to render docstring sections.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.docstring_style","title":"docstring_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>docstring_style: Literal['auto', 'google', 'numpy', 'sphinx'] | None = 'google'\n</code></pre> <p>The docstring style to use: <code>auto</code>, <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.extensions","title":"extensions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extensions: list[str | dict[str, Any]] = field(default_factory=list)\n</code></pre> <p>A list of Griffe extensions to load.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: dict[str, Any] = field(default_factory=dict)\n</code></pre> <p>Extra options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.filters","title":"filters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filters: list[tuple[Pattern, bool]] | Literal[\"public\"] = field(\n    default_factory=lambda: [\n        (compile(removeprefix(\"!\")), startswith(\"!\")) for filtr in _DEFAULT_FILTERS\n    ]\n)\n</code></pre> <p>A list of filters, or <code>\"public\"</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.find_stubs_package","title":"find_stubs_package  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>find_stubs_package: bool = False\n</code></pre> <p>Whether to load stubs package (package-stubs) when extracting docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.force_inspection","title":"force_inspection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>force_inspection: bool = False\n</code></pre> <p>Whether to force using dynamic analysis when loading data.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.group_by_category","title":"group_by_category  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_by_category: bool = True\n</code></pre> <p>Group the object's children by categories: attributes, classes, functions, and modules.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.heading","title":"heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading: str = ''\n</code></pre> <p>A custom string to override the autogenerated heading of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.heading_level","title":"heading_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading_level: int = 2\n</code></pre> <p>The initial heading level to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.inherited_members","title":"inherited_members  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>inherited_members: bool | list[str] = False\n</code></pre> <p>A boolean, or an explicit list of inherited members to render.</p> <p>If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list, do not select any inherited member.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.line_length","title":"line_length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>line_length: int = 60\n</code></pre> <p>Maximum line length when formatting code/signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.members","title":"members  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>members: list[str] | bool | None = None\n</code></pre> <p>A boolean, or an explicit list of members to render.</p> <p>If true, select all members without further filtering. If false or empty list, do not render members. If none, select all members and apply further filtering with filters and docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.members_order","title":"members_order  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>members_order: Order | list[Order] = 'alphabetical'\n</code></pre> <p>The members ordering to use.</p> <ul> <li><code>__all__</code>: order members according to <code>__all__</code> module attributes, if declared;</li> <li><code>alphabetical</code>: order members alphabetically;</li> <li><code>source</code>: order members as they appear in the source file.</li> </ul> <p>Since <code>__all__</code> is a module-only attribute, it can't be used to sort class members, therefore the <code>members_order</code> option accepts a list of ordering methods, indicating ordering preferences.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.merge_init_into_class","title":"merge_init_into_class  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>merge_init_into_class: bool = False\n</code></pre> <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.modernize_annotations","title":"modernize_annotations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>modernize_annotations: bool = False\n</code></pre> <p>Whether to modernize annotations, for example <code>Optional[str]</code> into <code>str | None</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.parameter_headings","title":"parameter_headings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameter_headings: bool = False\n</code></pre> <p>Whether to render headings for parameters (therefore showing parameters in the ToC).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.preload_modules","title":"preload_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>preload_modules: list[str] = field(default_factory=list)\n</code></pre> <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>).</p> <p>It is useful when you want to render documentation for a particular member of an object, and this member is imported from another package than its parent.</p> <p>For an imported member to be rendered, you need to add it to the <code>__all__</code> attribute of the importing module.</p> <p>The modules must be listed as an array of strings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.relative_crossrefs","title":"relative_crossrefs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>relative_crossrefs: bool = False\n</code></pre> <p>Whether to enable the relative crossref syntax.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.scoped_crossrefs","title":"scoped_crossrefs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scoped_crossrefs: bool = False\n</code></pre> <p>Whether to enable the scoped crossref ability.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.separate_signature","title":"separate_signature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>separate_signature: bool = False\n</code></pre> <p>Whether to put the whole signature in a code block below the heading.</p> <p>If Black or Ruff are installed, the signature is also formatted using them.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_bases","title":"show_bases  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_bases: bool = True\n</code></pre> <p>Show the base classes of a class.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_category_heading","title":"show_category_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_category_heading: bool = False\n</code></pre> <p>When grouped by categories, show a heading for each category.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_attributes","title":"show_docstring_attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_attributes: bool = True\n</code></pre> <p>Whether to display the 'Attributes' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_classes","title":"show_docstring_classes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_classes: bool = True\n</code></pre> <p>Whether to display the 'Classes' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_description","title":"show_docstring_description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_description: bool = True\n</code></pre> <p>Whether to display the textual block (including admonitions) in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_examples","title":"show_docstring_examples  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_examples: bool = True\n</code></pre> <p>Whether to display the 'Examples' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_functions","title":"show_docstring_functions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_functions: bool = True\n</code></pre> <p>Whether to display the 'Functions' or 'Methods' sections in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_modules","title":"show_docstring_modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_modules: bool = True\n</code></pre> <p>Whether to display the 'Modules' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_other_parameters","title":"show_docstring_other_parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_other_parameters: bool = True\n</code></pre> <p>Whether to display the 'Other Parameters' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_parameters","title":"show_docstring_parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_parameters: bool = True\n</code></pre> <p>Whether to display the 'Parameters' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_raises","title":"show_docstring_raises  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_raises: bool = True\n</code></pre> <p>Whether to display the 'Raises' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_receives","title":"show_docstring_receives  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_receives: bool = True\n</code></pre> <p>Whether to display the 'Receives' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_returns","title":"show_docstring_returns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_returns: bool = True\n</code></pre> <p>Whether to display the 'Returns' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_warns","title":"show_docstring_warns  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_warns: bool = True\n</code></pre> <p>Whether to display the 'Warns' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_docstring_yields","title":"show_docstring_yields  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_docstring_yields: bool = True\n</code></pre> <p>Whether to display the 'Yields' section in the object's docstring.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_if_no_docstring","title":"show_if_no_docstring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_if_no_docstring: bool = False\n</code></pre> <p>Show the object heading even if it has no docstring or children with docstrings.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_inheritance_diagram","title":"show_inheritance_diagram  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_inheritance_diagram: bool = False\n</code></pre> <p>Show the inheritance diagram of a class using Mermaid.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_labels","title":"show_labels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_labels: bool = True\n</code></pre> <p>Whether to show labels of the members.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_object_full_path","title":"show_object_full_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_object_full_path: bool = False\n</code></pre> <p>Show the full Python path of every object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_overloads","title":"show_overloads  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_overloads: bool = True\n</code></pre> <p>Show the overloads of a function or method.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_root_full_path","title":"show_root_full_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_full_path: bool = True\n</code></pre> <p>Show the full Python path for the root object heading.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_root_heading","title":"show_root_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_heading: bool = False\n</code></pre> <p>Show the heading of the object at the root of the documentation tree.</p> <p>The root object is the object referenced by the identifier after <code>:::</code>.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_root_members_full_path","title":"show_root_members_full_path  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_members_full_path: bool = False\n</code></pre> <p>Show the full Python path of the root members.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_root_toc_entry","title":"show_root_toc_entry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_root_toc_entry: bool = True\n</code></pre> <p>If the root heading is not shown, at least add a ToC entry for it.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_signature","title":"show_signature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_signature: bool = True\n</code></pre> <p>Show methods and functions signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_signature_annotations","title":"show_signature_annotations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_signature_annotations: bool = False\n</code></pre> <p>Show the type annotations in methods and functions signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_source","title":"show_source  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_source: bool = True\n</code></pre> <p>Show the source code of this object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_submodules","title":"show_submodules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_submodules: bool = False\n</code></pre> <p>When rendering a module, show its submodules recursively.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_symbol_type_heading","title":"show_symbol_type_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_heading: bool = False\n</code></pre> <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.show_symbol_type_toc","title":"show_symbol_type_toc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_toc: bool = False\n</code></pre> <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.signature_crossrefs","title":"signature_crossrefs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>signature_crossrefs: bool = False\n</code></pre> <p>Whether to render cross-references for type annotations in signatures.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.summary","title":"summary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>summary: SummaryOption = field(default_factory=SummaryOption)\n</code></pre> <p>Whether to render summaries of modules, classes, functions (methods) and attributes.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.toc_label","title":"toc_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toc_label: str = ''\n</code></pre> <p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.unwrap_annotated","title":"unwrap_annotated  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unwrap_annotated: bool = False\n</code></pre> <p>Whether to unwrap <code>Annotated</code> types to show only the type without the annotations.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.PythonOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.SphinxStyleOptions","title":"SphinxStyleOptions  <code>dataclass</code>","text":"<pre><code>SphinxStyleOptions()\n</code></pre> <p>Sphinx style docstring options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.SummaryOption","title":"SummaryOption  <code>dataclass</code>","text":"<pre><code>SummaryOption(\n    attributes: bool = False,\n    functions: bool = False,\n    classes: bool = False,\n    modules: bool = False,\n)\n</code></pre> <p>Summary option.</p> Returned by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonOptions <code></code>\u00a0summary </li> </ul> Used by: <ul> <li> <code></code>\u00a0python <code></code>\u00a0PythonOptions </li> </ul> <p>Attributes:</p> <ul> <li> <code>attributes</code>               (<code>bool</code>)           \u2013            <p>Whether to render summaries of attributes.</p> </li> <li> <code>classes</code>               (<code>bool</code>)           \u2013            <p>Whether to render summaries of classes.</p> </li> <li> <code>functions</code>               (<code>bool</code>)           \u2013            <p>Whether to render summaries of functions (methods).</p> </li> <li> <code>modules</code>               (<code>bool</code>)           \u2013            <p>Whether to render summaries of modules.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.SummaryOption.attributes","title":"attributes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attributes: bool = False\n</code></pre> <p>Whether to render summaries of attributes.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.SummaryOption.classes","title":"classes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>classes: bool = False\n</code></pre> <p>Whether to render summaries of classes.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.SummaryOption.functions","title":"functions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>functions: bool = False\n</code></pre> <p>Whether to render summaries of functions (methods).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.SummaryOption.modules","title":"modules  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>modules: bool = False\n</code></pre> <p>Whether to render summaries of modules.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_attributes_section","title":"do_as_attributes_section","text":"<pre><code>do_as_attributes_section(\n    context: Context, attributes: Sequence[Attribute], *, check_public: bool = True\n) -&gt; DocstringSectionAttributes\n</code></pre> <p>Build an attributes section from a list of attributes.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DocstringSectionAttributes</code>           \u2013            <p>An attributes docstring section.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_attributes_section(attributes)","title":"<code>attributes</code>","text":"(<code>Sequence[Attribute]</code>)           \u2013            <p>The attributes to build the section from.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_attributes_section(check_public)","title":"<code>check_public</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the attribute is public.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_classes_section","title":"do_as_classes_section","text":"<pre><code>do_as_classes_section(\n    context: Context, classes: Sequence[Class], *, check_public: bool = True\n) -&gt; DocstringSectionClasses\n</code></pre> <p>Build a classes section from a list of classes.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DocstringSectionClasses</code>           \u2013            <p>A classes docstring section.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_classes_section(classes)","title":"<code>classes</code>","text":"(<code>Sequence[Class]</code>)           \u2013            <p>The classes to build the section from.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_classes_section(check_public)","title":"<code>check_public</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the class is public.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_functions_section","title":"do_as_functions_section","text":"<pre><code>do_as_functions_section(\n    context: Context, functions: Sequence[Function], *, check_public: bool = True\n) -&gt; DocstringSectionFunctions\n</code></pre> <p>Build a functions section from a list of functions.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DocstringSectionFunctions</code>           \u2013            <p>A functions docstring section.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_functions_section(functions)","title":"<code>functions</code>","text":"(<code>Sequence[Function]</code>)           \u2013            <p>The functions to build the section from.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_functions_section(check_public)","title":"<code>check_public</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the function is public.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_modules_section","title":"do_as_modules_section","text":"<pre><code>do_as_modules_section(\n    context: Context, modules: Sequence[Module], *, check_public: bool = True\n) -&gt; DocstringSectionModules\n</code></pre> <p>Build a modules section from a list of modules.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DocstringSectionModules</code>           \u2013            <p>A modules docstring section.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_modules_section(modules)","title":"<code>modules</code>","text":"(<code>Sequence[Module]</code>)           \u2013            <p>The modules to build the section from.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_as_modules_section(check_public)","title":"<code>check_public</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the module is public.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_backlink_tree","title":"do_backlink_tree","text":"<pre><code>do_backlink_tree(backlinks: list[Backlink]) -&gt; Tree[BacklinkCrumb]\n</code></pre> <p>Build a tree of backlinks.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tree[BacklinkCrumb]</code>           \u2013            <p>A tree of backlinks.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_backlink_tree(backlinks)","title":"<code>backlinks</code>","text":"(<code>list[Backlink]</code>)           \u2013            <p>The list of backlinks.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_crossref","title":"do_crossref","text":"<pre><code>do_crossref(path: str, *, brief: bool = True) -&gt; Markup\n</code></pre> <p>Deprecated. Filter to create cross-references.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>Markup text.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_crossref(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>The path to link to.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_crossref(brief)","title":"<code>brief</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show only the last part of the path, add full path as hover.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_filter_objects","title":"do_filter_objects","text":"<pre><code>do_filter_objects(\n    objects_dictionary: dict[str, Object | Alias],\n    *,\n    filters: Sequence[tuple[Pattern, bool]] | Literal[\"public\"] | None = None,\n    members_list: bool | list[str] | None = None,\n    inherited_members: bool | list[str] = False,\n    keep_no_docstrings: bool = True\n) -&gt; list[Object | Alias]\n</code></pre> <p>Filter a dictionary of objects based on their docstrings.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Object | Alias]</code>           \u2013            <p>A list of objects.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_filter_objects(objects_dictionary)","title":"<code>objects_dictionary</code>","text":"(<code>dict[str, Object | Alias]</code>)           \u2013            <p>The dictionary of objects.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_filter_objects(filters)","title":"<code>filters</code>","text":"(<code>Sequence[tuple[Pattern, bool]] | Literal['public'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Filters to apply, based on members' names, or <code>\"public\"</code>. Each element is a tuple: a pattern, and a boolean indicating whether to reject the object if the pattern matches.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_filter_objects(members_list)","title":"<code>members_list</code>","text":"(<code>bool | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional, explicit list of members to keep. When given and empty, return an empty list. When given and not empty, ignore filters and docstrings presence/absence.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_filter_objects(inherited_members)","title":"<code>inherited_members</code>","text":"(<code>bool | list[str]</code>, default:                   <code>False</code> )           \u2013            <p>Whether to keep inherited members or exclude them.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_filter_objects(keep_no_docstrings)","title":"<code>keep_no_docstrings</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to keep objects with no/empty docstrings (recursive check).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_attribute","title":"do_format_attribute","text":"<pre><code>do_format_attribute(\n    context: Context,\n    attribute_path: Markup,\n    attribute: Attribute,\n    line_length: int,\n    *,\n    crossrefs: bool = False\n) -&gt; str\n</code></pre> <p>Format an attribute.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same code, formatted.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_attribute(context)","title":"<code>context</code>","text":"(<code>Context</code>)           \u2013            <p>Jinja context, passed automatically.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_attribute(attribute_path)","title":"<code>attribute_path</code>","text":"(<code>Markup</code>)           \u2013            <p>The path of the callable we render the signature of.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_attribute(attribute)","title":"<code>attribute</code>","text":"(<code>Attribute</code>)           \u2013            <p>The attribute we render the signature of.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_attribute(line_length)","title":"<code>line_length</code>","text":"(<code>int</code>)           \u2013            <p>The line length.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_attribute(crossrefs)","title":"<code>crossrefs</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to cross-reference types in the signature.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_code","title":"do_format_code","text":"<pre><code>do_format_code(code: str, line_length: int) -&gt; str\n</code></pre> <p>Format code.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same code, formatted.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_code(code)","title":"<code>code</code>","text":"(<code>str</code>)           \u2013            <p>The code to format.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_code(line_length)","title":"<code>line_length</code>","text":"(<code>int</code>)           \u2013            <p>The line length.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_signature","title":"do_format_signature","text":"<pre><code>do_format_signature(\n    context: Context,\n    callable_path: Markup,\n    function: Function,\n    line_length: int,\n    *,\n    annotations: bool | None = None,\n    crossrefs: bool = False\n) -&gt; str\n</code></pre> <p>Format a signature.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same code, formatted.</p> </li> </ul> Referenced by: <ul> <li> Home Changelog 1.0.0 - 2023-05-11 Breaking changes </li> <li> Insiders Getting started Changelog mkdocstrings-python Insiders 1.0.0 May 10, 2023 </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_signature(context)","title":"<code>context</code>","text":"(<code>Context</code>)           \u2013            <p>Jinja context, passed automatically.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_signature(callable_path)","title":"<code>callable_path</code>","text":"(<code>Markup</code>)           \u2013            <p>The path of the callable we render the signature of.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_signature(function)","title":"<code>function</code>","text":"(<code>Function</code>)           \u2013            <p>The function we render the signature of.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_signature(line_length)","title":"<code>line_length</code>","text":"(<code>int</code>)           \u2013            <p>The line length.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_signature(annotations)","title":"<code>annotations</code>","text":"(<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to show type annotations.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_format_signature(crossrefs)","title":"<code>crossrefs</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to cross-reference types in the signature.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_get_template","title":"do_get_template","text":"<pre><code>do_get_template(env: Environment, obj: str | Object) -&gt; str\n</code></pre> <p>Get the template name used to render an object.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A template name.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_get_template(env)","title":"<code>env</code>","text":"(<code>Environment</code>)           \u2013            <p>The Jinja environment, passed automatically.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_get_template(obj)","title":"<code>obj</code>","text":"(<code>str | Object</code>)           \u2013            <p>A Griffe object, or a template name.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_multi_crossref","title":"do_multi_crossref","text":"<pre><code>do_multi_crossref(text: str, *, code: bool = True) -&gt; Markup\n</code></pre> <p>Deprecated. Filter to create cross-references.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>Markup text.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_multi_crossref(text)","title":"<code>text</code>","text":"(<code>str</code>)           \u2013            <p>The text to scan.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_multi_crossref(code)","title":"<code>code</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to wrap the result in a code tag.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_order_members","title":"do_order_members","text":"<pre><code>do_order_members(\n    members: Sequence[Object | Alias],\n    order: Order | list[Order],\n    members_list: bool | list[str] | None,\n) -&gt; Sequence[Object | Alias]\n</code></pre> <p>Order members given an ordering method.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Sequence[Object | Alias]</code>           \u2013            <p>The same members, ordered.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_order_members(members)","title":"<code>members</code>","text":"(<code>Sequence[Object | Alias]</code>)           \u2013            <p>The members to order.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_order_members(order)","title":"<code>order</code>","text":"(<code>Order | list[Order]</code>)           \u2013            <p>The ordering method.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_order_members(members_list)","title":"<code>members_list</code>","text":"(<code>bool | list[str] | None</code>)           \u2013            <p>An optional member list (manual ordering).</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_split_path","title":"do_split_path","text":"<pre><code>do_split_path(path: str, full_path: str) -&gt; Iterator[tuple[str, str, str, str]]\n</code></pre> <p>Split object paths for building cross-references.</p> <p>Parameters:</p> <p>Yields:</p> <ul> <li> <code>tuple[str, str, str, str]</code>           \u2013            <p>4-tuples: prefix, word, full path, suffix.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_split_path(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>The path to split.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.do_split_path(full_path)","title":"<code>full_path</code>","text":"(<code>str</code>)           \u2013            <p>The full path, used to compute correct paths for each part of the path.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    handler_config: MutableMapping[str, Any], tool_config: MkDocsConfig, **kwargs: Any\n) -&gt; PythonHandler\n</code></pre> <p>Return an instance of <code>PythonHandler</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>PythonHandler</code>           \u2013            <p>An instance of <code>PythonHandler</code>.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.python.get_handler(handler_config)","title":"<code>handler_config</code>","text":"(<code>MutableMapping[str, Any]</code>)           \u2013            <p>The handler configuration.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.get_handler(tool_config)","title":"<code>tool_config</code>","text":"(<code>MkDocsConfig</code>)           \u2013            <p>The tool (SSG) configuration.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.config","title":"config","text":"<p>Deprecated. Import from <code>mkdocstrings_handlers.python</code> directly.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.handler","title":"handler","text":"<p>Deprecated. Import from <code>mkdocstrings_handlers.python</code> directly.</p>"},{"location":"reference/api/#mkdocstrings_handlers.python.rendering","title":"rendering","text":"<p>Deprecated. Import from <code>mkdocstrings_handlers.python</code> directly.</p>"},{"location":"usage/","title":"Usage","text":"<p>This is the documentation for the NEW Python handler.</p> <p> To read the documentation for the LEGACY handler, go to the legacy handler documentation.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>You can install this handler as a mkdocstrings extra:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings[python]&gt;=0.18\",\n]\n</code></pre> <p>You can also explicitly depend on the handler:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings-python\",\n]\n</code></pre> <p>The Python handler is the default mkdocstrings handler. You can change the default handler, or explicitely set the Python handler as default by defining the <code>default_handler</code> configuration option of <code>mkdocstrings</code> in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    default_handler: python\n</code></pre>"},{"location":"usage/#injecting-documentation","title":"Injecting documentation","text":"<p>With the Python handler installed and configured as default handler, you can inject documentation for a module, class, function, or any other Python object with mkdocstrings' autodoc syntax, in your Markdown pages:</p> <pre><code>::: path.to.object\n</code></pre> <p>If another handler was defined as default handler, you can explicitely ask for the Python handler to be used when injecting documentation with the <code>handler</code> option:</p> <pre><code>::: path.to.object\n    handler: python\n</code></pre>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>When installed, the Python handler becomes the default mkdocstrings handler. You can configure it in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        ...  # the Python handler configuration\n</code></pre>"},{"location":"usage/#global-only-options","title":"Global-only options","text":"<p>Some options are global only, and go directly under the handler's name.</p> <p></p>"},{"location":"usage/#inventories","title":"<code>inventories</code>","text":"<p>This option is used to load Sphinx-compatible objects inventories from other documentation sites. For example, you can load the standard library objects inventory like this:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        inventories:\n        - https://docs.python.org/3/objects.inv\n</code></pre> <p>When loading an inventory, you enable automatic cross-references to other documentation sites like the standard library docs or any third-party package docs. Typically, you want to load the inventories of your project's dependencies, at least those that are used in the public API.</p> <p>See mkdocstrings' documentation on inventories for more details.</p> <p>Additionally, the Python handler accepts a <code>domains</code> option in the inventory options, which allows to select the inventory domains to load. By default the Python handler only selects the <code>py</code> domain (for Python objects). You might find useful to also enable the <code>std</code> domain:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        inventories:\n        - url: https://docs.python-requests.org/en/master/objects.inv\n          domains: [std, py]\n</code></pre> <p></p>"},{"location":"usage/#load_external_modules","title":"<code>load_external_modules</code>","text":"<p>This option allows resolving aliases (imports) to any external module. Modules are considered external when they are not part of the package your are injecting documentation for. Setting this option to <code>True</code> will tell the handler to resolve aliases recursively when they are made public through the <code>__all__</code> variable. By default, the handler will only resolve aliases when they point at a private sibling of the source package, for example aliases going from <code>ast</code> to <code>_ast</code>. Set <code>load_external_modules</code> to <code>False</code> to prevent even that.</p> <p>Use with caution</p> <p> This can load a lot of modules through Griffe, slowing down your build or triggering errors that Griffe does not yet handle. We recommend using the <code>preload_modules</code> option instead, which acts as an include-list rather than as include-all.</p> <p>Example:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        load_external_modules: true\n</code></pre> <p></p>"},{"location":"usage/#locale","title":"<code>locale</code>","text":"<p>The locale to use when translating template strings. The translation system is not fully ready yet, so we don't recommend setting the option for now.</p> <p></p>"},{"location":"usage/#paths","title":"<code>paths</code>","text":"<p>This option is used to provide filesystem paths in which to search for Python modules. Non-absolute paths are computed as relative to MkDocs configuration file. Example:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [src]  # search packages in the src folder\n</code></pre> <p>More details at Finding modules.</p> <p></p>"},{"location":"usage/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          do_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: package.module.class\n    options:\n      do_something: false\n</code></pre> <p>These options affect how the documentation is collected from sources and rendered. See the following tables summarizing the options, and get more details for each option in the following pages:</p> <ul> <li>General options: various options that do not fit in the other categories</li> <li>Headings options: options related to headings and the table of contents     (or sidebar, depending on the theme used)</li> <li>Members options: options related to filtering or ordering members     in the generated documentation</li> <li>Docstrings options: options related to docstrings (parsing and rendering)</li> <li>Signature options: options related to signatures and type annotations</li> </ul>"},{"location":"usage/#finding-modules","title":"Finding modules","text":"<p>There are multiple ways to tell the handler where to find your packages/modules.</p> <p>The recommended method is to use the <code>paths</code> option, as it's the only one that works with the <code>-f</code> option of MkDocs, allowing to build the documentation from any location on the file system. Indeed, the paths provided with the <code>paths</code> option are computed as relative to the configuration file (mkdocs.yml), so that the current working directory has no impact on the build process: you can build the docs from any location on your filesystem.</p>"},{"location":"usage/#using-the-paths-option","title":"Using the <code>paths</code> option","text":"<p>This is the recommended method.</p> <ol> <li> <p>mkdocs.yml in root, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [.]  # actually not needed, default\n</code></pre> </li> <li> <p>mkdocs.yml in root, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [src]\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [..]\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        paths: [../src]\n</code></pre> </li> </ol> <p>Except for case 1, which is supported by default, we strongly recommend setting the path to your packages using this option, even if it works without it (for example because your project manager automatically adds <code>src</code> to PYTHONPATH), to make sure anyone can build your docs from any location on their filesystem.</p>"},{"location":"usage/#using-the-pythonpath-environment-variable","title":"Using the PYTHONPATH environment variable","text":"<p>This method has limitations.</p> <p> This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend using the <code>paths</code> method instead.</p> <p>You can take advantage of the usual Python loading mechanisms. In Bash and other shells, you can run your command like this (note the prepended <code>PYTHONPATH=...</code>):</p> <ol> <li> <p>mkdocs.yml in root, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=. mkdocs build  # actually not needed, default\n</code></pre> </li> <li> <p>mkdocs.yml in root, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=src mkdocs build\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in root     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=. mkdocs build -f docs/mkdocs.yml\n</code></pre> </li> <li> <p>mkdocs.yml in subfolder, package in subfolder     <pre><code>\ud83d\udcc1 root/\n\u251c\u2500\u2500 \ud83d\udcc1 docs/\n\u2502   \u2514\u2500\u2500  mkdocs.yml\n\u2514\u2500\u2500 \ud83d\udcc1 src/\n    \u2514\u2500\u2500 \ud83d\udcc1 package/\n</code></pre></p> <pre><code>PYTHONPATH=src mkdocs build -f docs/mkdocs.yml\n</code></pre> </li> </ol>"},{"location":"usage/#installing-your-package-in-the-current-python-environment","title":"Installing your package in the current Python environment","text":"<p>This method has limitations.</p> <p> This method might work for you, with your current setup, but not for others trying your build your docs with their own setup/environment. We recommend using the <code>paths</code> method instead.</p> <p>Install your package in the current environment, and run MkDocs:</p> pipPDMPoetry <pre><code>. venv/bin/activate\npip install -e .\nmkdocs build\n</code></pre> <pre><code>pdm install\npdm run mkdocs build\n</code></pre> <pre><code>poetry install\npoetry run mkdocs build\n</code></pre>"},{"location":"usage/customization/","title":"Customization","text":"<p>It is possible to customize the output of the generated documentation with CSS and/or by overriding templates.</p>"},{"location":"usage/customization/#css-classes","title":"CSS classes","text":"<p>Our templates add CSS classes to many HTML elements to make it possible for users to customize the resulting look and feel.</p> <p>To add CSS rules and style mkdocstrings' output, put them in a CSS file in your docs folder, for example in <code>docs/css/mkdocstrings.css</code>, and reference this file in MkDocs' <code>extra_css</code> configuration option:</p> mkdocs.yml<pre><code>extra_css:\n- css/mkdocstrings.css\n</code></pre> <p>Example:</p> docs/css/mkdocstrings.css<pre><code>.doc-section-title {\n  font-weight: bold;\n}\n</code></pre> <p>The following CSS classes are used in the generated HTML:</p> <ul> <li><code>doc</code>: on all the following elements</li> <li><code>doc-children</code>: on <code>div</code>s containing the children of an object</li> <li><code>doc-object</code>: on <code>div</code>s containing an object<ul> <li><code>doc-attribute</code>: on <code>div</code>s containing an attribute</li> <li><code>doc-class</code>: on <code>div</code>s containing a class</li> <li><code>doc-function</code>: on <code>div</code>s containing a function</li> <li><code>doc-module</code>: on <code>div</code>s containing a module</li> </ul> </li> <li><code>doc-heading</code>: on objects headings<ul> <li><code>doc-object-name</code>: on <code>span</code>s wrapping objects names/paths in the heading<ul> <li><code>doc-KIND-name</code>: as above, specific to the kind of object (module, class, function, attribute)</li> </ul> </li> </ul> </li> <li><code>doc-contents</code>: on <code>div</code>s wrapping the docstring then the children (if any)<ul> <li><code>first</code>: same, but only on the root object's contents <code>div</code></li> </ul> </li> <li><code>doc-labels</code>: on <code>span</code>s wrapping the object's labels<ul> <li><code>doc-label</code>: on <code>small</code> elements containing a label<ul> <li><code>doc-label-LABEL</code>: same, where <code>LABEL</code> is replaced by the actual label</li> </ul> </li> </ul> </li> <li><code>doc-section-title</code>: on section titles (depend on the selected style for section rendering)</li> <li><code>doc-section-item</code>: on section items (depend on the selected style for section rendering)</li> <li><code>doc-md-description</code>: on <code>div</code>s containing HTML descriptions converted from Markdown docstrings</li> <li><code>doc-symbol</code>: on <code>code</code> tags of symbol types<ul> <li><code>doc-symbol-heading</code>: on symbol types in headings</li> <li><code>doc-symbol-toc</code>: on symbol types in the ToC</li> <li><code>doc-symbol-KIND</code>: specific to the kind of object (<code>module</code>, <code>class</code>, <code>function</code>, <code>method</code>, <code>attribute</code>)</li> </ul> </li> </ul> <p>Example with colorful labels</p> CSSResult <pre><code>.doc-label { border-radius: 15px; padding: 2px 8px; font-weight: bold; }\n.doc-label-special { background-color: #3330E4; color: white; }\n.doc-label-private { background-color: #F637EC; color: white; }\n.doc-label-property { background-color: #FBB454; color: black; }\n.doc-label-read-only { background-color: #FAEA48; color: black; }\n</code></pre> <p> special private property read-only </p>"},{"location":"usage/customization/#symbol-types","title":"Symbol types","text":""},{"location":"usage/customization/#colors","title":"Colors","text":"<p>You can customize the colors of the symbol types (see <code>show_symbol_type_heading</code> and <code>show_symbol_type_toc</code>) by overriding the values of our CSS variables, for example:</p> docs/css/mkdocstrings.css<pre><code>[data-md-color-scheme=\"default\"] {\n  --doc-symbol-parameter-fg-color: #df50af;\n  --doc-symbol-attribute-fg-color: #0079ff;\n  --doc-symbol-function-fg-color: #00dfa2;\n  --doc-symbol-method-fg-color: #00dfa2;\n  --doc-symbol-class-fg-color: #d1b619;\n  --doc-symbol-module-fg-color: #ff0060;\n\n  --doc-symbol-parameter-bg-color: #df50af1a;\n  --doc-symbol-attribute-bg-color: #0079ff1a;\n  --doc-symbol-function-bg-color: #00dfa21a;\n  --doc-symbol-method-bg-color: #00dfa21a;\n  --doc-symbol-class-bg-color: #d1b6191a;\n  --doc-symbol-module-bg-color: #ff00601a;\n}\n\n[data-md-color-scheme=\"slate\"] {\n  --doc-symbol-parameter-fg-color: #ffa8cc;\n  --doc-symbol-attribute-fg-color: #963fb8;\n  --doc-symbol-function-fg-color: #6d67e4;\n  --doc-symbol-method-fg-color: #6d67e4;\n  --doc-symbol-class-fg-color: #46c2cb;\n  --doc-symbol-module-fg-color: #f2f7a1;\n\n  --doc-symbol-parameter-bg-color: #ffa8cc1a;\n  --doc-symbol-attribute-bg-color: #963fb81a;\n  --doc-symbol-function-bg-color: #6d67e41a;\n  --doc-symbol-method-bg-color: #6d67e41a;\n  --doc-symbol-class-bg-color: #46c2cb1a;\n  --doc-symbol-module-bg-color: #f2f7a11a;\n}\n</code></pre> <p>The <code>[data-md-color-scheme=\"*\"]</code> selectors work with the Material for MkDocs theme. If you are using another theme, adapt the selectors to this theme if it supports light and dark themes, otherwise just override the variables at root level:</p> docs/css/mkdocstrings.css<pre><code>:root {\n  --doc-symbol-parameter-fg-color: #df50af;\n  --doc-symbol-attribute-fg-color: #0079ff;\n  --doc-symbol-function-fg-color: #00dfa2;\n  --doc-symbol-method-fg-color: #00dfa2;\n  --doc-symbol-class-fg-color: #d1b619;\n  --doc-symbol-module-fg-color: #ff0060;\n\n  --doc-symbol-parameter-bg-color: #df50af1a;\n  --doc-symbol-attribute-bg-color: #0079ff1a;\n  --doc-symbol-function-bg-color: #00dfa21a;\n  --doc-symbol-method-bg-color: #00dfa21a;\n  --doc-symbol-class-bg-color: #d1b6191a;\n  --doc-symbol-module-bg-color: #ff00601a;\n}\n</code></pre> <p>Preview</p> <p>     Try cycling through the themes to see the colors for each theme:     <code></code> <code></code> <code></code> <code></code> <code></code> <code></code> </p>"},{"location":"usage/customization/#names","title":"Names","text":"<p>You can also change the actual symbol names. For example, to use single letters instead of truncated types:</p> docs/css/mkdocstrings.css<pre><code>.doc-symbol-parameter::after {\n  content: \"P\";\n}\n\n.doc-symbol-attribute::after {\n  content: \"A\";\n}\n\n.doc-symbol-function::after {\n  content: \"F\";\n}\n\n.doc-symbol-method::after {\n  content: \"M\";\n}\n\n.doc-symbol-class::after {\n  content: \"C\";\n}\n\n.doc-symbol-module::after {\n  content: \"M\";\n}\n</code></pre> <p>Preview</p> <ul> <li>Parameter: <code></code></li> <li>Attribute: <code></code></li> <li>Function: <code></code></li> <li>Method: <code></code></li> <li>Class: <code></code></li> <li>Module: <code></code></li> </ul>"},{"location":"usage/customization/#templates","title":"Templates","text":"<p>Templates are organized into the following tree:</p> <pre><code>\ud83d\udcc1 theme/\n\u251c\u2500\u2500  attribute.html\n\u251c\u2500\u2500  attribute.html.jinja\n\u251c\u2500\u2500  backlinks.html.jinja\n\u251c\u2500\u2500  children.html\n\u251c\u2500\u2500  children.html.jinja\n\u251c\u2500\u2500  class.html\n\u251c\u2500\u2500  class.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc1 docstring/\n\u2502   \u251c\u2500\u2500  admonition.html\n\u2502   \u251c\u2500\u2500  admonition.html.jinja\n\u2502   \u251c\u2500\u2500  attributes.html\n\u2502   \u251c\u2500\u2500  attributes.html.jinja\n\u2502   \u251c\u2500\u2500  classes.html\n\u2502   \u251c\u2500\u2500  classes.html.jinja\n\u2502   \u251c\u2500\u2500  examples.html\n\u2502   \u251c\u2500\u2500  examples.html.jinja\n\u2502   \u251c\u2500\u2500  functions.html\n\u2502   \u251c\u2500\u2500  functions.html.jinja\n\u2502   \u251c\u2500\u2500  modules.html\n\u2502   \u251c\u2500\u2500  modules.html.jinja\n\u2502   \u251c\u2500\u2500  other_parameters.html\n\u2502   \u251c\u2500\u2500  other_parameters.html.jinja\n\u2502   \u251c\u2500\u2500  parameters.html\n\u2502   \u251c\u2500\u2500  parameters.html.jinja\n\u2502   \u251c\u2500\u2500  raises.html\n\u2502   \u251c\u2500\u2500  raises.html.jinja\n\u2502   \u251c\u2500\u2500  receives.html\n\u2502   \u251c\u2500\u2500  receives.html.jinja\n\u2502   \u251c\u2500\u2500  returns.html\n\u2502   \u251c\u2500\u2500  returns.html.jinja\n\u2502   \u251c\u2500\u2500  warns.html\n\u2502   \u251c\u2500\u2500  warns.html.jinja\n\u2502   \u251c\u2500\u2500  yields.html\n\u2502   \u2514\u2500\u2500  yields.html.jinja\n\u251c\u2500\u2500  docstring.html\n\u251c\u2500\u2500  docstring.html.jinja\n\u251c\u2500\u2500  expression.html\n\u251c\u2500\u2500  expression.html.jinja\n\u251c\u2500\u2500  function.html\n\u251c\u2500\u2500  function.html.jinja\n\u251c\u2500\u2500  labels.html\n\u251c\u2500\u2500  labels.html.jinja\n\u251c\u2500\u2500  language.html\n\u251c\u2500\u2500  language.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc1 languages/\n\u2502   \u251c\u2500\u2500  en.html\n\u2502   \u251c\u2500\u2500  en.html.jinja\n\u2502   \u251c\u2500\u2500  ja.html\n\u2502   \u251c\u2500\u2500  ja.html.jinja\n\u2502   \u251c\u2500\u2500  zh.html\n\u2502   \u2514\u2500\u2500  zh.html.jinja\n\u251c\u2500\u2500  module.html\n\u251c\u2500\u2500  module.html.jinja\n\u251c\u2500\u2500  signature.html\n\u251c\u2500\u2500  signature.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc1 summary/\n\u2502   \u251c\u2500\u2500  attributes.html\n\u2502   \u251c\u2500\u2500  attributes.html.jinja\n\u2502   \u251c\u2500\u2500  classes.html\n\u2502   \u251c\u2500\u2500  classes.html.jinja\n\u2502   \u251c\u2500\u2500  functions.html\n\u2502   \u251c\u2500\u2500  functions.html.jinja\n\u2502   \u251c\u2500\u2500  modules.html\n\u2502   \u2514\u2500\u2500  modules.html.jinja\n\u251c\u2500\u2500  summary.html\n\u2514\u2500\u2500  summary.html.jinja\n</code></pre> <p>See them in the repository. See the general mkdocstrings documentation to learn how to override them: https://mkdocstrings.github.io/theming/#templates.</p> <p>Each one of these templates extends a base version in <code>theme/_base</code>. Example:</p> theme/class.html<pre><code>{% extends \"_base/class.html\" %}\n</code></pre> <p>Some of these templates define Jinja blocks. allowing to customize only parts of a template without having to fully copy-paste it into your project:</p> templates/theme/class.html<pre><code>{% extends \"_base/class.html\" %}\n{% block contents %}\n  {{ block.super }}\n  Additional contents\n{% endblock contents %}\n</code></pre>"},{"location":"usage/customization/#available-blocks","title":"Available blocks","text":"<p>Only the templates for the Material for MkDocs provide Jinja blocks. The following tables show the block names, description, and the Jinja context available in their scope.</p>"},{"location":"usage/customization/#modulehtml","title":"<code>module.html</code>","text":"<ul> <li><code>heading</code>: The module heading.</li> <li><code>labels</code>: The module labels.</li> <li><code>contents</code>: The module contents: docstring and children blocks.</li> <li><code>docstring</code>: The module docstring.</li> <li><code>summary</code>: The automatic summaries of members.</li> <li><code>children</code>: The module children.</li> </ul> <p>Available context:</p> <ul> <li><code>config</code>: The handler configuration (dictionary).</li> <li><code>module</code>: The Module instance.</li> </ul>"},{"location":"usage/customization/#classhtml","title":"<code>class.html</code>","text":"<ul> <li><code>heading</code>: The class heading.</li> <li><code>labels</code>: The class labels.</li> <li><code>signature</code>: The class signature.</li> <li><code>contents</code>: The class contents: bases, docstring, source and children blocks.</li> <li><code>bases</code>: The class bases.</li> <li><code>docstring</code>: The class docstring.</li> <li><code>summary</code>: The automatic summaries of members.</li> <li><code>source</code>: The class source code.</li> <li><code>children</code>: The class children.</li> </ul> <p>Available context:</p> <ul> <li><code>config</code>: The handler configuration (dictionary).</li> <li><code>class</code>: The Class instance.</li> </ul>"},{"location":"usage/customization/#functionhtml","title":"<code>function.html</code>","text":"<ul> <li><code>heading</code>: The function heading.</li> <li><code>labels</code>: The function labels.</li> <li><code>signature</code>: The function signature.</li> <li><code>contents</code>: The function contents: docstring and source blocks.</li> <li><code>docstring</code>: The function docstring.</li> <li><code>source</code>: The function source code.</li> </ul> <p>Available context:</p> <ul> <li><code>config</code>: The handler configuration (dictionary).</li> <li><code>function</code>: The Function instance.</li> </ul>"},{"location":"usage/customization/#attributehtml","title":"<code>attribute.html</code>","text":"<ul> <li><code>heading</code>: The attribute heading.</li> <li><code>labels</code>: The attribute labels.</li> <li><code>signature</code>: The attribute signature.</li> <li><code>contents</code>: The attribute contents: docstring block.</li> <li><code>docstring</code>: The attribute docstring.</li> </ul> <p>Available context:</p> <ul> <li><code>config</code>: The handler configuration (dictionary).</li> <li><code>attribute</code>: The Attribute instance.</li> </ul>"},{"location":"usage/customization/#docstring-sections","title":"Docstring sections","text":"<p>In <code>docstring/attributes.html</code>, <code>docstring/functions.html</code>, <code>docstring/classes.html</code>, <code>docstring/modules.html</code>, <code>docstring/other_parameters.html</code>, <code>docstring/parameters.html</code>, <code>docstring/raises.html</code>, <code>docstring/receives.html</code>, <code>docstring/returns.html</code>, <code>docstring/warns.html</code>, and <code>docstring/yields.html</code>:</p> <ul> <li><code>table_style</code>: The section as a table.</li> <li><code>list_style</code>: The section as a list.</li> <li><code>spacy_style</code>: The section as a Spacy table.</li> </ul> <p>Available context:</p> <ul> <li><code>section</code>: The DocstringSection instance (see <code>DocstringSection*</code> subclasses).</li> </ul>"},{"location":"usage/customization/#syntax-highlight-in-signatures","title":"Syntax highlight in signatures","text":"<p>You can customize the colors in syntax highlighted signatures. If you are using the Material for MkDocs theme, here are some customization examples:</p> <pre><code>/* Fancier color for operators such as * and |. */\n.doc-signature .o {\n  color: var(--md-code-hl-special-color);\n}\n\n/* Fancier color for constants such as None, True, and False. */\n.doc-signature .kc {\n  color: var(--md-code-hl-constant-color);\n}\n\n/* Fancier color for built-in types (only useful when cross-references are used). */\n.doc-signature .n &gt; a[href^=\"https://docs.python.org/\"][href*=\"/functions.html#\"],\n.doc-signature .n &gt; a[href^=\"https://docs.python.org/\"][href*=\"/stdtypes.html#\"] {\n  color: var(--md-code-hl-constant-color);\n}\n</code></pre> <p>For other themes, use their own CSS variables, or use plain colors such as <code>violet</code> or <code>#2987f2</code>.</p>"},{"location":"usage/customization/#style-recommendations","title":"Style recommendations","text":""},{"location":"usage/customization/#material","title":"Material","text":"<p>Here are some CSS rules for the Material for MkDocs theme:</p> <pre><code>/* Indentation. */\ndiv.doc-contents:not(.first) {\n  padding-left: 25px;\n  border-left: .05rem solid var(--md-typeset-table-color);\n}\n\n/* Mark external links as such. */\na.external::after,\na.autorefs-external::after {\n  /* https://primer.style/octicons/arrow-up-right-24 */\n  mask-image: url('data:image/svg+xml,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"&gt;&lt;path d=\"M18.25 15.5a.75.75 0 00.75-.75v-9a.75.75 0 00-.75-.75h-9a.75.75 0 000 1.5h7.19L6.22 16.72a.75.75 0 101.06 1.06L17.5 7.56v7.19c0 .414.336.75.75.75z\"&gt;&lt;/path&gt;&lt;/svg&gt;');\n  -webkit-mask-image: url('data:image/svg+xml,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"&gt;&lt;path d=\"M18.25 15.5a.75.75 0 00.75-.75v-9a.75.75 0 00-.75-.75h-9a.75.75 0 000 1.5h7.19L6.22 16.72a.75.75 0 101.06 1.06L17.5 7.56v7.19c0 .414.336.75.75.75z\"&gt;&lt;/path&gt;&lt;/svg&gt;');\n  content: ' ';\n\n  display: inline-block;\n  vertical-align: middle;\n  position: relative;\n\n  height: 1em;\n  width: 1em;\n  background-color: currentColor;\n}\n\na.external:hover::after,\na.autorefs-external:hover::after {\n  background-color: var(--md-accent-fg-color);\n}\n\n/* Tree-like output for backlinks. */\n.doc-backlink-list {\n  --tree-clr: var(--md-default-fg-color);\n  --tree-font-size: 1rem;\n  --tree-item-height: 1;\n  --tree-offset: 1rem;\n  --tree-thickness: 1px;\n  --tree-style: solid;\n  display: grid;\n  list-style: none !important;\n}\n\n.doc-backlink-list li &gt; span:first-child {\n  text-indent: .3rem;\n}\n.doc-backlink-list li {\n  padding-inline-start: var(--tree-offset);\n  border-left: var(--tree-thickness) var(--tree-style) var(--tree-clr);\n  position: relative;\n  margin-left: 0 !important;\n\n  &amp;:last-child {\n    border-color: transparent;\n  }\n  &amp;::before{\n    content: '';\n    position: absolute;\n    top: calc(var(--tree-item-height) / 2 * -1 * var(--tree-font-size) + var(--tree-thickness));\n    left: calc(var(--tree-thickness) * -1);\n    width: calc(var(--tree-offset) + var(--tree-thickness) * 2);\n    height: calc(var(--tree-item-height)  * var(--tree-font-size));\n    border-left: var(--tree-thickness) var(--tree-style) var(--tree-clr);\n    border-bottom: var(--tree-thickness) var(--tree-style) var(--tree-clr);\n  }\n  &amp;::after{\n    content: '';\n    position: absolute;\n    border-radius: 50%;\n    background-color: var(--tree-clr);\n    top: calc(var(--tree-item-height) / 2 * 1rem);\n    left: var(--tree-offset) ;\n    translate: calc(var(--tree-thickness) * -1) calc(var(--tree-thickness) * -1);\n  }\n}\n</code></pre> <p></p>"},{"location":"usage/customization/#readthedocs","title":"ReadTheDocs","text":"<p>Here are some CSS rules for the built-in ReadTheDocs theme:</p> <pre><code>/* Indentation. */\ndiv.doc-contents:not(.first) {\n  padding-left: 25px;\n  border-left: .05rem solid rgba(200, 200, 200, 0.2);\n}\n</code></pre>"},{"location":"usage/extensions/","title":"Extensions","text":""},{"location":"usage/extensions/#work-in-progress","title":"Work in Progress!","text":"<p>The Python handler supports extensions through mkdocstrings' handler extensions.</p> <p>Specifically, additional templates can be added to the handler, and Griffe extensions can instruct the handler to use a particular template for a particular object by setting a value in the Griffe object's <code>extra</code> dictionary:</p> griffe_extension.py<pre><code>obj = ...  # get a reference to a Griffe object\nif \"mkdocstrings\" not in obj.extra:\n    obj.extra[\"mkdocstrings\"] = {}\nobj.extra[\"mkdocstrings\"][\"template\"] = \"template_name.html\"\n</code></pre>"},{"location":"usage/configuration/docstrings/","title":"Docstrings options","text":""},{"location":"usage/configuration/docstrings/#docstring_style","title":"<code>docstring_style</code>","text":"<ul> <li> Type <code>str</code> <code>\"google\"</code></li> </ul> <p>The docstring style to expect when parsing docstrings.</p> <p>Possible values:</p> <ul> <li><code>\"google\"</code>: see Google style.</li> <li><code>\"numpy\"</code>: see Numpy style.</li> <li><code>\"sphinx\"</code>: see Sphinx style.</li> <li><code>None</code> (<code>null</code> or <code>~</code> in YAML): no style at all, parse as regular text.</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          docstring_style: google\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_style: numpy\n</code></pre> <p>The style is applied to the specified object only, not its members.</p> <p> Local <code>docstring_style</code> options (in <code>:::</code> instructions) will only be applied to the specified object, and not its members. Instead of changing the style when rendering, we strongly recommend to set the right style as early as possible, for example by using the auto-style (sponsors only), or with a custom Griffe extension</p> <p>Preview</p> <p>Every style gets rendered the same way. Here are some docstring examples.</p> GoogleNumpySphinx <pre><code>def greet(name: str) -&gt; str:\n    \"\"\"Greet someone.\n\n    Parameters:\n        name: The name of the person to greet.\n\n    Returns:\n        A greeting message.\n    \"\"\"\n    return f\"Hello {name}!\"\n</code></pre> <pre><code>def greet(name: str) -&gt; str:\n    \"\"\"Greet someone.\n\n    Parameters\n    ----------\n    name\n        The name of the person to greet.\n\n    Returns\n    -------\n    A greeting message.\n    \"\"\"\n    return f\"Hello {name}!\"\n</code></pre> <pre><code>def greet(name: str) -&gt; str:\n    \"\"\"Greet someone.\n\n    :param name: The name of the person to greet.\n    :return: A greeting message.\n    \"\"\"\n    return f\"Hello {name}!\"\n</code></pre> <p></p>"},{"location":"usage/configuration/docstrings/#docstring_options","title":"<code>docstring_options</code><code>PrintOK</code><code>PrintOK</code>","text":"<ul> <li> Type <code>dict</code> <code>{}</code></li> </ul> <p>The options for the docstring parser.</p> <ul> <li>Google-style options</li> <li>Numpydoc-style options</li> </ul> <p>The Sphinx style does not offer any option.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          docstring_options:\n            ignore_init_summary: false\n            trim_doctest_flags: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_options:\n        ignore_init_summary: true\n        trim_doctest_flags: false\n</code></pre> <pre><code>class PrintOK:\n    \"\"\"Class docstring.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the instance.\n\n        Examples:\n            &gt;&gt;&gt; PrintOK()  # doctest: +NORMALIZE_WHITESPACE\n            ok\n        \"\"\"\n        print(\"ok\")\n</code></pre> <p>Preview</p> Ignore init summary, trim doctest flagsKeep init summary and doctest flags <p>Class docstring.</p> <code>__init__</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PrintOK()\nok\n</code></pre> <p>Class docstring.</p> <code>__init__</code> <p>Initialize the instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PrintOK()  # doctest: +NORMALIZE_WHITESPACE\nok\n</code></pre> <p></p>"},{"location":"usage/configuration/docstrings/#docstring_section_style","title":"<code>docstring_section_style</code>","text":"<ul> <li> Type <code>str</code> <code>\"table\"</code></li> </ul> <p>The style used to render docstring sections.</p> <p>A section is a block of text that has a special meaning in a docstring. There are sections for documenting attributes of an object, parameters of a function, exceptions raised by a function, the return value of a function, etc.</p> <p>Sections are parsed as structured data and can therefore be rendered in different ways. Possible values:</p> <ul> <li><code>\"table\"</code>: a simple table, usually with type, name and description columns</li> <li><code>\"list\"</code>: a simple list, akin to what you get with the ReadTheDocs Sphinx theme</li> <li><code>\"spacy\"</code>: a poor implementation of the amazing tables in Spacy's documentation</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          docstring_section_style: table\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_section_style: list\n</code></pre> <p>Preview</p> TableListSpacy <p>Tables work well when you have lots of items with short names, type annotations, descriptions, etc.. With longer strings, the columns risk getting squished horizontally. In that case, the Spacy tables can help.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>threshold</code> Threshold for something. required <code>bool</code> <code>flag</code> Enable something. <code>False</code> <p>Other Parameters:</p> Type Name Description Default <code>list[int | float]</code> <code>gravity_forces</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. required <code>VacuumType | Literal[\"regular\"]</code> <code>vacuum_type</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <code>VacuumType.PLASMA</code> <p>Lists work well whatever the length of names, type annotations, descriptions, etc.</p> <p>Parameters:</p> <ul> <li><code>threshold</code> (<code>int</code>) \u2014 Threshold for something.</li> <li><code>flag</code> (<code>bool</code>) \u2014 Enable something.</li> </ul> <p>Other Parameters:</p> <ul> <li><code>gravity_forces</code> (<code>list[int | float]</code>) \u2014 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</li> <li><code>vacuum_type</code> (<code>VacuumType | Literal[\"regular\"]</code>) \u2014 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</li> </ul> <p>Spacy tables work better than regular tables with longer names, type annotations, descriptions, etc., by reserving more horizontal space on the second column.</p> <p>Parameters:</p> Name Description <code>threshold</code> Threshold for something.TYPE: <code>int</code> DEFAULT: required <code>flag</code> Enable something.TYPE: <code>bool</code> DEFAULT: <code>False</code> <p>Other Parameters:</p> Name Description <code>gravity_forces</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.TYPE: <code>list[int | float]</code> DEFAULT: required <code>vacuum_type</code> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.TYPE:<code>VacuumType | Literal[\"regular\"]</code> DEFAULT: <code>VacuumType.PLASMA</code> <p></p>"},{"location":"usage/configuration/docstrings/#merge_init_into_class","title":"<code>merge_init_into_class</code><code>Thing(value=0)</code><code>Thing</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p> <p>By default, only the class name is rendered in headings. When merging, the <code>__init__</code> method parameters are added after the class name, like a signature, and the <code>__init__</code> method docstring is appended to the class' docstring. This option is well used in combination with the <code>ignore_init_summary</code> docstring option, to discard the first line of the <code>__init__</code> docstring which is not often useful.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          docstring_options:\n            ignore_init_summary: false\n          merge_init_into_class: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      docstring_options:\n        ignore_init_summary: true\n      merge_init_into_class: true\n</code></pre> <pre><code>class Thing:\n    \"\"\"A class for things.\"\"\"\n\n    def __init__(self, value: int = 0):\n        \"\"\"Initialize a thing.\n\n        Parameters:\n            value: The thing's value.\n        \"\"\"\n        self.value = value\n</code></pre> <p>Preview</p> Merged, summary discardedUnmerged, summary kept <p>Class docstring.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>value</code> The thing's value. <code>0</code> <p>Class docstring.</p> <code>__init__(value=0)</code> <p>Initialize a thing.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>value</code> The thing's value. <code>0</code> <p></p>"},{"location":"usage/configuration/docstrings/#relative_crossrefs","title":"<code>relative_crossrefs</code>","text":"<p> Sponsors only \u2014  Insiders 1.9.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to enable the relative-crossref syntax.</p> <p>The relative-crossref syntax lets you reference the current object or its parent by prefixing a crossref identifier with dots. For example, to cross-reference the current object's <code>name</code> member, you can write <code>[link to name attribute][.name]</code>. The \"current object\" is the object containing the docstring being rendered.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          relative_crossrefs: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      relative_crossrefs: true\n</code></pre> <p>Examples</p> pkg/module.py<pre><code>\"\"\"Summary.\n\n- Link to [`module`][.].\n- Link to [`module_attribute`][.module_attribute].\n- Link to [`Class`][.Class].\n- Link to [`class_attribute`][.Class.class_attribute].\n- Link to [`instance_attribute`][.Class.instance_attribute].\n- Link to [`method`][.Class.method].\n\"\"\"\n\nmodule_attribute = 0\n\"\"\"Summary.\n\n- Link to [`module`][..].\n- Link to [`module_attribute`][.].\n- Link to [`Class`][..Class].\n- Link to [`class_attribute`][..Class.class_attribute].\n- Link to [`instance_attribute`][..Class.instance_attribute].\n- Link to [`method`][..Class.method].\n\"\"\"\n\nclass Class:\n    \"\"\"Summary.\n\n    - Link to [`module`][..].\n    - Link to [`module_attribute`][..module_attribute].\n    - Link to [`Class`][.].\n    - Link to [`class_attribute`][.class_attribute].\n    - Link to [`instance_attribute`][.instance_attribute].\n    - Link to [`method`][.method].\n    \"\"\"\n\n    class_attribute = 0\n    \"\"\"Summary.\n\n    - Link to [`module`][...].\n    - Link to [`module_attribute`][...module_attribute].\n    - Link to [`Class`][..].\n    - Link to [`class_attribute`][.].\n    - Link to [`instance_attribute`][..instance_attribute].\n    - Link to [`method`][..method].\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Summary.\n\n        - Link to [`module`][...].\n        - Link to [`module_attribute`][...module_attribute].\n        - Link to [`Class`][..].\n        - Link to [`class_attribute`][..class_attribute].\n        - Link to [`instance_attribute`][..instance_attribute].\n        - Link to [`method`][..method].\n        \"\"\"\n        self.instance_attribute = 0\n        \"\"\"Summary.\n\n        - Link to [`module`][...].\n        - Link to [`module_attribute`][...module_attribute].\n        - Link to [`Class`][..].\n        - Link to [`class_attribute`][..class_attribute].\n        - Link to [`instance_attribute`][.].\n        - Link to [`method`][..method].\n        \"\"\"\n\n    def method(self):\n        \"\"\"Summary.\n\n        - Link to [`module`][...].\n        - Link to [`module_attribute`][...module_attribute].\n        - Link to [`Class`][..].\n        - Link to [`class_attribute`][..class_attribute].\n        - Link to [`instance_attribute`][..instance_attribute].\n        - Link to [`method`][.].\n        \"\"\"\n</code></pre> <p>There is an alternative, third-party Python handler that handles relative references: mkdocstrings-python-xref.</p> <p></p>"},{"location":"usage/configuration/docstrings/#scoped_crossrefs","title":"<code>scoped_crossrefs</code>","text":"<p> Sponsors only \u2014  Insiders 1.9.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to enable scoped cross-references.</p> <p>With scoped cross-references, you can write identifiers as if you wanted to access them from the current object's scope. The scoping rules do not exactly match Python's: you can reference members and siblings too, without prefixing with <code>self.</code> or <code>cls.</code>.</p> <p>The following order is applied when resolving a name in a given scope:</p> <ol> <li>member of the current object</li> <li>parent class</li> <li>repeat 1-2 within parent's scope</li> </ol> <p>In practice, it means that the name is first looked up in members, then it is compared against the parent name (only if it's a class), then it is looked up in siblings. It continues climbing up the object tree until there's no parent, in which case it raises a name resolution error.</p> <p>Cross-referencing an imported object will directly link to this object if the objects inventory of the project it comes from was loaded. You won't be able to cross-reference it within your own documentation with scoped references, if you happen to be rendering this external object too. In that case, you can use an absolute reference or a relative one instead.</p> <p>Another limitation is that you won't be able to reference an external package if its name can be resolved in the current object's scope.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          scoped_crossrefs: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      scoped_crossrefs: true\n</code></pre> <p>Examples</p> pkg/module.py<pre><code>\"\"\"Summary.\n\n- Link to [`module_attribute`][module_attribute].\n- Link to [`Class`][Class].\n- Link to [`class_attribute`][Class.class_attribute].\n- Link to [`instance_attribute`][Class.instance_attribute].\n- Link to [`method`][Class.method].\n\"\"\"\n\nmodule_attribute = 0\n\"\"\"Summary.\n\n- Link to [`Class`][Class].\n- Link to [`class_attribute`][Class.class_attribute].\n- Link to [`instance_attribute`][Class.instance_attribute].\n- Link to [`method`][Class.method].\n\"\"\"\n\nclass Class:\n    \"\"\"Summary.\n\n    - Link to [`module_attribute`][module_attribute].\n    - Link to [`class_attribute`][class_attribute].\n    - Link to [`instance_attribute`][instance_attribute].\n    - Link to [`method`][method].\n    \"\"\"\n\n    class_attribute = 0\n    \"\"\"Summary.\n\n    - Link to [`module_attribute`][module_attribute].\n    - Link to [`Class`][Class].\n    - Link to [`instance_attribute`][instance_attribute].\n    - Link to [`method`][method].\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Summary.\n\n        - Link to [`module_attribute`][module_attribute].\n        - Link to [`Class`][Class].\n        - Link to [`class_attribute`][class_attribute].\n        - Link to [`instance_attribute`][instance_attribute].\n        - Link to [`method`][method].\n        \"\"\"\n        self.instance_attribute = 0\n        \"\"\"Summary.\n\n        - Link to [`module_attribute`][module_attribute].\n        - Link to [`Class`][Class].\n        - Link to [`class_attribute`][class_attribute].\n        - Link to [`method`][method].\n        \"\"\"\n\n    def method(self):\n        \"\"\"Summary.\n\n        - Link to [`module_attribute`][module_attribute].\n        - Link to [`Class`][Class].\n        - Link to [`class_attribute`][class_attribute].\n        - Link to [`instance_attribute`][instance_attribute].\n        \"\"\"\n</code></pre> <p></p>"},{"location":"usage/configuration/docstrings/#show_if_no_docstring","title":"<code>show_if_no_docstring</code><code>function_without_docstring</code><code>function_with_docstring</code><code>ClassWithoutDocstring</code><code>function_with_docstring</code><code>ClassWithoutDocstring</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the object heading even if it has no docstring or children with docstrings.</p> <p>Without an explicit list of <code>members</code>, members are selected based on <code>filters</code>, and then filtered again to keep only those with docstrings. Checking if a member has a docstring is done recursively: if at least one of its direct or indirect members (lower in the tree) has a docstring, the member is rendered. If the member does not have a docstring, and none of its members have a docstring, it is excluded.</p> <p>With this option you can tell the Python handler to skip the docstring check.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_if_no_docstring: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_if_no_docstring: true\n</code></pre> <pre><code>def function_without_docstring():\n    ...\n\n\ndef function_with_docstring():\n    \"\"\"Hello.\"\"\"\n\n\nclass ClassWithoutDocstring:\n    def method_without_docstring(self):\n        ...\n\n    def method_with_docstring(self):\n        \"\"\"Hello.\"\"\"\n</code></pre> <p>Preview</p> ShowDon't show <p>Hello.</p> <code>method_without_docstring</code> <code>method_with_docstring</code> <p>Hello.</p> <p>Hello.</p> <code>method_with_docstring</code> <p>Hello.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_attributes","title":"<code>show_docstring_attributes</code><code>Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Attributes\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_attributes: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_attributes: false\n</code></pre> <pre><code>class Class:\n    \"\"\"Summary.\n\n    Attributes:\n        attr: Some attribute.\n    \"\"\"\n\n    attr: int = 1\n</code></pre> <p>Preview</p> With attributesWithout attributes <p>Summary.</p> <p>Attributes:</p> Type Name Description <code>int</code> <code>attr</code> Some attribute. <p>Summary.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_functions","title":"<code>show_docstring_functions</code>modulemodule","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Functions\" or \"Methods\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_functions: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_functions: false\n</code></pre> <pre><code>\"\"\"Summary.\n\nFunctions:\n    foo: Some function.\n\"\"\"\n\n\ndef foo():\n    ...\n\n\nclass Class:\n    \"\"\"Summary.\n\n    Methods:\n        bar: Some method.\n    \"\"\"\n\n    def bar(self):\n        ...\n</code></pre> <p>Preview</p> With functionsWithout functions <p>Summary.</p> <p>Functions:</p> Name Description <code>foo</code> Some function. <code>Class</code> <p>Summary.</p> <p>Methods:</p> Name Description <code>bar</code> Some method. <p>Summary.</p> <code>Class</code> <p>Summary.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_classes","title":"<code>show_docstring_classes</code>modulemodule","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Classes\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_classes: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_classes: false\n</code></pre> <pre><code>\"\"\"Summary.\n\nClasses:\n    Class: Some class.\n\"\"\"\n\n\nclass Class:\n    \"\"\"Summary.\"\"\"\n</code></pre> <p>Preview</p> With classesWithout classes <p>Summary.</p> <p>Classes:</p> Name Description <code>Class</code> Some class. <code>Class</code> <p>Summary.</p> <p>Summary.</p> <code>Class</code> <p>Summary.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_modules","title":"<code>show_docstring_modules</code>modulemodule","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Modules\" sections of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_modules: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_modules: false\n</code></pre> <pre><code>\ud83d\udcc1 module/\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500  submodule.py\n</code></pre> module/__init__.py<pre><code>\"\"\"Summary.\n\nModules:\n    submodule: Some module.\n\"\"\"\n</code></pre> <p>Preview</p> With modulesWithout modules <p>Summary.</p> <p>Modules:</p> Name Description <code>submodule</code> Some module. <p>Summary.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_description","title":"<code>show_docstring_description</code><code>Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the textual blocks (including admonitions) of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_description: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_description: false\n</code></pre> <pre><code>class Class:\n    \"\"\"Summary.\n\n    Long description.\n\n    Warning: Deprecated\n        Stop using this class.\n\n    Attributes:\n        attr: Some attribute.\n    \"\"\"\n\n    attr: int = 1\n</code></pre> <p>Preview</p> With description blocksWithout description blocks <p>Summary.</p> <p>Long description.</p> Deprecated<p>Stop using this class.</p> <p>Attributes:</p> Type Name Description <code>int</code> <code>attr</code> Some attribute. <p>Attributes:</p> Type Name Description <code>int</code> <code>attr</code> Some attribute. <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_examples","title":"<code>show_docstring_examples</code><code>print_hello</code><code>print_hello</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Examples\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_examples: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_examples: false\n</code></pre> <pre><code>def print_hello():\n    \"\"\"Print hello.\n\n    Examples:\n        &gt;&gt;&gt; print(\"hello\")\n        hello\n    \"\"\"\n    print(\"hello\")\n</code></pre> <p>Preview</p> With examplesWithout examples <p>Print hello.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(\"hello\")\nhello\n</code></pre> <p>Print hello.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_other_parameters","title":"<code>show_docstring_other_parameters</code><code>do_something</code><code>do_something</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Other Parameters\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_other_parameters: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_other_parameters: false\n</code></pre> <pre><code>def do_something(**kwargs):\n    \"\"\"Do something.\n\n    Other parameters:\n        whatever (int): Some integer.\n    \"\"\"\n</code></pre> <p>Preview</p> With other parametersWithout other parameters <p>Do something.</p> <p>Other parameters:</p> Type Name Description <code>int</code> <code>whatever</code> Some integer. <p>Do something.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_parameters","title":"<code>show_docstring_parameters</code><code>do_something</code><code>do_something</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Parameters\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_parameters: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_parameters: false\n</code></pre> <pre><code>def do_something(whatever: int = 0):\n    \"\"\"Do something.\n\n    Parameters:\n        whatever: Some integer.\n    \"\"\"\n</code></pre> <p>Preview</p> With parametersWithout parameters <p>Do something.</p> <p>Parameters:</p> Type Name Description Default <code>int</code> <code>whatever</code> Some integer. <code>0</code> <p>Do something.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_raises","title":"<code>show_docstring_raises</code><code>raise_runtime_error</code><code>raise_runtime_error</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Raises\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_raises: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_raises: false\n</code></pre> <pre><code>def raise_runtime_error():\n    \"\"\"Raise a runtime error.\n\n    Raises:\n        RuntimeError: Not good.\n    \"\"\"\n    raise RuntimeError\n</code></pre> <p>Preview</p> With exceptionsWithout exceptions <p>Raise a runtime error.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> Not good. <p>Raise a runtime error.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_receives","title":"<code>show_docstring_receives</code><code>iter_skip</code><code>iter_skip</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Receives\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_receives: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_receives: false\n</code></pre> <pre><code>def iter_skip(\n    iterable: Iterable[T],\n    initial_skip: int = 0,\n) -&gt; Generator[T, int, None]:\n    \"\"\"Iterate and skip elements.\n\n    Receives:\n        skip: Number of elements to skip.\n    \"\"\"\n    skip = initial_skip\n    for element in iterable:\n        if skip or 0 &gt; 0:\n            skip -= 1\n        else:\n            skip = yield element\n</code></pre> <p>Preview</p> With received valuesWithout received values <p>Iterate and skip elements.</p> <p>Receives:</p> Type Description <code>int</code> Number of elements to skip. <p>Iterate and skip elements.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_returns","title":"<code>show_docstring_returns</code><code>rand</code><code>rand</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Returns\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_returns: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_returns: false\n</code></pre> <pre><code>def rand() -&gt; int:\n    \"\"\"Return a random number.\n\n    Returns:\n        A random number.\n    \"\"\"\n    return random.randint(0, 1000)\n</code></pre> <p>Preview</p> With return valueWithout return value <p>Return a random number.</p> <p>Returns:</p> Type Description <code>int</code> A random number. <p>Return a random number.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_warns","title":"<code>show_docstring_warns</code><code>warn</code><code>warn</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Warns\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_warns: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_warns: false\n</code></pre> <pre><code>def warn():\n    \"\"\"Warn user.\n\n    Warns:\n        UserWarning: When this is inappropriate.\n    \"\"\"\n    warnings.warn(UserWarning(\"This is inappropriate\"))\n</code></pre> <p>Preview</p> With warningsWithout warnings <p>Warn user.</p> <p>Warns:</p> Type Description <code>UserWarning</code> When this is inappropriate. <p>Warn user.</p> <p></p>"},{"location":"usage/configuration/docstrings/#show_docstring_yields","title":"<code>show_docstring_yields</code><code>iter_skip</code><code>iter_skip</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to render the \"Yields\" section of docstrings.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_docstring_yields: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_docstring_yields: false\n</code></pre> <pre><code>def iter_skip(\n    iterable: Iterable[T],\n    initial_skip: int = 0,\n) -&gt; Generator[T, int, None]:\n    \"\"\"Iterate and skip elements.\n\n    Yields:\n        Elements of the iterable.\n    \"\"\"\n    skip = initial_skip\n    for element in iterable:\n        if skip or 0 &gt; 0:\n            skip -= 1\n        else:\n            skip = yield element\n</code></pre> <p>Preview</p> With yielded valuesWithout yielded values <p>Iterate and skip elements.</p> <p>Yields:</p> Type Description <code>T</code> Elements of the iterable. <p>Iterate and skip elements.</p>"},{"location":"usage/configuration/general/","title":"General options","text":""},{"location":"usage/configuration/general/#allow_inspection","title":"<code>allow_inspection</code><code>SomeClass</code><code>SomeClass</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to allow inspecting modules (importing them) when it is not possible to visit them (parse their source code).</p> <p>When loading data for a given package, Griffe discovers every Python module, compiled or not, and inspects or visits them accordingly.</p> <p>If you have compiled modules but also provide stubs for them, you might want to disable the inspection of these modules, because inspection picks up many more members, and sometimes the collected data is inaccurate (depending on the tool that was used to compile the module) or too low-level/technical for API documentation.</p> <p>See also <code>force_inspection</code>.</p> <p>Packages are loaded only once.</p> <p> When mkdocstrings-python collects data from a Python package (thanks to Griffe), it collects the entire package and caches it. Next time an object from the same package is rendered, the package is retrieved from the cache and not collected again. The <code>allow_inspection</code> option will therefore only have an effect the first time a package is collected, and will do nothing for objects rendered afterwards.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          allow_inspection: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      allow_inspection: false\n</code></pre> <p>Preview</p> With inspectionWithout inspection <p>Docstring of the class.</p> <code>__eq__</code> <p>Method docstring.</p> <code>__weakref__</code> <p>Method docstring.</p> <code>documented_method</code> <p>Method docstring.</p> <p>Docstring of the class.</p> <code>documented_method</code> <p>Method docstring.</p> <p></p>"},{"location":"usage/configuration/general/#backlinks","title":"<code>backlinks</code>","text":"<p> Sponsors only \u2014  Insiders 1.10.0</p> <ul> <li> Type <code>Literal[\"flat\", \"tree\", False]</code> <code>False</code></li> </ul> <p>The <code>backlinks</code> option enables rendering of backlinks within your API documentation.</p> <p>When an arbitrary section of your documentation links to an API symbol, this link will be collected as a backlink, and rendered below your API symbol. In short, the API symbol will link back to the section that links to it. Such backlinks will help your users navigate the documentation, as they will immediately which functions return a specific symbol, or where a specific symbol is accepted as parameter, etc..</p> <p>Each backlink is a list of breadcrumbs that represent the navigation, from the root page down to the given section.</p> <p>The available styles for rendering backlinks are <code>flat</code> and <code>tree</code>.</p> <ul> <li><code>flat</code> will render backlinks as a single-layer list. This can lead to repetition of breadcrumbs.</li> <li><code>tree</code> will combine backlinks into a tree, to remove repetition of breadcrumbs.</li> </ul> <p>Global-only option.</p> <p> For now, the option only works when set globally in <code>mkdocs.yml</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          backlinks: tree\n</code></pre> <p>Preview</p> FlatTree <p></p> <p></p> <p></p>"},{"location":"usage/configuration/general/#extensions","title":"<code>extensions</code>","text":"<ul> <li> Type <code>list[str | dict[str, dict[str, Any]]]</code> <code>[]</code></li> </ul> <p>The <code>extensions</code> option lets you enable Griffe extensions, which enhance or modify the data collected from Python sources (or compiled modules).</p> <p>Elements in the list can be strings or dictionaries.</p> <p>Strings denote the path to an extension module, like <code>griffe_typingdoc</code>, or to an extension class directly, like <code>griffe_typingdoc.TypingDocExtension</code>. When using a module path, all extensions within that module will be loaded and enabled. Strings can also be the path to a Python module, and a class name separated with <code>:</code>, like <code>scripts/griffe_extensions.py</code> or <code>scripts/griffe_extensions.py:MyExtension</code>.</p> <p>Dictionaries have a single key, which is the module/class path (as a dot-separated qualifier or file path and colon-separated class name, like above), and its value is another dictionary specifying options that will be passed when to class constructors when instantiating extensions.</p> <p>Packages are loaded only once.</p> <p> When mkdocstrings-python collects data from a Python package (thanks to Griffe), it collects the entire package and caches it. Next time an object from the same package is rendered, the package is retrieved from the cache and not collected again. Only the extensions specified the first time the package is loaded will be used. You cannot use a different set of extensions for specific objects rendered afterwards, and you cannot deactivate extensions for objects rendered afterwards either.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extensions:\n          - griffe_sphinx\n          - griffe_pydantic: {schema: true}\n          - scripts/exts.py:DynamicDocstrings:\n              paths: [mypkg.mymod.myobj]\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: your_package.your_module.your_func\n    options:\n      extensions:\n      - griffe_typingdoc\n</code></pre> <p></p>"},{"location":"usage/configuration/general/#extra","title":"<code>extra</code>","text":"<ul> <li> Type <code>dict</code> <code>{}</code></li> </ul> <p>The <code>extra</code> option lets you inject additional variables into the Jinja context used when rendering templates. You can then use this extra context in your overridden templates.</p> <p>Local <code>extra</code> options will be merged into the global <code>extra</code> option:</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          extra:\n            hello: world\n</code></pre> in docs/some_page.md (local configuration)<pre><code>::: your_package.your_module.your_func\n    options:\n      extra:\n        foo: bar\n</code></pre> <p>...will inject both <code>hello</code> and <code>foo</code> into the Jinja context when rendering <code>your_package.your_module.your_func</code>.</p> <p>Warning</p> <p>Previously, extra options were supported directly under the <code>options</code> key.</p> <pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          hello: world\n</code></pre> <p>Now that we introduced optional validation of options and automatic JSON schema generation thanks to Pydantic, we require extra options to be put under <code>options.extra</code>. Extra options directly under <code>options</code> are still supported, but deprecated, and will emit deprecation warnings. Support will be removed in a future version of mkdocstrings-python.</p> <p></p>"},{"location":"usage/configuration/general/#find_stubs_package","title":"<code>find_stubs_package</code><code>your_func</code><code>your_func</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>When looking for documentation specified in autodoc instructions (<code>::: identifier</code>), also look for the stubs package as defined in PEP 561 if it exists. This is useful when most of your documentation is separately provided by such a package and not inline in your main package.</p> <p>Packages are loaded only once.</p> <p> When mkdocstrings-python collects data from a Python package (thanks to Griffe), it collects the entire package and caches it. Next time an object from the same package is rendered, the package is retrieved from the cache and not collected again. The <code>find_stubs_package</code> option will therefore only have an effect the first time a package is collected, and will do nothing for objects rendered afterwards.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          find_stubs_package: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: your_package.your_module.your_func\n    options:\n      find_stubs_package: true\n</code></pre> your_package/your_module.py<pre><code>def your_func(a, b):\n    # Function code\n    ...\n\n# rest of your code\n</code></pre> your_package-stubs/your_module.pyi<pre><code>def your_func(a: int, b: str):\n    \"\"\"\n    &lt;Function docstring&gt;\n    \"\"\"\n    ...\n\n# rest of your code\n</code></pre> <p>Preview</p> With find_stubs_packageWithout find_stubs_package <p>Function docstring</p> <p></p>"},{"location":"usage/configuration/general/#force_inspection","title":"<code>force_inspection</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to force inspecting modules (importing them) even if their source code is available.</p> <p>This option is useful when you know that dynamic analysis (inspection) yields better results than static analysis. Do not use this blindly: the recommended approach is to write a Griffe extension that will improve extracted API data. See How to selectively inspect objects.</p> <p>See also <code>allow_inspection</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          force_inspection: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      force_inspection: true\n</code></pre> <p>Packages are loaded only once.</p> <p> When mkdocstrings-python collects data from a Python package (thanks to Griffe), it collects the entire package and caches it. Next time an object from the same package is rendered, the package is retrieved from the cache and not collected again. The <code>force_inspection</code> option will therefore only have an effect the first time a package is collected, and will do nothing for objects rendered afterwards.</p> <p></p>"},{"location":"usage/configuration/general/#preload_modules","title":"<code>preload_modules</code><code>your_module</code><code>your_module</code>","text":"<ul> <li> Type <code>list[str] | None</code> <code>None</code></li> </ul> <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>). It is useful when you want to render documentation for a particular member of an object, and this member is imported from another package than its parent.</p> <p>For an imported member to be rendered, you need to add it to the <code>__all__</code> attribute of the importing module. The package from which the imported object originates must be accessible to the handler (see Finding modules).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          preload_modules:\n          - their_package\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: your_package.your_module\n    options:\n      preload_modules:\n      - their_package\n</code></pre> your_package/your_module.py<pre><code>from their_package.their_module import their_object\n\n__all__ = [\"their_object\"]\n\n# rest of your code\n</code></pre> <p>Preview</p> With preloaded modulesWithout preloaded modules <p>Docstring of your module.</p> <code>their_object</code> <p>Docstring of their object.</p> <p>Docstring of your module.</p> <p></p>"},{"location":"usage/configuration/general/#show_bases","title":"<code>show_bases</code><code>SomeClass()</code><code>SomeClass()</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the base classes of a class.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_bases: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      show_bases: false\n</code></pre> <p>Preview</p> With basesWithout bases <p>Bases: <code>SomeBaseClass</code></p> <p>Docstring of the class.</p> <p>Docstring of the class.</p> <p></p>"},{"location":"usage/configuration/general/#show_inheritance_diagram","title":"<code>show_inheritance_diagram</code>","text":"<p> Sponsors only \u2014  Insiders 1.7.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the inheritance diagram of a class using Mermaid.</p> <p>With this option enabled, an inheritance diagram (as a flowchart) will be displayed after a class signature. Each node will act as a cross-reference and will bring you to the relevant class' documentation when clicking on it.</p> <p>It should work out of the box with Material for MkDocs. For other themes, you must include Mermaid's Javascript code manually:</p> mkdocs.yml<pre><code>extra_javascript:\n- https://unpkg.com/mermaid@10.9.0/dist/mermaid.min.js\n</code></pre> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_inheritance_diagram: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      show_inheritance_diagram: false\n</code></pre> <p>Preview</p> <p>With the following classes:</p> <pre><code>class SuperAbstract:\n    \"\"\"Super abstract class.\"\"\"\nclass Mixin1:\n    \"\"\"Mixin 1.\"\"\"\nclass Abstract(SuperAbstract, Mixin1):\n    \"\"\"Abstract class.\"\"\"\nclass Mixin2A:\n    \"\"\"Mixin 2A.\"\"\"\nclass Mixin2B(Mixin2A):\n    \"\"\"Mixin 2B.\"\"\"\nclass Concrete(Abstract, Mixin2B):\n    \"\"\"Concrete class.\"\"\"\nclass SuperConcrete(Concrete):\n    \"\"\"Super concrete class.\"\"\"\n</code></pre> <p>The diagram for <code>SuperConcrete</code> will look like this:</p> <pre><code>flowchart TD\nSuperConcrete[SuperConcrete]\nConcrete[Concrete]\nAbstract[Abstract]\nSuperAbstract[SuperAbstract]\nMixin1[Mixin1]\nMixin2B[Mixin2B]\nMixin2A[Mixin2A]\n\nConcrete --&gt; SuperConcrete\nAbstract --&gt; Concrete\nSuperAbstract --&gt; Abstract\nMixin1 --&gt; Abstract\nMixin2B --&gt; Concrete\nMixin2A --&gt; Mixin2B</code></pre> <p>Nodes are not clickable in this example because these classes do not exist in our documentation.</p> <p></p>"},{"location":"usage/configuration/general/#show_source","title":"<code>show_source</code><code>some_function()</code><code>some_function()</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the source code of this object.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_source: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      show_source: false\n</code></pre> <p>Preview</p> With sourceWithout source <p>Docstring of the function.</p> Source code in <code>package/module.py</code> <pre><code>def some_function():\n    ...\n</code></pre> <p>Docstring of the function.</p>"},{"location":"usage/configuration/headings/","title":"Headings options","text":""},{"location":"usage/configuration/headings/#heading","title":"<code>heading</code>","text":"<ul> <li> Type <code>str</code> <code>\"\"</code></li> </ul> <p>A custom string to use as the heading of the root object (i.e. the object specified directly after the identifier <code>:::</code>). This will override the default heading generated by the plugin. See also the <code>toc_label</code> option.</p> <p>Not advised to be used as a global configuration option.</p> <p> This option is not advised to be used as a global configuration option, as it will override the default heading for all objects. It is recommended to use it only in specific cases where you want to override the heading for a specific object.</p> in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      heading: \"My fancy module\"\n</code></pre> <p></p>"},{"location":"usage/configuration/headings/#heading_level","title":"<code>heading_level</code>","text":"<ul> <li> Type <code>int</code> <code>2</code></li> </ul> <p>The initial heading level to use.</p> <p>When injecting documentation for an object, the object itself and its members are rendered. For each layer of objects, we increase the heading level by 1.</p> <p>The initial heading level will be used for the first layer. If you set it to 3, then headings will start with <code>&lt;h3&gt;</code>.</p> <p>If the heading for the root object is not shown, then the initial heading level is used for its members.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          heading_level: 2\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      heading_level: 3\n</code></pre> <p>Preview</p> With level 3 and root headingWith level 3, without root heading <code>module</code> (3) <p>Docstring of the module.</p> <code>ClassA</code> (4) <p>Docstring of class A.</p> <code>ClassB</code> (4) <p>Docstring of class B.</p> <code>method_1</code> (5) <p>Docstring of the method.</p> <p>Docstring of the module.</p> <code>ClassA</code> (3) <p>Docstring of class A.</p> <code>ClassB</code> (3) <p>Docstring of class B.</p> <code>method_1</code> (4) <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#parameter_headings","title":"<code>parameter_headings</code>","text":"<p> Insiders 1.6.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to render headings for function/method parameters.</p> <p>With this option enabled, each function/method parameter (including parameters of <code>__init__</code> methods merged in their parent class with the <code>merge_init_into_class</code> option) gets a permalink, an entry in the Table of Contents, and an entry in the generated objects inventory. The permalink and inventory entry allow cross-references from internal and external pages.</p> <p>The identifier used in the permalink and inventory is of the following form: <code>path.to.function(param_name)</code>. To manually cross-reference a parameter, you can therefore use this Markdown syntax:</p> <pre><code>- Class parameter: [`param`][package.module.Class(param)]\n- Method parameter: [`param`][package.module.Class.method(param)]\n- Function parameter: [`param`][package.module.function(param)]\n- Variadic positional parameters: [`*args`][package.module.function(*args)]\n- Variadic keyword parameters: [`**kwargs`][package.module.function(**kwargs)]\n</code></pre> <p>Enabling this option along with <code>signature_crossrefs</code> will automatically render cross-references to parameters in class/function/method signatures and attributes values.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          parameter_headings: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      parameter_headings: true\n</code></pre> <p>Preview: Cross-references</p> <p>Preview: Parameter sections</p> Table styleList styleSpacy style <p>Parameters:</p> Name Type Description Default <code>str</code> <p>A distribution name.</p> <code>'mkdocstrings-python'</code> <p>Parameters:</p> <ul> <li> </li> </ul> PARAMETER DESCRIPTION <p>A distribution name.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'mkdocstrings-python'</code> </p> <p>Preview: Table of contents (with symbol types)</p> <p><code></code> get_version <code></code> dist</p> <p>To customize symbols, see Customizing symbol types.</p> <p></p>"},{"location":"usage/configuration/headings/#package.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'mkdocstrings-python') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A version number.</p> </li> </ul>"},{"location":"usage/configuration/headings/#package.get_version(dist)","title":"<code>dist</code>","text":"(<code>str</code>, default:                   <code>'mkdocstrings-python'</code> )           \u2013            <p>A distribution name.</p>"},{"location":"usage/configuration/headings/#package.current_version","title":"current_version  <code>module-attribute</code>","text":"<pre><code>current_version: str = get_version(dist='mkdocstrings-python')\n</code></pre> <p>Current package version.</p>"},{"location":"usage/configuration/headings/#package.get_version(dist)","title":"<code>dist</code>","text":""},{"location":"usage/configuration/headings/#package.get_version(dist)","title":"<code>dist</code>","text":"(<code>str</code>, default:                   <code>'mkdocstrings-python'</code> )           \u2013            <p>A distribution name.</p>"},{"location":"usage/configuration/headings/#package.get_version(dist)","title":"<code>dist</code>","text":""},{"location":"usage/configuration/headings/#show_root_heading","title":"<code>show_root_heading</code><code>ClassA</code> (2)<code>ClassB</code> (2)<code>method_a1</code> (2)<code>method_b1</code> (2)","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the heading of the object at the root of the documentation tree (i.e. the object referenced by the identifier after <code>:::</code>).</p> <p>It is pretty common to inject documentation for one module per page, especially when following our automatic reference pages recipe. Since each page already has a title, usually being the module's name, we can spare one heading level by not showing the heading for the module itself (heading levels are limited to 6 by the HTML specification).</p> <p>Sparing that extra level can be helpful when your objects tree is deeply nested (e.g. method in a class in a class in a module). If your objects tree is not deeply nested, and you are injecting documentation for many different objects on a single page, it might be preferable to render the heading of each object.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_root_heading: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.ClassA\n    options:\n      show_root_heading: true\n\n::: path.to.ClassB\n    options:\n      show_root_heading: true\n</code></pre> <p>Preview</p> With root headingWithout root heading <p>Docstring of class A.</p> <code>method_a1</code> (3) <p>Docstring of the method.</p> <p>Docstring of class B.</p> <code>method_b1</code> (3) <p>Docstring of the method.</p> <p>Docstring of class A.</p> <p>Docstring of the method.</p> <p>Docstring of class B.</p> <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_root_toc_entry","title":"<code>show_root_toc_entry</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>If the root heading is not shown, at least add a ToC entry for it.</p> <p>If you inject documentation for an object in the middle of a page, after long paragraphs, and without showing the root heading, then you will not be able to link to this particular object as it won't have a permalink and will be \"lost\" in the middle of text. In that case, it is useful to add a hidden anchor to the document, which will also appear in the table of contents.</p> <p>In other cases, you might want to disable the entry to avoid polluting the ToC. It is not possible to show the root heading and hide the ToC entry.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_root_toc_entry: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>## Some heading\n\nLots of text.\n\n::: path.to.object\n    options:\n      show_root_toc_entry: false\n\n## Other heading.\n\nMore text.\n</code></pre> <p>Preview</p> With ToC entryWithout ToC entry <p>Table of contents Some heading <code>object</code> Other heading</p> <p>Table of contents Some heading Other heading</p> <p></p>"},{"location":"usage/configuration/headings/#show_root_full_path","title":"<code>show_root_full_path</code><code>package.module.Class.method</code><code>method</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show the full Python path for the root object heading.</p> <p>The path of a Python object is the dot-separated list of names under which it is accessible, for example <code>package.module.Class.method</code>.</p> <p>With this option you can choose to show the full path of the object you inject documentation for, or just its name. This option impacts only the object you specify, not its members. For members, see the two other options <code>show_root_members_full_path</code> and <code>show_object_full_path</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_root_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module.Class.method\n    options:\n      show_root_full_path: false\n</code></pre> <p>Preview</p> With root full pathWithout root full path <p>Docstring of the method.</p> <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_root_members_full_path","title":"<code>show_root_members_full_path</code><code>package.module.Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the full Python path of the root members.</p> <p>This option does the same thing as <code>show_root_full_path</code>, but for direct members  of the root object instead of the root object itself.</p> <p>To show the full path for every member recursively, see <code>show_object_full_path</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_root_members_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_root_members_full_path: false\n</code></pre> <p>Preview</p> With members full pathWithout members full path <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p> <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_object_full_path","title":"<code>show_object_full_path</code><code>package.module.Class</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the full Python path of every object.</p> <p>Same as for <code>show_root_members_full_path</code>, but for every member, recursively. This option takes precedence over <code>show_root_members_full_path</code>:</p> <code>show_root_members_full_path</code> <code>show_object_full_path</code> Direct root members path False False Name only False True Full True False Full True True Full in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_object_full_path: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_object_full_path: false\n</code></pre> <p>Preview</p> With objects full pathWithout objects full path <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>package.module.Class.method</code> <p>Docstring of the method.</p> <p>Docstring of the module.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_category_heading","title":"<code>show_category_heading</code>Attributes (2)Classes (2)<code>module_attribute</code> (2)<code>Class</code> (2)","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>When grouped by categories, show a heading for each category. These category headings will appear in the table of contents, allowing you to link to them using their permalinks.</p> <p>Not recommended with deeply nested objects.</p> <p> When injecting documentation for deeply nested objects, you'll quickly run out of heading levels, and the objects at the bottom of the tree risk all getting documented using H6 headings, which might decrease the readability of your API docs.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          group_by_category: true\n          show_category_heading: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      group_by_category: true\n      show_category_heading: false\n</code></pre> <p>Preview</p> With category headingsWithout category headings <p>Docstring of the module.</p> <code>module_attribute</code> (3) <p>Docstring of the module attribute.</p> <code>Class</code> (3) <p>Docstring of the class.</p> Attributes (4) <code>class_attribute</code> (5) <p>Docstring of the class attribute.</p> Methods (4) <code>method</code> (5) <p>Docstring of the method.</p> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the class.</p> <code>class_attribute</code> (3) <p>Docstring of the class attribute.</p> <code>method</code> (3) <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_symbol_type_heading","title":"<code>show_symbol_type_heading</code><code></code> <code>attribute</code><code></code> <code>function</code><code></code> <code>Class</code><code>attribute</code><code>function</code><code>Class</code>","text":"<p> Insiders 1.1.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in headings.</p> <p>This option will prefix headings with <code></code>, <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_toc</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_symbol_type_heading: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_symbol_type_heading: false\n</code></pre> <p>Preview</p> With symbol type in headingsWithout symbol type in headings <code></code> <code>module</code> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the function.</p> <p>Docstring of the class.</p> <code></code> <code>method</code> <p>Docstring of the method.</p> <code>module</code> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the function.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_symbol_type_toc","title":"<code>show_symbol_type_toc</code>","text":"<p> Insiders 1.1.0</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in the Table of Contents.</p> <p>This option will prefix items in the ToC with <code></code>, <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_heading</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_symbol_type_toc: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_symbol_type_toc: false\n</code></pre> <p>Preview</p> With symbol type in ToCWithout symbol type in ToC <ul> <li><code></code> module</li> <li><code></code> attribute</li> <li><code></code> function</li> <li><code></code> Class     <ul> <li><code></code> method</li> </ul> </li> </ul> <ul> <li>module</li> <li>attribute</li> <li>function</li> <li>Class     <ul> <li>method</li> </ul> </li> </ul> <p></p>"},{"location":"usage/configuration/headings/#toc_label","title":"<code>toc_label</code>","text":"<ul> <li> Type <code>str</code> <code>\"\"</code></li> </ul> <p>A custom string to use as the label in the Table of Contents for the root object (i.e. the one specified directly after the identifier <code>:::</code>). This will override the default label generated by the plugin. See also the <code>heading</code> option.</p> <p>Not advised to be used as a global configuration option.</p> <p> This option is not advised to be used as a global configuration option, as it will override the default label for all objects. It is recommended to use it only in specific cases where you want to override the label for a specific object.</p> <p>Use with/without <code>heading</code>.</p> <p> If you use this option without specifying a custom <code>heading</code>, the default heading will be used in the page, but the label in the Table of Contents will be the one you specified. By providing both an option for <code>heading</code> and <code>toc_label</code>, we leave the customization entirely up to you.</p> in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      heading: \"My fancy module\"\n      toc_label: \"My fancy module\"\n</code></pre>"},{"location":"usage/configuration/members/","title":"Members options","text":""},{"location":"usage/configuration/members/#members","title":"<code>members</code><code>this_function</code><code>ThisClass</code><code>this_attribute</code><code>ThisClass</code>","text":"<ul> <li> Type <code>list[str] |     bool | None</code> <code>None</code></li> </ul> <p>An explicit list of members to render.</p> <p>Only members declared in this list will be rendered. A member without a docstring will still be rendered, even if <code>show_if_no_docstring</code> is set to false.</p> <p>The members will be rendered in the specified order, regardless of the value of <code>members_order</code>. Note that members will still be grouped by category, according to the <code>group_by_category</code> option.</p> <p>Passing a falsy value (<code>no</code>, <code>false</code> in YAML) or an empty list (<code>[]</code>) will tell the Python handler not to render any member. Passing a truthy value (<code>yes</code>, <code>true</code> in YAML) will tell the Python handler to render every member.</p> <p>Any given value, except for an explicit <code>None</code> (<code>null</code> in YAML) will tell the handler to ignore <code>filters</code> for the object's members. Filters will still be applied to the next layers of members (grand-children).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          members:\n          - hello  # (1)\n</code></pre> <ol> <li> Most of the time it won't make sense to use this option at the global level.</li> </ol> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      members:\n      - ThisClass\n      - this_function\n</code></pre> package/module.py<pre><code>\"\"\"Module docstring.\"\"\"\n\n\ndef this_function():\n    \"\"\"Function docstring.\"\"\"\n\n\nclass ThisClass:\n    \"\"\"Class docstring.\"\"\"\n\n    def method(self):\n        \"\"\"Method docstring.\"\"\"\n\n\nthis_attribute = 0\n\"\"\"Attribute docstring.\"\"\"\n</code></pre> <p>Preview</p> With <code>members: true</code>With <code>members: false</code> or <code>members: []</code>With <code>members: [ThisClass]</code> <p>Module docstring.</p> <p>Function docstring.</p> <p>Class docstring.</p> <code>method</code> <p>Method docstring.</p> <p>Attribute docstring.</p> <p>Module docstring.</p> <p>Module docstring.</p> <p>Class docstring.</p> <code>method</code> <p>Method docstring.</p> <p>The default behavior (with unspecified <code>members</code> or <code>members: null</code>) is to use <code>filters</code>.</p> <p></p>"},{"location":"usage/configuration/members/#inherited_members","title":"<code>inherited_members</code><code>Base</code><code>Main</code><code>Base</code><code>Main</code>","text":"<ul> <li> Type <code>list[str] |     bool</code> <code>False</code></li> </ul> <p>An explicit list of inherited members (for classes) to render.</p> <p>Inherited members are always fetched from classes that are in the same package as the currently rendered class. To fetch members inherited from base classes, themselves coming from external packages, use the <code>preload_modules</code> option. For example, if your class inherits from Pydantic's <code>BaseModel</code>, and you want to render <code>BaseModel</code>'s methods in your class, use <code>preload_modules: [pydantic]</code>. The <code>pydantic</code> package must be available in the current environment.</p> <p>Passing a falsy value (<code>no</code>, <code>false</code> in YAML) or an empty list (<code>[]</code>) will tell the Python handler not to render any inherited member. Passing a truthy value (<code>yes</code>, <code>true</code> in YAML) will tell the Python handler to render every inherited member.</p> <p>When all inherited members are selected with <code>inherited_members: true</code>, it is possible to specify both members and inherited members in the <code>members</code> list:</p> <pre><code>inherited_members: true\nmembers:\n- inherited_member_a\n- inherited_member_b\n- member_x\n- member_y\n</code></pre> <p>The alternative is not supported:</p> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\nmembers:\n- member_x\n- member_y\n</code></pre> <p>...because it would make members ordering ambiguous/unspecified.</p> <p>You can render inherited members only by setting <code>inherited_members: true</code> (or a list of inherited members) and setting <code>members: false</code>:</p> <pre><code>inherited_members: true\nmembers: false\n</code></pre> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\nmembers: false\n</code></pre> <p>You can render all declared members and all or specific inherited members by leaving <code>members</code> as null (default):</p> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\n# members: null  # (1)\n</code></pre> <ol> <li>In this case, only declared members will be subject to further filtering with <code>filters</code> and <code>docstrings</code>.</li> </ol> <pre><code>inherited_members: true  # (1)\n# members: null\n</code></pre> <ol> <li>In this case, both declared and inherited members will be subject to further filtering with <code>filters</code> and <code>docstrings</code>.</li> </ol> <p>You can render all declared members and all or specific inherited members, avoiding further filtering with <code>filters</code> and <code>docstrings</code> by setting <code>members: true</code>:</p> <pre><code>inherited_members: true\nmembers: true\n</code></pre> <pre><code>inherited_members:\n- inherited_member_a\n- inherited_member_b\nmembers: true\n</code></pre> <p>The general rule is that declared or inherited members specified in lists are never filtered out.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          inherited_members: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      inherited_members: true\n</code></pre> package/module.py<pre><code>\"\"\"Module docstring.\"\"\"\n\n\nclass Base:\n    \"\"\"Base class.\"\"\"\n\n    def base(self):\n        \"\"\"Base method.\"\"\"\n\n\nclass Main(Base):\n    \"\"\"Main class.\"\"\"\n\n    def main(self):\n        \"\"\"Main method.\"\"\"\n</code></pre> <p>Preview</p> With inherited membersWithout inherited members <p>Module docstring.</p> <p>Base class.</p> <code>base</code> <p>Base method.</p> <p>Main class.</p> <code>base</code> <p>Base method.</p> <code>main</code> <p>Main method.</p> <p>Module docstring.</p> <p>Base class.</p> <code>base</code> <p>Base method.</p> <p>Main class.</p> <code>main</code> <p>Main method.</p> <p></p>"},{"location":"usage/configuration/members/#members_order","title":"<code>members_order</code><code>function_a</code><code>function_b</code><code>function_c</code><code>function_b</code><code>function_a</code><code>function_c</code>","text":"<ul> <li> Type <code>str | list[str]</code> <code>\"alphabetical\"</code></li> </ul> <p>The members ordering to use. Possible values:</p> <ul> <li><code>__all__</code> ( Sponsors only \u2014  Insiders 1.12.0): Order according to <code>__all__</code> attributes. Since classes do not define <code>__all__</code> attributes, you can specify a second ordering method by using a list.</li> <li><code>alphabetical</code>: Order by the members names.</li> <li><code>source</code>: Order members as they appear in the source file.</li> </ul> <p>The order applies for all members, recursively. The order will be ignored for members that are explicitely sorted using the <code>members</code> option. Note that members will still be grouped by category, according to the <code>group_by_category</code> option.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          members_order: alphabetical\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      members_order: source\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      members_order: [__all__, source]\n</code></pre> package/module.py<pre><code>\"\"\"Module docstring.\"\"\"\n\n\ndef function_b():\n    \"\"\"Function a.\"\"\"\n\n\ndef function_a():\n    \"\"\"Function b.\"\"\"\n\n\ndef function_c():\n    \"\"\"Function c.\"\"\"\n</code></pre> <p>Preview</p> With alphabetical orderWith source order <p>Module docstring.</p> <p>Function a.</p> <p>Function b.</p> <p>Function c.</p> <p>Module docstring.</p> <p>Function b.</p> <p>Function a.</p> <p>Function c.</p> <p></p>"},{"location":"usage/configuration/members/#filters","title":"<code>filters</code><code>hello</code><code>_world</code><code>hello</code><code>_world</code>","text":"<ul> <li> Type <code>list[str] | Literal[\"public\"] | None</code> <code>[\"!^_[^_]\"]</code></li> </ul> <p>A list of filters, or <code>\"public\"</code>.</p> <p>Filtering methods</p> <p></p> <p> Sponsors only \u2014  Insiders 1.11.0</p> <p>The <code>public</code> filtering method will include only public objects: those added to the <code>__all__</code> attribute of modules, or not starting with a single underscore. Special methods and attributes (\"dunder\" methods/attributes, starting and ending with two underscores), like <code>__init__</code>, <code>__call__</code>, <code>__mult__</code>, etc., are always considered public.</p> <p>List of filters</p> <p>Filters are regular expressions. These regular expressions are evaluated by Python and so must match the syntax supported by the <code>re</code> module. A filter starting with <code>!</code> (negative filter) will exclude matching objects instead of including them.</p> <p>The default value (<code>[\"!^_[^_]\"]</code>) means: render every object, except those starting with one underscore, unless they start with two underscores. It means that an object whose name is <code>hello</code>, <code>__hello</code>, or <code>__hello__</code> will be rendered, but not one whose name is <code>_hello</code>.</p> <p>Each filter takes precedence over the previous one. This allows for fine-grain selection of objects by adding more specific filters. For example, you can start by unselecting objects that start with <code>_</code>, and add a second filter that re-select objects that start with <code>__</code>. The default filters can therefore be rewritten like this:</p> <pre><code>filters:\n- \"!^_\"\n- \"^__\"\n</code></pre> <p>If there are no negative filters, the handler considers that everything is unselected first, and then selects things based on your positive filters. If there is at least one negative filter, the handler considers that everything is selected first, and then re-selects/unselects things based on your other filters. In short, <code>filters: [\"a\"]</code> means \"keep nothing except names containing <code>a</code>\", while <code>filters: [\"!a\"]</code> means \"keep everything except names containing <code>a</code>\".</p> <p>An empty list of filters tells the Python handler to render every object. The <code>members</code> option takes precedence over filters (filters will still be applied recursively to lower members in the hierarchy).</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          filters:\n          - \"!^_[^_]\"\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      filters: public\n</code></pre> package/module.py<pre><code>def hello():\n    ...\n\n\ndef _world():\n    ...\n</code></pre> <p>Preview</p> With <code>filters: []</code>With <code>filters: [\"hello\"]</code>With <code>filters: [\"!hello\"]</code> <p>Module docstring.</p> <p>Function docstring.</p> <p>Function docstring.</p> <p>Module docstring.</p> <p>Function docstring.</p> <p>Module docstring.</p> <p>Function docstring.</p> <p>Common filters</p> <p>Here are some common filters that you might to want to use.</p> <ul> <li><code>[\"!^_\"]</code>: exclude all private/protected/special objects</li> <li><code>[\"!^_\", \"^__init__$\"]</code>: same as above, but keep <code>__init__</code> methods</li> <li><code>[\"!^_[^_]\"]</code>: exclude all private/protected objects, keep special ones (default filters)</li> </ul> <p></p>"},{"location":"usage/configuration/members/#group_by_category","title":"<code>group_by_category</code><code>attribute_c</code><code>ClassB</code><code>function_a</code><code>function_d</code><code>function_a</code><code>ClassB</code><code>attribute_c</code><code>function_d</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Group the object members by categories: attributes, classes, functions, and modules.</p> <p>Members within a same category will be ordered according to the <code>members_order</code> option. You can use the <code>show_category_heading</code> option to also render a heading for each category.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          group_by_category: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      group_by_category: false\n</code></pre> package/module.py<pre><code>def function_a():\n    ...\n\n\nclass ClassB:\n    ...\n\n\nattribute_C = 0\n\n\ndef function_d():\n    ...\n</code></pre> <p>Preview</p> With category groupingWithout category grouping <p>Module docstring.</p> <p>Attribute docstring.</p> <p>Class docstring.</p> <p>Function docstring.</p> <p>Function docstring.</p> <p>Module docstring.</p> <p>Function docstring.</p> <p>Class docstring.</p> <p>Attribute docstring.</p> <p>Function docstring.</p> <p></p>"},{"location":"usage/configuration/members/#show_submodules","title":"<code>show_submodules</code><code>subpackage_member</code><code>submodule</code><code>subpackage_member</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>When rendering a module, show its submodules recursively.</p> <p>This is false by default, because most of the time we render only one module per page, and when rendering a package (a tree of modules and their members) on a single page, we quickly run out of heading levels.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_submodules: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.subpackage\n    options:\n      show_submodules: false\n</code></pre> package<pre><code>\ud83d\udcc1 package\n\u251c\u2500\u2500  __init__.py\n\u2514\u2500\u2500 \ud83d\udcc1 subpackage\n    \u251c\u2500\u2500  __init__.py\n    \u2514\u2500\u2500  submodule.py\n</code></pre> <p>Preview</p> With submodulesWithout submodules <p>Subpackage docstring.</p> <p>Member docstring.</p> <p>Submodule docstring.</p> <code>submodule_member</code> <p>Member docstring.</p> <p>Subpackage docstring.</p> <p>Member docstring.</p> <p></p>"},{"location":"usage/configuration/members/#summary","title":"<code>summary</code>MyClassMyClass","text":"<p> Insiders 1.2.0</p> <ul> <li> Type <code>bool | dict[str, bool]</code> <code>False</code></li> </ul> <p>Whether to render summaries of modules, classes, functions (methods) and attributes.</p> <p>This option accepts a boolean (<code>yes</code>, <code>true</code>, <code>no</code>, <code>false</code> in YAML) or a dictionary with one or more of the following keys: <code>attributes</code>, <code>functions</code>, <code>classes</code>, <code>modules</code>, with booleans as values. Class methods summary is (de)activated with the <code>functions</code> key. By default, <code>summary</code> is false, and by extension all values are false.</p> <p>Examples:</p> <pre><code>summary: true\n</code></pre> <pre><code>summary: false\n</code></pre> <pre><code>summary:\n  attributes: false\n  functions: true\n  modules: false\n</code></pre> <p>Summaries will be rendered as the corresponding docstring sections. For example, the summary for attributes will be rendered as an Attributes docstring section. The section will be rendered in accordance with the <code>docstring_section_style</code> option. If the objects appearing in the summary are also rendered on the page (or somewhere else on the site), their name will automatically link to their rendered documentation.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          summary: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      summary: false\n</code></pre> <p>Preview</p> With all summariesWith methods summary only <pre><code>::: path.to.module.MyClass\n    options:\n      summary: true\n</code></pre> <p>Class docstring.</p> <p>Methods:</p> <ul> <li>my_method1: Summary of the method (first docstring line).</li> <li>my_method2: Summary of the method (first docstring line).</li> </ul> <p>Attributes:</p> <ul> <li>attr1: Summary of the attribute (first docstring line).</li> <li>attr2: Summary of the attribute (first docstring line).</li> </ul> <pre><code>::: path.to.module.MyClass\n    options:\n      summary:\n        functions: true\n</code></pre> <p>Class docstring.</p> <p>Methods:</p> <ul> <li>my_method1: Summary of the method (first docstring line).</li> <li>my_method2: Summary of the method (first docstring line).</li> </ul> <p></p>"},{"location":"usage/configuration/members/#show_labels","title":"<code>show_labels</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Whether to show labels of the members.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_labels: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_labels: false\n</code></pre> package/module.py<pre><code>class SomeClass:\n    some_attr: int\n</code></pre> <p>Preview</p> With labelsWithout labels <p><code> some_attr: int </code> <code>instance-attribute</code></p> <p><code> some_attr: int </code></p>"},{"location":"usage/configuration/signatures/","title":"Signatures options","text":""},{"location":"usage/configuration/signatures/#annotations_path","title":"<code>annotations_path</code><code>convert(text, md)</code><code>convert(text, md)</code><code>convert(text, md)</code>","text":"<ul> <li> Type <code>str</code> <code>\"brief\"</code></li> </ul> <p>The verbosity for annotations path.</p> <p>Possible values:</p> <ul> <li><code>brief</code> (recommended): render only the last component of each type path, not their full paths.     For example, it will render <code>Sequence[Path]</code> and not <code>typing.Sequence[pathlib.Path]</code>.     Brief annotations will cross-reference the right object anyway,     and show the full path in a tooltip when hovering them.</li> <li><code>source</code>: render annotations as written in the source. For example if you imported <code>typing</code> as <code>t</code>,     it will render <code>typing.Sequence</code> as <code>t.Sequence</code>. Each part will cross-reference the relevant object:     <code>t</code> will link to the <code>typing</code> module and <code>Sequence</code> will link to the <code>Sequence</code> type.</li> <li><code>full</code>: render annotations with their full path (the opposite of brief).     For example if you import <code>Sequence</code> and <code>Pattern</code> from <code>typing</code> and annoate something using     <code>Sequence[Pattern]</code>, it will render as <code>typing.Sequence[typing.Pattern]</code>, with each part     cross-referencing the corresponding object.</li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          annotations_path: brief\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      annotations_path: source\n</code></pre> <p>Preview</p> Brief annotationsSource annotationsFull annotations <pre><code>import markdown\nimport markupsafe\n\n\ndef convert(text: str, md: markdown.Markdown) -&gt; markupsafe.Markup:\n    \"\"\"Convert text to Markdown.\n\n    Parameters:\n        text: The text to convert.\n        md: A Markdown instance.\n\n    Returns:\n        Converted markup.\n    \"\"\"\n    return markupsafe.Markup(md.convert(text))\n</code></pre> <p>Convert text to Markdown.</p> <p>Parameters:</p> Type Description Default <code>str</code> The text to convert. required <code>Markdown</code> A Markdown instance. required <p>Returns:</p> Type Name Description <code>Markup</code> <code>text</code> Converted markup. <pre><code>import markdown\nfrom markupsafe import Markup\n\n\ndef convert(text: str, md: markdown.Markdown) -&gt; Markup:\n    \"\"\"Convert text to Markdown.\n\n    Parameters:\n        text: The text to convert.\n        md: A Markdown instance.\n\n    Returns:\n        Converted markup.\n    \"\"\"\n    return Markup(md.convert(text))\n</code></pre> <p>Convert text to Markdown.</p> <p>Parameters:</p> Type Description Default <code>str</code> The text to convert. required <code>markdown.Markdown</code> A Markdown instance. required <p>Returns:</p> Type Name Description <code>Markup</code> <code>text</code> Converted markup. <pre><code>from markdown import Markdown\nfrom markupsafe import Markup\n\n\ndef convert(text: str, md: Markdown) -&gt; Markup:\n    \"\"\"Convert text to Markdown.\n\n    Parameters:\n        text: The text to convert.\n        md: A Markdown instance.\n\n    Returns:\n        Converted markup.\n    \"\"\"\n    return Markup(md.convert(text))\n</code></pre> <p>Convert text to Markdown.</p> <p>Parameters:</p> Type Description Default <code>str</code> The text to convert. required <code>markdown.Markdown</code> A Markdown instance. required <p>Returns:</p> Type Name Description <code>markupsafe.Markup</code> <code>text</code> Converted markup. <p></p>"},{"location":"usage/configuration/signatures/#line_length","title":"<code>line_length</code>long_function_namelong_function_name","text":"<ul> <li> Type <code>int</code> <code>60</code></li> </ul> <p>Maximum line length when formatting code/signatures.</p> <p>When separating signatures from headings with the <code>separate_signature</code> option, the Python handler will try to format the signatures using a formatter and the specified line length.</p> <p>The handler will automatically try to format using :</p> <ol> <li>Black</li> <li>Ruff</li> </ol> <p>If a formatter is not found, the handler issues an INFO log once.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          separate_signature: true\n          line_length: 60\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n      line_length: 80\n</code></pre> <p>Preview</p> Line length 60Line length 80 <pre><code>long_function_name(\n    long_parameter_1=\"hello\",\n    long_parameter_2=\"world\",\n)</code></pre> <pre><code>long_function_name(long_parameter_1=\"hello\", long_parameter_2=\"world\")</code></pre> <p></p>"},{"location":"usage/configuration/signatures/#modernize_annotations","title":"<code>modernize_annotations</code>","text":"<p> Sponsors only \u2014  Insiders 1.8.0 \u2014 This feature also requires Griffe Insiders to be installed.</p> <ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Modernize annotations with latest features and PEPs of the Python language.</p> <p>The Python language keeps evolving, and often library developers must continue to support a few minor versions of Python. Therefore they cannot use some features that were introduced in the latest versions.</p> <p>Yet this doesn't mean they can't enjoy latest features in their docs: Griffe allows to \"modernize\" expressions, for example by replacing <code>typing.Union</code> with PEP 604 type unions <code>|</code>. Thanks to this, mkdocstrings' Python handler can automatically transform type annotations into their modern equivalent. This improves consistency in your docs, and shows users how to use your code with the latest features of the language.</p> <p>Modernizations applied:</p> <ul> <li><code>typing.Dict[A, B]</code> becomes <code>dict[A, B]</code></li> <li><code>typing.List[A]</code> becomes <code>list[A]</code></li> <li><code>typing.Set[A]</code> becomes <code>set[A]</code></li> <li><code>typing.Tuple[A]</code> becomes <code>tuple[A]</code></li> <li><code>typing.Union[A, B]</code> becomes <code>A | B</code></li> <li><code>typing.Optional[A]</code> becomes <code>A | None</code></li> </ul> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          modernize_annotations: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.object\n    options:\n      modernize_annotations: false\n</code></pre> <p>Preview</p> <pre><code>from typing import Optional, Union, List\n\nexample: Optional[Union[int, List[int]]] = None\n</code></pre> Unchanged annotationsModernized annotations <p></p>"},{"location":"usage/configuration/signatures/#package.modern.example","title":"example","text":"<pre><code>example: Optional[Union[int, List[int]]] = None\n</code></pre>"},{"location":"usage/configuration/signatures/#package.modern.example","title":"example","text":"<pre><code>example: int | list[int] | None = None\n</code></pre>"},{"location":"usage/configuration/signatures/#show_signature","title":"<code>show_signature</code><code>function(param1, param2=None)</code><code>function</code>","text":"<ul> <li> Type <code>bool</code> <code>True</code></li> </ul> <p>Show methods and functions signatures.</p> <p>Without it, just the function/method name is rendered.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_signature: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_signature: false\n</code></pre> <p>Preview</p> With signatureWithout signature <p>Function docstring.</p> <p>Function docstring.</p> <p></p>"},{"location":"usage/configuration/signatures/#show_signature_annotations","title":"<code>show_signature_annotations</code>functionfunction","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the type annotations in methods and functions signatures.</p> <p>Since the heading can become quite long when annotations are rendered, it is usually best to separate the signature from the heading.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          separate_signature: true\n          show_signature_annotations: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n      show_signature_annotations: false\n</code></pre> <p>Preview</p> With signature annotationsWithout signature annotations <pre><code>function(\n    param1: list[int | float],\n    param2: bool | None = None,\n) -&gt; float\n</code></pre> <p>Function docstring.</p> <pre><code>function(param1, param2=None)\n</code></pre> <p>Function docstring.</p> <p></p>"},{"location":"usage/configuration/signatures/#separate_signature","title":"<code>separate_signature</code>function<code>function(param1, param2=None)</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to put the whole signature in a code block below the heading.</p> <p>When separating signatures from headings, the Python handler will try to format the signatures using a formatter and the specified line length.</p> <p>The handler will automatically try to format using :</p> <ol> <li>Black</li> <li>Ruff</li> </ol> <p>If a formatter is not found, the handler issues an INFO log once.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          separate_signature: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n</code></pre> <p>Preview</p> With separate signatureWithout separate signature <pre><code>function(param1, param2=None)\n</code></pre> <p>Function docstring.</p> <p>Function docstring.</p> <p></p>"},{"location":"usage/configuration/signatures/#show_overloads","title":"<code>show_overloads</code>functionfunction","text":"<p>Whether to render function / method overloads.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          show_overloads: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      show_overloads: false\n</code></pre> <p>Preview</p> With overloadsWithout overloads <p><pre><code>@overload\nfunction(param1: int): ...\n\n@overload\nfunction(param1: str): ...\n\nfunction(param1: str | int)\n</code></pre> Function docstring.</p> <p><pre><code>function(param1: str | int)\n</code></pre> Function docstring.</p> <p></p>"},{"location":"usage/configuration/signatures/#signature_crossrefs","title":"<code>signature_crossrefs</code>do_format_codedo_format_code","text":"<p> Insiders 1.0.0</p> <p>Whether to render cross-references for type annotations in signatures.</p> <p>When signatures are separated from headings with the <code>separate_signature</code> option and type annotations are shown with the <code>show_signature_annotations</code> option, this option will render a cross-reference (link) for each type annotation in the signature.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          separate_signature: true\n          show_signature_annotations: true\n          signature_crossrefs: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      separate_signature: true\n      show_signature_annotations: true\n      signature_crossrefs: true\n</code></pre> <p>Preview</p> With signature cross-referencesWithout signature cross-references <pre><code>do_format_code(code: str, line_length: int) -&gt; str\n</code></pre> <p>Function docstring.</p> <pre><code>do_format_code(code: str, line_length: int) -&gt; str\n</code></pre> <p>Function docstring.</p> <p></p>"},{"location":"usage/configuration/signatures/#unwrap_annotated","title":"<code>unwrap_annotated</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Whether to unwrap <code>Annotated</code> types to show only the type without the annotations.</p> <p>For example, unwrapping <code>Annotated[int, Gt(10)]</code> will render <code>int</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          unwrap_annotated: false\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      unwrap_annotated: true\n</code></pre>"},{"location":"usage/docstrings/google/","title":"Google style","text":""},{"location":"usage/docstrings/google/#work-in-progress","title":"Work in Progress!","text":""},{"location":"usage/docstrings/google/#google-style-admonitions","title":"Google-style admonitions","text":"<p>With Google-style docstrings, any section that is not recognized will be transformed into its admonition equivalent. For example:</p> DocstringResult <pre><code>\"\"\"\nNote:\n    It looks like a section, but it will be rendered as an admonition.\n\nTip: You can even choose a title.\n    This admonition has a custom title!\n\"\"\"\n</code></pre> <p>Note</p> <p>It looks like a section, but it will be rendered as an admonition.</p> <p>You can even choose a title.</p> <p> This admonition has a custom title!</p> <p>See Napoleon's documentation. See the supported docstring sections on Griffe's documentation.</p>"},{"location":"usage/docstrings/numpy/","title":"Numpydoc style","text":""},{"location":"usage/docstrings/numpy/#work-in-progress","title":"Work in Progress!","text":"<p>Note</p> <p>As Numpy-style is partially supported by the underlying parser, you may experience problems in the building process if your docstring has a <code>Methods</code> section in the class docstring (see #366).</p> <p>See Numpydoc's documentation. See the supported docstring sections on Griffe's documentation.</p>"},{"location":"usage/docstrings/sphinx/","title":"Sphinx style","text":""},{"location":"usage/docstrings/sphinx/#work-in-progress","title":"Work in Progress!","text":"<p>See Sphinx's documentation. See the supported docstring sections on Griffe's documentation.</p>"}]}